
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004798  08004798  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a0  080047a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000114  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da6  00000000  00000000  0002eb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca0  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c59  00000000  00000000  00032330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebe4  00000000  00000000  00054f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8b3c  00000000  00000000  00063b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c6a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000405c  00000000  00000000  0013c6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004660 	.word	0x08004660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004660 	.word	0x08004660

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f002 fc1e 	bl	8002dc6 <HAL_UART_Transmit>
  return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000011c 	.word	0x2000011c

08000598 <MAP>:
static uint8_t temp;

volatile HAL_StatusTypeDef adc1PoolResult;

uint32_t MAP(uint32_t IN, uint32_t INmin, uint32_t INmax, uint32_t OUTmin, uint32_t OUTmax)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]
    return ((((IN - INmin)*(OUTmax - OUTmin))/(INmax - INmin)) + OUTmin);
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	69b9      	ldr	r1, [r7, #24]
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	1a8a      	subs	r2, r1, r2
 80005b2:	fb03 f202 	mul.w	r2, r3, r2
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1acb      	subs	r3, r1, r3
 80005bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	4413      	add	r3, r2
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <checkTemp>:



void checkTemp(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8

	HAL_ADC_Start(&hadc2);
 80005d6:	4818      	ldr	r0, [pc, #96]	; (8000638 <checkTemp+0x68>)
 80005d8:	f000 fd80 	bl	80010dc <HAL_ADC_Start>
	adc1PoolResult = HAL_ADC_PollForConversion(&hadc2, 100);
 80005dc:	2164      	movs	r1, #100	; 0x64
 80005de:	4816      	ldr	r0, [pc, #88]	; (8000638 <checkTemp+0x68>)
 80005e0:	f000 fe4e 	bl	8001280 <HAL_ADC_PollForConversion>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <checkTemp+0x6c>)
 80005ea:	701a      	strb	r2, [r3, #0]
	if(adc1PoolResult == HAL_OK){
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <checkTemp+0x6c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d11d      	bne.n	8000632 <checkTemp+0x62>
		adc_inTemp_Value = HAL_ADC_GetValue(&hadc2);
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <checkTemp+0x68>)
 80005f8:	f000 fecd 	bl	8001396 <HAL_ADC_GetValue>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <checkTemp+0x70>)
 8000600:	6013      	str	r3, [r2, #0]
		temp = 125 - MAP(adc_inTemp_Value, 0, 2050, -25, 100);
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <checkTemp+0x70>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	2364      	movs	r3, #100	; 0x64
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	f06f 0318 	mvn.w	r3, #24
 800060e:	f640 0202 	movw	r2, #2050	; 0x802
 8000612:	2100      	movs	r1, #0
 8000614:	f7ff ffc0 	bl	8000598 <MAP>
 8000618:	4603      	mov	r3, r0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <checkTemp+0x74>)
 8000624:	701a      	strb	r2, [r3, #0]
		printf("Temperature: %d\r\n", temp);
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <checkTemp+0x74>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <checkTemp+0x78>)
 800062e:	f003 f813 	bl	8003658 <iprintf>
		//HAL_UART_Transmit(&huart3, (uint8_t *)"Temp: ", 6, 10);
	}
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000008c 	.word	0x2000008c
 800063c:	20000169 	.word	0x20000169
 8000640:	20000164 	.word	0x20000164
 8000644:	20000168 	.word	0x20000168
 8000648:	08004678 	.word	0x08004678

0800064c <changeColor>:

void changeColor(char color) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
    switch(color){
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	3b42      	subs	r3, #66	; 0x42
 800065a:	2b10      	cmp	r3, #16
 800065c:	f200 8082 	bhi.w	8000764 <changeColor+0x118>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <changeColor+0x1c>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	080006db 	.word	0x080006db
 800066c:	08000765 	.word	0x08000765
 8000670:	08000765 	.word	0x08000765
 8000674:	08000765 	.word	0x08000765
 8000678:	08000765 	.word	0x08000765
 800067c:	08000709 	.word	0x08000709
 8000680:	08000765 	.word	0x08000765
 8000684:	08000765 	.word	0x08000765
 8000688:	08000765 	.word	0x08000765
 800068c:	08000765 	.word	0x08000765
 8000690:	08000765 	.word	0x08000765
 8000694:	08000765 	.word	0x08000765
 8000698:	08000765 	.word	0x08000765
 800069c:	08000737 	.word	0x08000737
 80006a0:	08000765 	.word	0x08000765
 80006a4:	08000765 	.word	0x08000765
 80006a8:	080006ad 	.word	0x080006ad
    case 'R':
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	482e      	ldr	r0, [pc, #184]	; (800076c <changeColor+0x120>)
 80006b2:	f001 fb7a 	bl	8001daa <HAL_GPIO_TogglePin>
		if(redState == 1){
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <changeColor+0x124>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d106      	bne.n	80006cc <changeColor+0x80>
			printf("Red OFF\r\n");
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <changeColor+0x128>)
 80006c0:	f003 f850 	bl	8003764 <puts>
			//HAL_UART_Transmit(&huart3, (uint8_t *)"Red OFF", 7, 10);
			redState = 0;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <changeColor+0x124>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
		else{
			printf("Red ON\r\n");
			//HAL_UART_Transmit(&huart3, (uint8_t *)"Red ON", 6, 10);
			redState = 1;
		}
		break;
 80006ca:	e04b      	b.n	8000764 <changeColor+0x118>
			printf("Red ON\r\n");
 80006cc:	482a      	ldr	r0, [pc, #168]	; (8000778 <changeColor+0x12c>)
 80006ce:	f003 f849 	bl	8003764 <puts>
			redState = 1;
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <changeColor+0x124>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
		break;
 80006d8:	e044      	b.n	8000764 <changeColor+0x118>

    case 'B':
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80006da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006de:	4823      	ldr	r0, [pc, #140]	; (800076c <changeColor+0x120>)
 80006e0:	f001 fb63 	bl	8001daa <HAL_GPIO_TogglePin>
		if(blueState == 1){
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <changeColor+0x130>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d106      	bne.n	80006fa <changeColor+0xae>
			printf("Blue OFF\r\n");
 80006ec:	4824      	ldr	r0, [pc, #144]	; (8000780 <changeColor+0x134>)
 80006ee:	f003 f839 	bl	8003764 <puts>
			//HAL_UART_Transmit(&huart3, (uint8_t *)"Blue OFF", 8, 10);
			blueState = 0;
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <changeColor+0x130>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
		else{
			printf("Blue ON\r\n");
			//HAL_UART_Transmit(&huart3, (uint8_t *)"Blue ON", 7, 10);
			blueState = 1;
		}
        break;
 80006f8:	e034      	b.n	8000764 <changeColor+0x118>
			printf("Blue ON\r\n");
 80006fa:	4822      	ldr	r0, [pc, #136]	; (8000784 <changeColor+0x138>)
 80006fc:	f003 f832 	bl	8003764 <puts>
			blueState = 1;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <changeColor+0x130>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
        break;
 8000706:	e02d      	b.n	8000764 <changeColor+0x118>
    case 'G':
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070c:	4817      	ldr	r0, [pc, #92]	; (800076c <changeColor+0x120>)
 800070e:	f001 fb4c 	bl	8001daa <HAL_GPIO_TogglePin>
		if(greenState == 1){
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <changeColor+0x13c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d106      	bne.n	8000728 <changeColor+0xdc>
			printf("Green OFF\r\n");
 800071a:	481c      	ldr	r0, [pc, #112]	; (800078c <changeColor+0x140>)
 800071c:	f003 f822 	bl	8003764 <puts>
			//HAL_UART_Transmit(&huart3, (uint8_t *)"Green OFF", 9, 10);
			greenState = 0;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <changeColor+0x13c>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
		else{
			printf("Green ON\r\n");
			//HAL_UART_Transmit(&huart3, (uint8_t *)"Green ON", 8, 10);
			greenState = 1;
		}
        break;
 8000726:	e01d      	b.n	8000764 <changeColor+0x118>
			printf("Green ON\r\n");
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <changeColor+0x144>)
 800072a:	f003 f81b 	bl	8003764 <puts>
			greenState = 1;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <changeColor+0x13c>)
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
        break;
 8000734:	e016      	b.n	8000764 <changeColor+0x118>
    case 'O':
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073a:	480c      	ldr	r0, [pc, #48]	; (800076c <changeColor+0x120>)
 800073c:	f001 fb35 	bl	8001daa <HAL_GPIO_TogglePin>
        if(orangeState == 1){
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <changeColor+0x148>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d106      	bne.n	8000756 <changeColor+0x10a>
        	printf("Orange OFF\r\n");
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <changeColor+0x14c>)
 800074a:	f003 f80b 	bl	8003764 <puts>
        	//HAL_UART_Transmit(&huart3, (uint8_t *)"Orange OFF", 10, 10);
        	orangeState = 0;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <changeColor+0x148>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
        else{
        	printf("Orange ON\r\n");
        	//HAL_UART_Transmit(&huart3, (uint8_t *)"Orange ON", 9, 10);
        	orangeState = 1;
        }
        break;
 8000754:	e005      	b.n	8000762 <changeColor+0x116>
        	printf("Orange ON\r\n");
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <changeColor+0x150>)
 8000758:	f003 f804 	bl	8003764 <puts>
        	orangeState = 1;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <changeColor+0x148>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
        break;
 8000762:	bf00      	nop
    }
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020c00 	.word	0x40020c00
 8000770:	20000161 	.word	0x20000161
 8000774:	0800468c 	.word	0x0800468c
 8000778:	08004698 	.word	0x08004698
 800077c:	20000160 	.word	0x20000160
 8000780:	080046a0 	.word	0x080046a0
 8000784:	080046ac 	.word	0x080046ac
 8000788:	20000163 	.word	0x20000163
 800078c:	080046b8 	.word	0x080046b8
 8000790:	080046c4 	.word	0x080046c4
 8000794:	20000162 	.word	0x20000162
 8000798:	080046d0 	.word	0x080046d0
 800079c:	080046dc 	.word	0x080046dc

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fbe3 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f81f 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 f92d 	bl	8000a0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007b2:	f000 f901 	bl	80009b8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80007b6:	f000 f8c9 	bl	800094c <MX_TIM6_Init>
  MX_ADC2_Init();
 80007ba:	f000 f875 	bl	80008a8 <MX_ADC2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  HAL_TIM_Base_Start_IT(&htim6);
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0x44>)
 80007c0:	f001 ffda 	bl	8002778 <HAL_TIM_Base_Start_IT>

  while (1)
  {
	  char rcvBuf[1];
	  HAL_StatusTypeDef result;
	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 80007c4:	1d39      	adds	r1, r7, #4
 80007c6:	230a      	movs	r3, #10
 80007c8:	2201      	movs	r2, #1
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <main+0x48>)
 80007cc:	f002 fb8d 	bl	8002eea <HAL_UART_Receive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
	  //print('q');
	  if(result == HAL_OK){
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1f4      	bne.n	80007c4 <main+0x24>
		  changeColor(rcvBuf[0]);
 80007da:	793b      	ldrb	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff35 	bl	800064c <changeColor>
  {
 80007e2:	e7ef      	b.n	80007c4 <main+0x24>
 80007e4:	200000d4 	.word	0x200000d4
 80007e8:	2000011c 	.word	0x2000011c

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2230      	movs	r2, #48	; 0x30
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 ff24 	bl	8003648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <SystemClock_Config+0xb4>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <SystemClock_Config+0xb4>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <SystemClock_Config+0xb4>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <SystemClock_Config+0xb8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <SystemClock_Config+0xb8>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <SystemClock_Config+0xb8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fae3 	bl	8001e28 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000868:	f000 f942 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fd46 	bl	8002318 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000892:	f000 f92d 	bl	8000af0 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	463b      	mov	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_ADC2_Init+0x98>)
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <MX_ADC2_Init+0x9c>)
 80008be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_ADC2_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_ADC2_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_ADC2_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_ADC2_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_ADC2_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_ADC2_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_ADC2_Init+0x98>)
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <MX_ADC2_Init+0xa0>)
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_ADC2_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_ADC2_Init+0x98>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_ADC2_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_ADC2_Init+0x98>)
 8000902:	2201      	movs	r2, #1
 8000904:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_ADC2_Init+0x98>)
 8000908:	f000 fba4 	bl	8001054 <HAL_ADC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 f8ed 	bl	8000af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000916:	2309      	movs	r3, #9
 8000918:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_ADC2_Init+0x98>)
 8000928:	f000 fd42 	bl	80013b0 <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000932:	f000 f8dd 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000008c 	.word	0x2000008c
 8000944:	40012100 	.word	0x40012100
 8000948:	0f000001 	.word	0x0f000001

0800094c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_TIM6_Init+0x64>)
 800095c:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <MX_TIM6_Init+0x68>)
 800095e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_TIM6_Init+0x64>)
 8000962:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000966:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_TIM6_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_TIM6_Init+0x64>)
 8000970:	f241 3288 	movw	r2, #5000	; 0x1388
 8000974:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_TIM6_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_TIM6_Init+0x64>)
 800097e:	f001 feab 	bl	80026d8 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000988:	f000 f8b2 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_TIM6_Init+0x64>)
 800099a:	f002 f937 	bl	8002c0c <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009a4:	f000 f8a4 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000d4 	.word	0x200000d4
 80009b4:	40001000 	.word	0x40001000

080009b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_USART3_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009f0:	f002 f99c 	bl	8002d2c <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f879 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000011c 	.word	0x2000011c
 8000a08:	40004800 	.word	0x40004800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a2e      	ldr	r2, [pc, #184]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a7c:	481a      	ldr	r0, [pc, #104]	; (8000ae8 <MX_GPIO_Init+0xdc>)
 8000a7e:	f001 f97b 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a82:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <MX_GPIO_Init+0xdc>)
 8000a9c:	f000 ffb8 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000aa0:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_GPIO_Init+0xe0>)
 8000ab8:	f000 ffaa 	bl	8001a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2017      	movs	r0, #23
 8000ac2:	f000 ff6e 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ac6:	2017      	movs	r0, #23
 8000ac8:	f000 ff87 	bl	80019da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2028      	movs	r0, #40	; 0x28
 8000ad2:	f000 ff66 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ad6:	2028      	movs	r0, #40	; 0x28
 8000ad8:	f000 ff7f 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	40020800 	.word	0x40020800

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_ADC_MspInit+0x7c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d127      	bne.n	8000bbe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_ADC_MspInit+0x84>)
 8000bba:	f000 ff29 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012100 	.word	0x40012100
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d115      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2036      	movs	r0, #54	; 0x36
 8000c08:	f000 fecb 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c0c:	2036      	movs	r0, #54	; 0x36
 8000c0e:	f000 fee4 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40001000 	.word	0x40001000
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12c      	bne.n	8000ca0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c90:	2307      	movs	r3, #7
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0x8c>)
 8000c9c:	f000 feb8 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f988 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d10:	4815      	ldr	r0, [pc, #84]	; (8000d68 <EXTI9_5_IRQHandler+0x60>)
 8000d12:	f001 f819 	bl	8001d48 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <EXTI9_5_IRQHandler+0x1a>
		changeColor('O');
 8000d1c:	204f      	movs	r0, #79	; 0x4f
 8000d1e:	f7ff fc95 	bl	800064c <changeColor>
	}
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <EXTI9_5_IRQHandler+0x60>)
 8000d26:	f001 f80f 	bl	8001d48 <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <EXTI9_5_IRQHandler+0x2e>
		changeColor('R');
 8000d30:	2052      	movs	r0, #82	; 0x52
 8000d32:	f7ff fc8b 	bl	800064c <changeColor>
	}
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET){
 8000d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3a:	480b      	ldr	r0, [pc, #44]	; (8000d68 <EXTI9_5_IRQHandler+0x60>)
 8000d3c:	f001 f804 	bl	8001d48 <HAL_GPIO_ReadPin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d102      	bne.n	8000d4c <EXTI9_5_IRQHandler+0x44>
		changeColor('G');
 8000d46:	2047      	movs	r0, #71	; 0x47
 8000d48:	f7ff fc80 	bl	800064c <changeColor>
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d4c:	2040      	movs	r0, #64	; 0x40
 8000d4e:	f001 f847 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d56:	f001 f843 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000d5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d5e:	f001 f83f 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40020800 	.word	0x40020800

08000d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_RESET){
 8000d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <EXTI15_10_IRQHandler+0x28>)
 8000d76:	f000 ffe7 	bl	8001d48 <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <EXTI15_10_IRQHandler+0x1a>
		changeColor('B');
 8000d80:	2042      	movs	r0, #66	; 0x42
 8000d82:	f7ff fc63 	bl	800064c <changeColor>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000d86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d8a:	f001 f829 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020800 	.word	0x40020800

08000d98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  checkTemp();
 8000d9c:	f7ff fc18 	bl	80005d0 <checkTemp>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM6_DAC_IRQHandler+0x14>)
 8000da2:	f001 fd59 	bl	8002858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000d4 	.word	0x200000d4

08000db0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
  }

  return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fbb5 	bl	8000574 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
  }
  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f002 fb9a 	bl	80035f4 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000016c 	.word	0x2000016c
 8000ef4:	20000188 	.word	0x20000188

08000ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f002 fb59 	bl	8003600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fc27 	bl	80007a0 <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f60:	080047a8 	.word	0x080047a8
  ldr r2, =_sbss
 8000f64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f68:	20000184 	.word	0x20000184

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_Init+0x40>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_Init+0x40>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_Init+0x40>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 fcf7 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f000 f808 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f7ff fdaa 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x54>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x58>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fd0f 	bl	80019f6 <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00e      	b.n	8001000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d80a      	bhi.n	8000ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f000 fcd7 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <HAL_InitTick+0x5c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	20000008 	.word	0x20000008
 8001010:	20000004 	.word	0x20000004

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x20>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_IncTick+0x24>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	20000170 	.word	0x20000170

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000170 	.word	0x20000170

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e033      	b.n	80010d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fd6a 	bl	8000b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d118      	bne.n	80010c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800109a:	f023 0302 	bic.w	r3, r3, #2
 800109e:	f043 0202 	orr.w	r2, r3, #2
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 faa4 	bl	80015f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f023 0303 	bic.w	r3, r3, #3
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
 80010c2:	e001      	b.n	80010c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_Start+0x1a>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e0b2      	b.n	800125c <HAL_ADC_Start+0x180>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b01      	cmp	r3, #1
 800110a:	d018      	beq.n	800113e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <HAL_ADC_Start+0x18c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_ADC_Start+0x190>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9a      	lsrs	r2, r3, #18
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001130:	e002      	b.n	8001138 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3b01      	subs	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d17a      	bne.n	8001242 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001176:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118a:	d106      	bne.n	800119a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	f023 0206 	bic.w	r2, r3, #6
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	645a      	str	r2, [r3, #68]	; 0x44
 8001198:	e002      	b.n	80011a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_ADC_Start+0x194>)
 80011aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d12a      	bne.n	8001218 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a2b      	ldr	r2, [pc, #172]	; (8001274 <HAL_ADC_Start+0x198>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d015      	beq.n	80011f8 <HAL_ADC_Start+0x11c>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <HAL_ADC_Start+0x19c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d105      	bne.n	80011e2 <HAL_ADC_Start+0x106>
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <HAL_ADC_Start+0x194>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00a      	beq.n	80011f8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a25      	ldr	r2, [pc, #148]	; (800127c <HAL_ADC_Start+0x1a0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d136      	bne.n	800125a <HAL_ADC_Start+0x17e>
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_ADC_Start+0x194>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d130      	bne.n	800125a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d129      	bne.n	800125a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	e020      	b.n	800125a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_ADC_Start+0x198>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d11b      	bne.n	800125a <HAL_ADC_Start+0x17e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d114      	bne.n	800125a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	e00b      	b.n	800125a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f043 0210 	orr.w	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f043 0201 	orr.w	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	20000000 	.word	0x20000000
 800126c:	431bde83 	.word	0x431bde83
 8001270:	40012300 	.word	0x40012300
 8001274:	40012000 	.word	0x40012000
 8001278:	40012100 	.word	0x40012100
 800127c:	40012200 	.word	0x40012200

08001280 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129c:	d113      	bne.n	80012c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ac:	d10b      	bne.n	80012c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f043 0220 	orr.w	r2, r3, #32
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e063      	b.n	800138e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012c6:	f7ff feb9 	bl	800103c <HAL_GetTick>
 80012ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012cc:	e021      	b.n	8001312 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d01d      	beq.n	8001312 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_ADC_PollForConversion+0x6c>
 80012dc:	f7ff feae 	bl	800103c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d212      	bcs.n	8001312 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d00b      	beq.n	8001312 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f043 0204 	orr.w	r2, r3, #4
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e03d      	b.n	800138e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d1d6      	bne.n	80012ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f06f 0212 	mvn.w	r2, #18
 8001328:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d123      	bne.n	800138c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11f      	bne.n	800138c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001364:	2b00      	cmp	r3, #0
 8001366:	d111      	bne.n	800138c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e105      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x228>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d925      	bls.n	8001428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	3b1e      	subs	r3, #30
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	2207      	movs	r2, #7
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4403      	add	r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d824      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b05      	subs	r3, #5
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e04c      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b23      	subs	r3, #35	; 0x23
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
 8001510:	e023      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	; 0x41
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_ADC_ConfigChannel+0x234>)
 800155c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_ADC_ConfigChannel+0x238>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d109      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d105      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_ADC_ConfigChannel+0x238>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d123      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d003      	beq.n	8001596 <HAL_ADC_ConfigChannel+0x1e6>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b11      	cmp	r3, #17
 8001594:	d11b      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d111      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_ADC_ConfigChannel+0x23c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_ADC_ConfigChannel+0x240>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	0c9a      	lsrs	r2, r3, #18
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c0:	e002      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40012300 	.word	0x40012300
 80015e8:	40012000 	.word	0x40012000
 80015ec:	20000000 	.word	0x20000000
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015fc:	4b79      	ldr	r3, [pc, #484]	; (80017e4 <ADC_Init+0x1f0>)
 80015fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	431a      	orrs	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	021a      	lsls	r2, r3, #8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800164c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6899      	ldr	r1, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	4a58      	ldr	r2, [pc, #352]	; (80017e8 <ADC_Init+0x1f4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800169a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6899      	ldr	r1, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e00f      	b.n	80016f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0202 	bic.w	r2, r2, #2
 8001700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	005a      	lsls	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01b      	beq.n	8001758 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800173e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6859      	ldr	r1, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	3b01      	subs	r3, #1
 800174c:	035a      	lsls	r2, r3, #13
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e007      	b.n	8001768 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001766:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	3b01      	subs	r3, #1
 8001784:	051a      	lsls	r2, r3, #20
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800179c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017aa:	025a      	lsls	r2, r3, #9
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	029a      	lsls	r2, r3, #10
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40012300 	.word	0x40012300
 80017e8:	0f000001 	.word	0x0f000001

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e16b      	b.n	8001d04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 815a 	bne.w	8001cfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d017      	beq.n	8001b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d123      	bne.n	8001b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80b4 	beq.w	8001cfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b60      	ldr	r3, [pc, #384]	; (8001d1c <HAL_GPIO_Init+0x30c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a5f      	ldr	r2, [pc, #380]	; (8001d1c <HAL_GPIO_Init+0x30c>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b5d      	ldr	r3, [pc, #372]	; (8001d1c <HAL_GPIO_Init+0x30c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb2:	4a5b      	ldr	r2, [pc, #364]	; (8001d20 <HAL_GPIO_Init+0x310>)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x314>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d02b      	beq.n	8001c36 <HAL_GPIO_Init+0x226>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a51      	ldr	r2, [pc, #324]	; (8001d28 <HAL_GPIO_Init+0x318>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d025      	beq.n	8001c32 <HAL_GPIO_Init+0x222>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <HAL_GPIO_Init+0x31c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01f      	beq.n	8001c2e <HAL_GPIO_Init+0x21e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <HAL_GPIO_Init+0x320>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x21a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <HAL_GPIO_Init+0x324>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x216>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_GPIO_Init+0x328>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x212>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_GPIO_Init+0x32c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4b      	ldr	r2, [pc, #300]	; (8001d40 <HAL_GPIO_Init+0x330>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x20a>
 8001c16:	2307      	movs	r3, #7
 8001c18:	e00e      	b.n	8001c38 <HAL_GPIO_Init+0x228>
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	e00c      	b.n	8001c38 <HAL_GPIO_Init+0x228>
 8001c1e:	2306      	movs	r3, #6
 8001c20:	e00a      	b.n	8001c38 <HAL_GPIO_Init+0x228>
 8001c22:	2305      	movs	r3, #5
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x228>
 8001c26:	2304      	movs	r3, #4
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x228>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x228>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x228>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x228>
 8001c36:	2300      	movs	r3, #0
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f002 0203 	and.w	r2, r2, #3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c48:	4935      	ldr	r1, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x310>)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7a:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c80:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3301      	adds	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	f67f ae90 	bls.w	8001a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40021400 	.word	0x40021400
 8001d3c:	40021800 	.word	0x40021800
 8001d40:	40021c00 	.word	0x40021c00
 8001d44:	40013c00 	.word	0x40013c00

08001d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dbc:	887a      	ldrh	r2, [r7, #2]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	041a      	lsls	r2, r3, #16
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	400b      	ands	r3, r1
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f806 	bl	8001e10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e267      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d075      	beq.n	8001f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d00c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e52:	4b85      	ldr	r3, [pc, #532]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d112      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5e:	4b82      	ldr	r3, [pc, #520]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d05b      	beq.n	8001f30 <HAL_RCC_OscConfig+0x108>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d157      	bne.n	8001f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e242      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8c:	d106      	bne.n	8001e9c <HAL_RCC_OscConfig+0x74>
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a75      	ldr	r2, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x98>
 8001ea6:	4b70      	ldr	r3, [pc, #448]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6f      	ldr	r2, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6c      	ldr	r2, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001ec0:	4b69      	ldr	r3, [pc, #420]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a68      	ldr	r2, [pc, #416]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f8ac 	bl	800103c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f8a8 	bl	800103c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e207      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xc0>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff f898 	bl	800103c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff f894 	bl	800103c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1f3      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	4b51      	ldr	r3, [pc, #324]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0xe8>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d063      	beq.n	8002006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b44      	ldr	r3, [pc, #272]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x152>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e1c7      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4937      	ldr	r1, [pc, #220]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	e03a      	b.n	8002006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f84d 	bl	800103c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f849 	bl	800103c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1a8      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4925      	ldr	r1, [pc, #148]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f82c 	bl	800103c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f828 	bl	800103c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e187      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d036      	beq.n	8002080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_RCC_OscConfig+0x248>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff f80c 	bl	800103c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff f808 	bl	800103c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e167      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x200>
 8002046:	e01b      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_OscConfig+0x248>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204e:	f7fe fff5 	bl	800103c <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	e00e      	b.n	8002074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7fe fff1 	bl	800103c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d907      	bls.n	8002074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e150      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
 8002068:	40023800 	.word	0x40023800
 800206c:	42470000 	.word	0x42470000
 8002070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ea      	bne.n	8002056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8097 	beq.w	80021bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b81      	ldr	r3, [pc, #516]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b7d      	ldr	r3, [pc, #500]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a7c      	ldr	r2, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b77      	ldr	r3, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x474>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b74      	ldr	r3, [pc, #464]	; (800229c <HAL_RCC_OscConfig+0x474>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a73      	ldr	r2, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x474>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe ffb1 	bl	800103c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7fe ffad 	bl	800103c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e10c      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x474>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x2ea>
 8002104:	4b64      	ldr	r3, [pc, #400]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a63      	ldr	r2, [pc, #396]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x324>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x30c>
 800211a:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a5e      	ldr	r2, [pc, #376]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a5b      	ldr	r2, [pc, #364]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0x324>
 8002134:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a57      	ldr	r2, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
 8002140:	4b55      	ldr	r3, [pc, #340]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a54      	ldr	r2, [pc, #336]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002146:	f023 0304 	bic.w	r3, r3, #4
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d015      	beq.n	8002180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe ff72 	bl	800103c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe ff6e 	bl	800103c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0cb      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ee      	beq.n	800215c <HAL_RCC_OscConfig+0x334>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe ff5c 	bl	800103c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe ff58 	bl	800103c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0b5      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ee      	bne.n	8002188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	4a38      	ldr	r2, [pc, #224]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a1 	beq.w	8002308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d05c      	beq.n	800228c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d141      	bne.n	800225e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_OscConfig+0x478>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff2c 	bl	800103c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe ff28 	bl	800103c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e087      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	3b01      	subs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	491b      	ldr	r1, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x478>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe ff01 	bl	800103c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe fefd 	bl	800103c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e05c      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x416>
 800225c:	e054      	b.n	8002308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x478>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe feea 	bl	800103c <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fee6 	bl	800103c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e045      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x444>
 800228a:	e03d      	b.n	8002308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e038      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000
 80022a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x4ec>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d028      	beq.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d121      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11a      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022dc:	4293      	cmp	r3, r2
 80022de:	d111      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0cc      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d90c      	bls.n	8002354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800238e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d044      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d119      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e067      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4934      	ldr	r1, [pc, #208]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7fe fe18 	bl	800103c <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fe14 	bl	800103c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e04f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20c      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f821 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	490a      	ldr	r1, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	5ccb      	ldrb	r3, [r1, r3]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fd78 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00
 80024d4:	40023800 	.word	0x40023800
 80024d8:	080046e8 	.word	0x080046e8
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e8:	b090      	sub	sp, #64	; 0x40
 80024ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
 80024f0:	2300      	movs	r3, #0
 80024f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f4:	2300      	movs	r3, #0
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d00d      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x40>
 8002508:	2b08      	cmp	r3, #8
 800250a:	f200 80a1 	bhi.w	8002650 <HAL_RCC_GetSysClockFreq+0x16c>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x34>
 8002512:	2b04      	cmp	r3, #4
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x3a>
 8002516:	e09b      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_GetSysClockFreq+0x184>)
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800251c:	e09b      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800251e:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002522:	e098      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002524:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252e:	4b4d      	ldr	r3, [pc, #308]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d028      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	2200      	movs	r2, #0
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	627a      	str	r2, [r7, #36]	; 0x24
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800254c:	2100      	movs	r1, #0
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 8002550:	fb03 f201 	mul.w	r2, r3, r1
 8002554:	2300      	movs	r3, #0
 8002556:	fb00 f303 	mul.w	r3, r0, r3
 800255a:	4413      	add	r3, r2
 800255c:	4a43      	ldr	r2, [pc, #268]	; (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 800255e:	fba0 1202 	umull	r1, r2, r0, r2
 8002562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002564:	460a      	mov	r2, r1
 8002566:	62ba      	str	r2, [r7, #40]	; 0x28
 8002568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800256a:	4413      	add	r3, r2
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002570:	2200      	movs	r2, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	61fa      	str	r2, [r7, #28]
 8002576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800257e:	f7fd fe77 	bl	8000270 <__aeabi_uldivmod>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4613      	mov	r3, r2
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258a:	e053      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	2200      	movs	r2, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	617a      	str	r2, [r7, #20]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800259e:	f04f 0b00 	mov.w	fp, #0
 80025a2:	4652      	mov	r2, sl
 80025a4:	465b      	mov	r3, fp
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b4:	0150      	lsls	r0, r2, #5
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ebb2 080a 	subs.w	r8, r2, sl
 80025be:	eb63 090b 	sbc.w	r9, r3, fp
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025d6:	ebb2 0408 	subs.w	r4, r2, r8
 80025da:	eb63 0509 	sbc.w	r5, r3, r9
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	00eb      	lsls	r3, r5, #3
 80025e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ec:	00e2      	lsls	r2, r4, #3
 80025ee:	4614      	mov	r4, r2
 80025f0:	461d      	mov	r5, r3
 80025f2:	eb14 030a 	adds.w	r3, r4, sl
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	eb45 030b 	adc.w	r3, r5, fp
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800260a:	4629      	mov	r1, r5
 800260c:	028b      	lsls	r3, r1, #10
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002614:	4621      	mov	r1, r4
 8002616:	028a      	lsls	r2, r1, #10
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	2200      	movs	r2, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002628:	f7fd fe22 	bl	8000270 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4613      	mov	r3, r2
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	3301      	adds	r3, #1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800264e:	e002      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetSysClockFreq+0x184>)
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002658:	4618      	mov	r0, r3
 800265a:	3740      	adds	r7, #64	; 0x40
 800265c:	46bd      	mov	sp, r7
 800265e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	00f42400 	.word	0x00f42400
 800266c:	017d7840 	.word	0x017d7840

08002670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_RCC_GetHCLKFreq+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000000 	.word	0x20000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800268c:	f7ff fff0 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0a9b      	lsrs	r3, r3, #10
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	080046f8 	.word	0x080046f8

080026b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026b4:	f7ff ffdc 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	0b5b      	lsrs	r3, r3, #13
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4903      	ldr	r1, [pc, #12]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	080046f8 	.word	0x080046f8

080026d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e041      	b.n	800276e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fa68 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3304      	adds	r3, #4
 8002714:	4619      	mov	r1, r3
 8002716:	4610      	mov	r0, r2
 8002718:	f000 f9d8 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d001      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e04e      	b.n	800282e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_TIM_Base_Start_IT+0xc4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d01d      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <HAL_TIM_Base_Start_IT+0xc8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <HAL_TIM_Base_Start_IT+0xcc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_TIM_Base_Start_IT+0xd0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_TIM_Base_Start_IT+0xd4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a19      	ldr	r2, [pc, #100]	; (8002850 <HAL_TIM_Base_Start_IT+0xd8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_TIM_Base_Start_IT+0xdc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d111      	bne.n	800281c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b06      	cmp	r3, #6
 8002808:	d010      	beq.n	800282c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281a:	e007      	b.n	800282c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40010000 	.word	0x40010000
 8002840:	40000400 	.word	0x40000400
 8002844:	40000800 	.word	0x40000800
 8002848:	40000c00 	.word	0x40000c00
 800284c:	40010400 	.word	0x40010400
 8002850:	40014000 	.word	0x40014000
 8002854:	40001800 	.word	0x40001800

08002858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0202 	mvn.w	r2, #2
 8002884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8f8 	bl	8002a90 <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8ea 	bl	8002a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8fb 	bl	8002aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d122      	bne.n	8002908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0204 	mvn.w	r2, #4
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f8ce 	bl	8002a90 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f8c0 	bl	8002a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8d1 	bl	8002aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b08      	cmp	r3, #8
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b08      	cmp	r3, #8
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0208 	mvn.w	r2, #8
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f8a4 	bl	8002a90 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f896 	bl	8002a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8a7 	bl	8002aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b10      	cmp	r3, #16
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b10      	cmp	r3, #16
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0210 	mvn.w	r2, #16
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2208      	movs	r2, #8
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f87a 	bl	8002a90 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f86c 	bl	8002a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f87d 	bl	8002aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0201 	mvn.w	r2, #1
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f846 	bl	8002a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b80      	cmp	r3, #128	; 0x80
 80029e8:	d10e      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d107      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f988 	bl	8002d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d10e      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d107      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f842 	bl	8002ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0220 	mvn.w	r2, #32
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f952 	bl	8002d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a40      	ldr	r2, [pc, #256]	; (8002be0 <TIM_Base_SetConfig+0x114>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d00f      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a3d      	ldr	r2, [pc, #244]	; (8002be4 <TIM_Base_SetConfig+0x118>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <TIM_Base_SetConfig+0x11c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3b      	ldr	r2, [pc, #236]	; (8002bec <TIM_Base_SetConfig+0x120>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0x40>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3a      	ldr	r2, [pc, #232]	; (8002bf0 <TIM_Base_SetConfig+0x124>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <TIM_Base_SetConfig+0x114>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02b      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d027      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2c      	ldr	r2, [pc, #176]	; (8002be4 <TIM_Base_SetConfig+0x118>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d023      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2b      	ldr	r2, [pc, #172]	; (8002be8 <TIM_Base_SetConfig+0x11c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01f      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <TIM_Base_SetConfig+0x120>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01b      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <TIM_Base_SetConfig+0x124>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d017      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <TIM_Base_SetConfig+0x128>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <TIM_Base_SetConfig+0x12c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <TIM_Base_SetConfig+0x130>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <TIM_Base_SetConfig+0x134>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <TIM_Base_SetConfig+0x138>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0xb2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a23      	ldr	r2, [pc, #140]	; (8002c08 <TIM_Base_SetConfig+0x13c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <TIM_Base_SetConfig+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0xf8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <TIM_Base_SetConfig+0x124>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d103      	bne.n	8002bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	615a      	str	r2, [r3, #20]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40010400 	.word	0x40010400
 8002bf4:	40014000 	.word	0x40014000
 8002bf8:	40014400 	.word	0x40014400
 8002bfc:	40014800 	.word	0x40014800
 8002c00:	40001800 	.word	0x40001800
 8002c04:	40001c00 	.word	0x40001c00
 8002c08:	40002000 	.word	0x40002000

08002c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e05a      	b.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d01d      	beq.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d018      	beq.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00e      	beq.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10c      	bne.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40000800 	.word	0x40000800
 8002cf4:	40000c00 	.word	0x40000c00
 8002cf8:	40010400 	.word	0x40010400
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40001800 	.word	0x40001800

08002d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e03f      	b.n	8002dbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd ff66 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f9cb 	bl	800310c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695a      	ldr	r2, [r3, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b08a      	sub	sp, #40	; 0x28
 8002dca:	af02      	add	r7, sp, #8
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d17c      	bne.n	8002ee0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_UART_Transmit+0x2c>
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e075      	b.n	8002ee2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_UART_Transmit+0x3e>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e06e      	b.n	8002ee2 <HAL_UART_Transmit+0x11c>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2221      	movs	r2, #33	; 0x21
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e1a:	f7fe f90f 	bl	800103c <HAL_GetTick>
 8002e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	88fa      	ldrh	r2, [r7, #6]
 8002e24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e34:	d108      	bne.n	8002e48 <HAL_UART_Transmit+0x82>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	e003      	b.n	8002e50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e58:	e02a      	b.n	8002eb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f8e2 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e036      	b.n	8002ee2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10b      	bne.n	8002e92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	e007      	b.n	8002ea2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1cf      	bne.n	8002e5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f8b2 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e006      	b.n	8002ee2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b08a      	sub	sp, #40	; 0x28
 8002eee:	af02      	add	r7, sp, #8
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	f040 808c 	bne.w	8003024 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_UART_Receive+0x2e>
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e084      	b.n	8003026 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Receive+0x40>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e07d      	b.n	8003026 <HAL_UART_Receive+0x13c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2222      	movs	r2, #34	; 0x22
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f46:	f7fe f879 	bl	800103c <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d108      	bne.n	8002f74 <HAL_UART_Receive+0x8a>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d104      	bne.n	8002f74 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e003      	b.n	8002f7c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f84:	e043      	b.n	800300e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2120      	movs	r1, #32
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f84c 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e042      	b.n	8003026 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	3302      	adds	r3, #2
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	e01f      	b.n	8003000 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc8:	d007      	beq.n	8002fda <HAL_UART_Receive+0xf0>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_UART_Receive+0xfe>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e008      	b.n	8002ffa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1b6      	bne.n	8002f86 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b090      	sub	sp, #64	; 0x40
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303e:	e050      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d04c      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x30>
 800304e:	f7fd fff5 	bl	800103c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800305a:	429a      	cmp	r2, r3
 800305c:	d241      	bcs.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	330c      	adds	r3, #12
 800307c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800307e:	637a      	str	r2, [r7, #52]	; 0x34
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e5      	bne.n	800305e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3314      	adds	r3, #20
 8003098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	613b      	str	r3, [r7, #16]
   return(result);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b2:	623a      	str	r2, [r7, #32]
 80030b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	69f9      	ldr	r1, [r7, #28]
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	61bb      	str	r3, [r7, #24]
   return(result);
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e5      	bne.n	8003092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e00f      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d09f      	beq.n	8003040 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3740      	adds	r7, #64	; 0x40
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b0c0      	sub	sp, #256	; 0x100
 8003112:	af00      	add	r7, sp, #0
 8003114:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	68d9      	ldr	r1, [r3, #12]
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	ea40 0301 	orr.w	r3, r0, r1
 8003134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	431a      	orrs	r2, r3
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	431a      	orrs	r2, r3
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003164:	f021 010c 	bic.w	r1, r1, #12
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003172:	430b      	orrs	r3, r1
 8003174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003186:	6999      	ldr	r1, [r3, #24]
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	ea40 0301 	orr.w	r3, r0, r1
 8003192:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b8f      	ldr	r3, [pc, #572]	; (80033d8 <UART_SetConfig+0x2cc>)
 800319c:	429a      	cmp	r2, r3
 800319e:	d005      	beq.n	80031ac <UART_SetConfig+0xa0>
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b8d      	ldr	r3, [pc, #564]	; (80033dc <UART_SetConfig+0x2d0>)
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d104      	bne.n	80031b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031ac:	f7ff fa80 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 80031b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031b4:	e003      	b.n	80031be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031b6:	f7ff fa67 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 80031ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c8:	f040 810c 	bne.w	80033e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d0:	2200      	movs	r2, #0
 80031d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031de:	4622      	mov	r2, r4
 80031e0:	462b      	mov	r3, r5
 80031e2:	1891      	adds	r1, r2, r2
 80031e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80031e6:	415b      	adcs	r3, r3
 80031e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ee:	4621      	mov	r1, r4
 80031f0:	eb12 0801 	adds.w	r8, r2, r1
 80031f4:	4629      	mov	r1, r5
 80031f6:	eb43 0901 	adc.w	r9, r3, r1
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800320a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800320e:	4690      	mov	r8, r2
 8003210:	4699      	mov	r9, r3
 8003212:	4623      	mov	r3, r4
 8003214:	eb18 0303 	adds.w	r3, r8, r3
 8003218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800321c:	462b      	mov	r3, r5
 800321e:	eb49 0303 	adc.w	r3, r9, r3
 8003222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003232:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003236:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800323a:	460b      	mov	r3, r1
 800323c:	18db      	adds	r3, r3, r3
 800323e:	653b      	str	r3, [r7, #80]	; 0x50
 8003240:	4613      	mov	r3, r2
 8003242:	eb42 0303 	adc.w	r3, r2, r3
 8003246:	657b      	str	r3, [r7, #84]	; 0x54
 8003248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800324c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003250:	f7fd f80e 	bl	8000270 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <UART_SetConfig+0x2d4>)
 800325a:	fba3 2302 	umull	r2, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	011c      	lsls	r4, r3, #4
 8003262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003266:	2200      	movs	r2, #0
 8003268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800326c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003270:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003274:	4642      	mov	r2, r8
 8003276:	464b      	mov	r3, r9
 8003278:	1891      	adds	r1, r2, r2
 800327a:	64b9      	str	r1, [r7, #72]	; 0x48
 800327c:	415b      	adcs	r3, r3
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003280:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003284:	4641      	mov	r1, r8
 8003286:	eb12 0a01 	adds.w	sl, r2, r1
 800328a:	4649      	mov	r1, r9
 800328c:	eb43 0b01 	adc.w	fp, r3, r1
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800329c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a4:	4692      	mov	sl, r2
 80032a6:	469b      	mov	fp, r3
 80032a8:	4643      	mov	r3, r8
 80032aa:	eb1a 0303 	adds.w	r3, sl, r3
 80032ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032b2:	464b      	mov	r3, r9
 80032b4:	eb4b 0303 	adc.w	r3, fp, r3
 80032b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032d0:	460b      	mov	r3, r1
 80032d2:	18db      	adds	r3, r3, r3
 80032d4:	643b      	str	r3, [r7, #64]	; 0x40
 80032d6:	4613      	mov	r3, r2
 80032d8:	eb42 0303 	adc.w	r3, r2, r3
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
 80032de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032e6:	f7fc ffc3 	bl	8000270 <__aeabi_uldivmod>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <UART_SetConfig+0x2d4>)
 80032f2:	fba3 2301 	umull	r2, r3, r3, r1
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2264      	movs	r2, #100	; 0x64
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	1acb      	subs	r3, r1, r3
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <UART_SetConfig+0x2d4>)
 8003308:	fba3 2302 	umull	r2, r3, r3, r2
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003314:	441c      	add	r4, r3
 8003316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003320:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003324:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003328:	4642      	mov	r2, r8
 800332a:	464b      	mov	r3, r9
 800332c:	1891      	adds	r1, r2, r2
 800332e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003330:	415b      	adcs	r3, r3
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003338:	4641      	mov	r1, r8
 800333a:	1851      	adds	r1, r2, r1
 800333c:	6339      	str	r1, [r7, #48]	; 0x30
 800333e:	4649      	mov	r1, r9
 8003340:	414b      	adcs	r3, r1
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003350:	4659      	mov	r1, fp
 8003352:	00cb      	lsls	r3, r1, #3
 8003354:	4651      	mov	r1, sl
 8003356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800335a:	4651      	mov	r1, sl
 800335c:	00ca      	lsls	r2, r1, #3
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	4603      	mov	r3, r0
 8003364:	4642      	mov	r2, r8
 8003366:	189b      	adds	r3, r3, r2
 8003368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800336c:	464b      	mov	r3, r9
 800336e:	460a      	mov	r2, r1
 8003370:	eb42 0303 	adc.w	r3, r2, r3
 8003374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003384:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800338c:	460b      	mov	r3, r1
 800338e:	18db      	adds	r3, r3, r3
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
 8003392:	4613      	mov	r3, r2
 8003394:	eb42 0303 	adc.w	r3, r2, r3
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800339e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033a2:	f7fc ff65 	bl	8000270 <__aeabi_uldivmod>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <UART_SetConfig+0x2d4>)
 80033ac:	fba3 1302 	umull	r1, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	2164      	movs	r1, #100	; 0x64
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	3332      	adds	r3, #50	; 0x32
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <UART_SetConfig+0x2d4>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	f003 0207 	and.w	r2, r3, #7
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4422      	add	r2, r4
 80033d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033d4:	e105      	b.n	80035e2 <UART_SetConfig+0x4d6>
 80033d6:	bf00      	nop
 80033d8:	40011000 	.word	0x40011000
 80033dc:	40011400 	.word	0x40011400
 80033e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033f6:	4642      	mov	r2, r8
 80033f8:	464b      	mov	r3, r9
 80033fa:	1891      	adds	r1, r2, r2
 80033fc:	6239      	str	r1, [r7, #32]
 80033fe:	415b      	adcs	r3, r3
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003406:	4641      	mov	r1, r8
 8003408:	1854      	adds	r4, r2, r1
 800340a:	4649      	mov	r1, r9
 800340c:	eb43 0501 	adc.w	r5, r3, r1
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	00eb      	lsls	r3, r5, #3
 800341a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800341e:	00e2      	lsls	r2, r4, #3
 8003420:	4614      	mov	r4, r2
 8003422:	461d      	mov	r5, r3
 8003424:	4643      	mov	r3, r8
 8003426:	18e3      	adds	r3, r4, r3
 8003428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800342c:	464b      	mov	r3, r9
 800342e:	eb45 0303 	adc.w	r3, r5, r3
 8003432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003452:	4629      	mov	r1, r5
 8003454:	008b      	lsls	r3, r1, #2
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800345c:	4621      	mov	r1, r4
 800345e:	008a      	lsls	r2, r1, #2
 8003460:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003464:	f7fc ff04 	bl	8000270 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4b60      	ldr	r3, [pc, #384]	; (80035f0 <UART_SetConfig+0x4e4>)
 800346e:	fba3 2302 	umull	r2, r3, r3, r2
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	011c      	lsls	r4, r3, #4
 8003476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003484:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	1891      	adds	r1, r2, r2
 800348e:	61b9      	str	r1, [r7, #24]
 8003490:	415b      	adcs	r3, r3
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003498:	4641      	mov	r1, r8
 800349a:	1851      	adds	r1, r2, r1
 800349c:	6139      	str	r1, [r7, #16]
 800349e:	4649      	mov	r1, r9
 80034a0:	414b      	adcs	r3, r1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b0:	4659      	mov	r1, fp
 80034b2:	00cb      	lsls	r3, r1, #3
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ba:	4651      	mov	r1, sl
 80034bc:	00ca      	lsls	r2, r1, #3
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	4642      	mov	r2, r8
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034cc:	464b      	mov	r3, r9
 80034ce:	460a      	mov	r2, r1
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034f0:	4649      	mov	r1, r9
 80034f2:	008b      	lsls	r3, r1, #2
 80034f4:	4641      	mov	r1, r8
 80034f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034fa:	4641      	mov	r1, r8
 80034fc:	008a      	lsls	r2, r1, #2
 80034fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003502:	f7fc feb5 	bl	8000270 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <UART_SetConfig+0x4e4>)
 800350c:	fba3 1302 	umull	r1, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2164      	movs	r1, #100	; 0x64
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	3332      	adds	r3, #50	; 0x32
 800351e:	4a34      	ldr	r2, [pc, #208]	; (80035f0 <UART_SetConfig+0x4e4>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352a:	441c      	add	r4, r3
 800352c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003530:	2200      	movs	r2, #0
 8003532:	673b      	str	r3, [r7, #112]	; 0x70
 8003534:	677a      	str	r2, [r7, #116]	; 0x74
 8003536:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800353a:	4642      	mov	r2, r8
 800353c:	464b      	mov	r3, r9
 800353e:	1891      	adds	r1, r2, r2
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	415b      	adcs	r3, r3
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800354a:	4641      	mov	r1, r8
 800354c:	1851      	adds	r1, r2, r1
 800354e:	6039      	str	r1, [r7, #0]
 8003550:	4649      	mov	r1, r9
 8003552:	414b      	adcs	r3, r1
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003562:	4659      	mov	r1, fp
 8003564:	00cb      	lsls	r3, r1, #3
 8003566:	4651      	mov	r1, sl
 8003568:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356c:	4651      	mov	r1, sl
 800356e:	00ca      	lsls	r2, r1, #3
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	4603      	mov	r3, r0
 8003576:	4642      	mov	r2, r8
 8003578:	189b      	adds	r3, r3, r2
 800357a:	66bb      	str	r3, [r7, #104]	; 0x68
 800357c:	464b      	mov	r3, r9
 800357e:	460a      	mov	r2, r1
 8003580:	eb42 0303 	adc.w	r3, r2, r3
 8003584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	663b      	str	r3, [r7, #96]	; 0x60
 8003590:	667a      	str	r2, [r7, #100]	; 0x64
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800359e:	4649      	mov	r1, r9
 80035a0:	008b      	lsls	r3, r1, #2
 80035a2:	4641      	mov	r1, r8
 80035a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a8:	4641      	mov	r1, r8
 80035aa:	008a      	lsls	r2, r1, #2
 80035ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035b0:	f7fc fe5e 	bl	8000270 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <UART_SetConfig+0x4e4>)
 80035ba:	fba3 1302 	umull	r1, r3, r3, r2
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2164      	movs	r1, #100	; 0x64
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	3332      	adds	r3, #50	; 0x32
 80035cc:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <UART_SetConfig+0x4e4>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4422      	add	r2, r4
 80035e0:	609a      	str	r2, [r3, #8]
}
 80035e2:	bf00      	nop
 80035e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035e8:	46bd      	mov	sp, r7
 80035ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ee:	bf00      	nop
 80035f0:	51eb851f 	.word	0x51eb851f

080035f4 <__errno>:
 80035f4:	4b01      	ldr	r3, [pc, #4]	; (80035fc <__errno+0x8>)
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	2000000c 	.word	0x2000000c

08003600 <__libc_init_array>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	4d0d      	ldr	r5, [pc, #52]	; (8003638 <__libc_init_array+0x38>)
 8003604:	4c0d      	ldr	r4, [pc, #52]	; (800363c <__libc_init_array+0x3c>)
 8003606:	1b64      	subs	r4, r4, r5
 8003608:	10a4      	asrs	r4, r4, #2
 800360a:	2600      	movs	r6, #0
 800360c:	42a6      	cmp	r6, r4
 800360e:	d109      	bne.n	8003624 <__libc_init_array+0x24>
 8003610:	4d0b      	ldr	r5, [pc, #44]	; (8003640 <__libc_init_array+0x40>)
 8003612:	4c0c      	ldr	r4, [pc, #48]	; (8003644 <__libc_init_array+0x44>)
 8003614:	f001 f824 	bl	8004660 <_init>
 8003618:	1b64      	subs	r4, r4, r5
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	2600      	movs	r6, #0
 800361e:	42a6      	cmp	r6, r4
 8003620:	d105      	bne.n	800362e <__libc_init_array+0x2e>
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	f855 3b04 	ldr.w	r3, [r5], #4
 8003628:	4798      	blx	r3
 800362a:	3601      	adds	r6, #1
 800362c:	e7ee      	b.n	800360c <__libc_init_array+0xc>
 800362e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003632:	4798      	blx	r3
 8003634:	3601      	adds	r6, #1
 8003636:	e7f2      	b.n	800361e <__libc_init_array+0x1e>
 8003638:	080047a0 	.word	0x080047a0
 800363c:	080047a0 	.word	0x080047a0
 8003640:	080047a0 	.word	0x080047a0
 8003644:	080047a4 	.word	0x080047a4

08003648 <memset>:
 8003648:	4402      	add	r2, r0
 800364a:	4603      	mov	r3, r0
 800364c:	4293      	cmp	r3, r2
 800364e:	d100      	bne.n	8003652 <memset+0xa>
 8003650:	4770      	bx	lr
 8003652:	f803 1b01 	strb.w	r1, [r3], #1
 8003656:	e7f9      	b.n	800364c <memset+0x4>

08003658 <iprintf>:
 8003658:	b40f      	push	{r0, r1, r2, r3}
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <iprintf+0x2c>)
 800365c:	b513      	push	{r0, r1, r4, lr}
 800365e:	681c      	ldr	r4, [r3, #0]
 8003660:	b124      	cbz	r4, 800366c <iprintf+0x14>
 8003662:	69a3      	ldr	r3, [r4, #24]
 8003664:	b913      	cbnz	r3, 800366c <iprintf+0x14>
 8003666:	4620      	mov	r0, r4
 8003668:	f000 fa5e 	bl	8003b28 <__sinit>
 800366c:	ab05      	add	r3, sp, #20
 800366e:	9a04      	ldr	r2, [sp, #16]
 8003670:	68a1      	ldr	r1, [r4, #8]
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	4620      	mov	r0, r4
 8003676:	f000 fc67 	bl	8003f48 <_vfiprintf_r>
 800367a:	b002      	add	sp, #8
 800367c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003680:	b004      	add	sp, #16
 8003682:	4770      	bx	lr
 8003684:	2000000c 	.word	0x2000000c

08003688 <_puts_r>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	460e      	mov	r6, r1
 800368c:	4605      	mov	r5, r0
 800368e:	b118      	cbz	r0, 8003698 <_puts_r+0x10>
 8003690:	6983      	ldr	r3, [r0, #24]
 8003692:	b90b      	cbnz	r3, 8003698 <_puts_r+0x10>
 8003694:	f000 fa48 	bl	8003b28 <__sinit>
 8003698:	69ab      	ldr	r3, [r5, #24]
 800369a:	68ac      	ldr	r4, [r5, #8]
 800369c:	b913      	cbnz	r3, 80036a4 <_puts_r+0x1c>
 800369e:	4628      	mov	r0, r5
 80036a0:	f000 fa42 	bl	8003b28 <__sinit>
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <_puts_r+0xd0>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	d120      	bne.n	80036ec <_puts_r+0x64>
 80036aa:	686c      	ldr	r4, [r5, #4]
 80036ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036ae:	07db      	lsls	r3, r3, #31
 80036b0:	d405      	bmi.n	80036be <_puts_r+0x36>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	0598      	lsls	r0, r3, #22
 80036b6:	d402      	bmi.n	80036be <_puts_r+0x36>
 80036b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ba:	f000 fad3 	bl	8003c64 <__retarget_lock_acquire_recursive>
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	0719      	lsls	r1, r3, #28
 80036c2:	d51d      	bpl.n	8003700 <_puts_r+0x78>
 80036c4:	6923      	ldr	r3, [r4, #16]
 80036c6:	b1db      	cbz	r3, 8003700 <_puts_r+0x78>
 80036c8:	3e01      	subs	r6, #1
 80036ca:	68a3      	ldr	r3, [r4, #8]
 80036cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036d0:	3b01      	subs	r3, #1
 80036d2:	60a3      	str	r3, [r4, #8]
 80036d4:	bb39      	cbnz	r1, 8003726 <_puts_r+0x9e>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da38      	bge.n	800374c <_puts_r+0xc4>
 80036da:	4622      	mov	r2, r4
 80036dc:	210a      	movs	r1, #10
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 f848 	bl	8003774 <__swbuf_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	d011      	beq.n	800370c <_puts_r+0x84>
 80036e8:	250a      	movs	r5, #10
 80036ea:	e011      	b.n	8003710 <_puts_r+0x88>
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <_puts_r+0xd4>)
 80036ee:	429c      	cmp	r4, r3
 80036f0:	d101      	bne.n	80036f6 <_puts_r+0x6e>
 80036f2:	68ac      	ldr	r4, [r5, #8]
 80036f4:	e7da      	b.n	80036ac <_puts_r+0x24>
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <_puts_r+0xd8>)
 80036f8:	429c      	cmp	r4, r3
 80036fa:	bf08      	it	eq
 80036fc:	68ec      	ldreq	r4, [r5, #12]
 80036fe:	e7d5      	b.n	80036ac <_puts_r+0x24>
 8003700:	4621      	mov	r1, r4
 8003702:	4628      	mov	r0, r5
 8003704:	f000 f888 	bl	8003818 <__swsetup_r>
 8003708:	2800      	cmp	r0, #0
 800370a:	d0dd      	beq.n	80036c8 <_puts_r+0x40>
 800370c:	f04f 35ff 	mov.w	r5, #4294967295
 8003710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003712:	07da      	lsls	r2, r3, #31
 8003714:	d405      	bmi.n	8003722 <_puts_r+0x9a>
 8003716:	89a3      	ldrh	r3, [r4, #12]
 8003718:	059b      	lsls	r3, r3, #22
 800371a:	d402      	bmi.n	8003722 <_puts_r+0x9a>
 800371c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800371e:	f000 faa2 	bl	8003c66 <__retarget_lock_release_recursive>
 8003722:	4628      	mov	r0, r5
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	2b00      	cmp	r3, #0
 8003728:	da04      	bge.n	8003734 <_puts_r+0xac>
 800372a:	69a2      	ldr	r2, [r4, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	dc06      	bgt.n	800373e <_puts_r+0xb6>
 8003730:	290a      	cmp	r1, #10
 8003732:	d004      	beq.n	800373e <_puts_r+0xb6>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	6022      	str	r2, [r4, #0]
 800373a:	7019      	strb	r1, [r3, #0]
 800373c:	e7c5      	b.n	80036ca <_puts_r+0x42>
 800373e:	4622      	mov	r2, r4
 8003740:	4628      	mov	r0, r5
 8003742:	f000 f817 	bl	8003774 <__swbuf_r>
 8003746:	3001      	adds	r0, #1
 8003748:	d1bf      	bne.n	80036ca <_puts_r+0x42>
 800374a:	e7df      	b.n	800370c <_puts_r+0x84>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	250a      	movs	r5, #10
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	701d      	strb	r5, [r3, #0]
 8003756:	e7db      	b.n	8003710 <_puts_r+0x88>
 8003758:	08004724 	.word	0x08004724
 800375c:	08004744 	.word	0x08004744
 8003760:	08004704 	.word	0x08004704

08003764 <puts>:
 8003764:	4b02      	ldr	r3, [pc, #8]	; (8003770 <puts+0xc>)
 8003766:	4601      	mov	r1, r0
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	f7ff bf8d 	b.w	8003688 <_puts_r>
 800376e:	bf00      	nop
 8003770:	2000000c 	.word	0x2000000c

08003774 <__swbuf_r>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	460e      	mov	r6, r1
 8003778:	4614      	mov	r4, r2
 800377a:	4605      	mov	r5, r0
 800377c:	b118      	cbz	r0, 8003786 <__swbuf_r+0x12>
 800377e:	6983      	ldr	r3, [r0, #24]
 8003780:	b90b      	cbnz	r3, 8003786 <__swbuf_r+0x12>
 8003782:	f000 f9d1 	bl	8003b28 <__sinit>
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <__swbuf_r+0x98>)
 8003788:	429c      	cmp	r4, r3
 800378a:	d12b      	bne.n	80037e4 <__swbuf_r+0x70>
 800378c:	686c      	ldr	r4, [r5, #4]
 800378e:	69a3      	ldr	r3, [r4, #24]
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	89a3      	ldrh	r3, [r4, #12]
 8003794:	071a      	lsls	r2, r3, #28
 8003796:	d52f      	bpl.n	80037f8 <__swbuf_r+0x84>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	b36b      	cbz	r3, 80037f8 <__swbuf_r+0x84>
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	6963      	ldr	r3, [r4, #20]
 80037a4:	b2f6      	uxtb	r6, r6
 80037a6:	4283      	cmp	r3, r0
 80037a8:	4637      	mov	r7, r6
 80037aa:	dc04      	bgt.n	80037b6 <__swbuf_r+0x42>
 80037ac:	4621      	mov	r1, r4
 80037ae:	4628      	mov	r0, r5
 80037b0:	f000 f926 	bl	8003a00 <_fflush_r>
 80037b4:	bb30      	cbnz	r0, 8003804 <__swbuf_r+0x90>
 80037b6:	68a3      	ldr	r3, [r4, #8]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	60a3      	str	r3, [r4, #8]
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	6022      	str	r2, [r4, #0]
 80037c2:	701e      	strb	r6, [r3, #0]
 80037c4:	6963      	ldr	r3, [r4, #20]
 80037c6:	3001      	adds	r0, #1
 80037c8:	4283      	cmp	r3, r0
 80037ca:	d004      	beq.n	80037d6 <__swbuf_r+0x62>
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	07db      	lsls	r3, r3, #31
 80037d0:	d506      	bpl.n	80037e0 <__swbuf_r+0x6c>
 80037d2:	2e0a      	cmp	r6, #10
 80037d4:	d104      	bne.n	80037e0 <__swbuf_r+0x6c>
 80037d6:	4621      	mov	r1, r4
 80037d8:	4628      	mov	r0, r5
 80037da:	f000 f911 	bl	8003a00 <_fflush_r>
 80037de:	b988      	cbnz	r0, 8003804 <__swbuf_r+0x90>
 80037e0:	4638      	mov	r0, r7
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <__swbuf_r+0x9c>)
 80037e6:	429c      	cmp	r4, r3
 80037e8:	d101      	bne.n	80037ee <__swbuf_r+0x7a>
 80037ea:	68ac      	ldr	r4, [r5, #8]
 80037ec:	e7cf      	b.n	800378e <__swbuf_r+0x1a>
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <__swbuf_r+0xa0>)
 80037f0:	429c      	cmp	r4, r3
 80037f2:	bf08      	it	eq
 80037f4:	68ec      	ldreq	r4, [r5, #12]
 80037f6:	e7ca      	b.n	800378e <__swbuf_r+0x1a>
 80037f8:	4621      	mov	r1, r4
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 f80c 	bl	8003818 <__swsetup_r>
 8003800:	2800      	cmp	r0, #0
 8003802:	d0cb      	beq.n	800379c <__swbuf_r+0x28>
 8003804:	f04f 37ff 	mov.w	r7, #4294967295
 8003808:	e7ea      	b.n	80037e0 <__swbuf_r+0x6c>
 800380a:	bf00      	nop
 800380c:	08004724 	.word	0x08004724
 8003810:	08004744 	.word	0x08004744
 8003814:	08004704 	.word	0x08004704

08003818 <__swsetup_r>:
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <__swsetup_r+0xcc>)
 800381a:	b570      	push	{r4, r5, r6, lr}
 800381c:	681d      	ldr	r5, [r3, #0]
 800381e:	4606      	mov	r6, r0
 8003820:	460c      	mov	r4, r1
 8003822:	b125      	cbz	r5, 800382e <__swsetup_r+0x16>
 8003824:	69ab      	ldr	r3, [r5, #24]
 8003826:	b913      	cbnz	r3, 800382e <__swsetup_r+0x16>
 8003828:	4628      	mov	r0, r5
 800382a:	f000 f97d 	bl	8003b28 <__sinit>
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <__swsetup_r+0xd0>)
 8003830:	429c      	cmp	r4, r3
 8003832:	d10f      	bne.n	8003854 <__swsetup_r+0x3c>
 8003834:	686c      	ldr	r4, [r5, #4]
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800383c:	0719      	lsls	r1, r3, #28
 800383e:	d42c      	bmi.n	800389a <__swsetup_r+0x82>
 8003840:	06dd      	lsls	r5, r3, #27
 8003842:	d411      	bmi.n	8003868 <__swsetup_r+0x50>
 8003844:	2309      	movs	r3, #9
 8003846:	6033      	str	r3, [r6, #0]
 8003848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	f04f 30ff 	mov.w	r0, #4294967295
 8003852:	e03e      	b.n	80038d2 <__swsetup_r+0xba>
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <__swsetup_r+0xd4>)
 8003856:	429c      	cmp	r4, r3
 8003858:	d101      	bne.n	800385e <__swsetup_r+0x46>
 800385a:	68ac      	ldr	r4, [r5, #8]
 800385c:	e7eb      	b.n	8003836 <__swsetup_r+0x1e>
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <__swsetup_r+0xd8>)
 8003860:	429c      	cmp	r4, r3
 8003862:	bf08      	it	eq
 8003864:	68ec      	ldreq	r4, [r5, #12]
 8003866:	e7e6      	b.n	8003836 <__swsetup_r+0x1e>
 8003868:	0758      	lsls	r0, r3, #29
 800386a:	d512      	bpl.n	8003892 <__swsetup_r+0x7a>
 800386c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800386e:	b141      	cbz	r1, 8003882 <__swsetup_r+0x6a>
 8003870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003874:	4299      	cmp	r1, r3
 8003876:	d002      	beq.n	800387e <__swsetup_r+0x66>
 8003878:	4630      	mov	r0, r6
 800387a:	f000 fa5b 	bl	8003d34 <_free_r>
 800387e:	2300      	movs	r3, #0
 8003880:	6363      	str	r3, [r4, #52]	; 0x34
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	6923      	ldr	r3, [r4, #16]
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	b94b      	cbnz	r3, 80038b2 <__swsetup_r+0x9a>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d003      	beq.n	80038b2 <__swsetup_r+0x9a>
 80038aa:	4621      	mov	r1, r4
 80038ac:	4630      	mov	r0, r6
 80038ae:	f000 fa01 	bl	8003cb4 <__smakebuf_r>
 80038b2:	89a0      	ldrh	r0, [r4, #12]
 80038b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b8:	f010 0301 	ands.w	r3, r0, #1
 80038bc:	d00a      	beq.n	80038d4 <__swsetup_r+0xbc>
 80038be:	2300      	movs	r3, #0
 80038c0:	60a3      	str	r3, [r4, #8]
 80038c2:	6963      	ldr	r3, [r4, #20]
 80038c4:	425b      	negs	r3, r3
 80038c6:	61a3      	str	r3, [r4, #24]
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	b943      	cbnz	r3, 80038de <__swsetup_r+0xc6>
 80038cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038d0:	d1ba      	bne.n	8003848 <__swsetup_r+0x30>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	0781      	lsls	r1, r0, #30
 80038d6:	bf58      	it	pl
 80038d8:	6963      	ldrpl	r3, [r4, #20]
 80038da:	60a3      	str	r3, [r4, #8]
 80038dc:	e7f4      	b.n	80038c8 <__swsetup_r+0xb0>
 80038de:	2000      	movs	r0, #0
 80038e0:	e7f7      	b.n	80038d2 <__swsetup_r+0xba>
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c
 80038e8:	08004724 	.word	0x08004724
 80038ec:	08004744 	.word	0x08004744
 80038f0:	08004704 	.word	0x08004704

080038f4 <__sflush_r>:
 80038f4:	898a      	ldrh	r2, [r1, #12]
 80038f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038fa:	4605      	mov	r5, r0
 80038fc:	0710      	lsls	r0, r2, #28
 80038fe:	460c      	mov	r4, r1
 8003900:	d458      	bmi.n	80039b4 <__sflush_r+0xc0>
 8003902:	684b      	ldr	r3, [r1, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	dc05      	bgt.n	8003914 <__sflush_r+0x20>
 8003908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	dc02      	bgt.n	8003914 <__sflush_r+0x20>
 800390e:	2000      	movs	r0, #0
 8003910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003916:	2e00      	cmp	r6, #0
 8003918:	d0f9      	beq.n	800390e <__sflush_r+0x1a>
 800391a:	2300      	movs	r3, #0
 800391c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003920:	682f      	ldr	r7, [r5, #0]
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	d032      	beq.n	800398c <__sflush_r+0x98>
 8003926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	075a      	lsls	r2, r3, #29
 800392c:	d505      	bpl.n	800393a <__sflush_r+0x46>
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	1ac0      	subs	r0, r0, r3
 8003932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003934:	b10b      	cbz	r3, 800393a <__sflush_r+0x46>
 8003936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003938:	1ac0      	subs	r0, r0, r3
 800393a:	2300      	movs	r3, #0
 800393c:	4602      	mov	r2, r0
 800393e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003940:	6a21      	ldr	r1, [r4, #32]
 8003942:	4628      	mov	r0, r5
 8003944:	47b0      	blx	r6
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	d106      	bne.n	800395a <__sflush_r+0x66>
 800394c:	6829      	ldr	r1, [r5, #0]
 800394e:	291d      	cmp	r1, #29
 8003950:	d82c      	bhi.n	80039ac <__sflush_r+0xb8>
 8003952:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <__sflush_r+0x108>)
 8003954:	40ca      	lsrs	r2, r1
 8003956:	07d6      	lsls	r6, r2, #31
 8003958:	d528      	bpl.n	80039ac <__sflush_r+0xb8>
 800395a:	2200      	movs	r2, #0
 800395c:	6062      	str	r2, [r4, #4]
 800395e:	04d9      	lsls	r1, r3, #19
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	6022      	str	r2, [r4, #0]
 8003964:	d504      	bpl.n	8003970 <__sflush_r+0x7c>
 8003966:	1c42      	adds	r2, r0, #1
 8003968:	d101      	bne.n	800396e <__sflush_r+0x7a>
 800396a:	682b      	ldr	r3, [r5, #0]
 800396c:	b903      	cbnz	r3, 8003970 <__sflush_r+0x7c>
 800396e:	6560      	str	r0, [r4, #84]	; 0x54
 8003970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003972:	602f      	str	r7, [r5, #0]
 8003974:	2900      	cmp	r1, #0
 8003976:	d0ca      	beq.n	800390e <__sflush_r+0x1a>
 8003978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800397c:	4299      	cmp	r1, r3
 800397e:	d002      	beq.n	8003986 <__sflush_r+0x92>
 8003980:	4628      	mov	r0, r5
 8003982:	f000 f9d7 	bl	8003d34 <_free_r>
 8003986:	2000      	movs	r0, #0
 8003988:	6360      	str	r0, [r4, #52]	; 0x34
 800398a:	e7c1      	b.n	8003910 <__sflush_r+0x1c>
 800398c:	6a21      	ldr	r1, [r4, #32]
 800398e:	2301      	movs	r3, #1
 8003990:	4628      	mov	r0, r5
 8003992:	47b0      	blx	r6
 8003994:	1c41      	adds	r1, r0, #1
 8003996:	d1c7      	bne.n	8003928 <__sflush_r+0x34>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0c4      	beq.n	8003928 <__sflush_r+0x34>
 800399e:	2b1d      	cmp	r3, #29
 80039a0:	d001      	beq.n	80039a6 <__sflush_r+0xb2>
 80039a2:	2b16      	cmp	r3, #22
 80039a4:	d101      	bne.n	80039aa <__sflush_r+0xb6>
 80039a6:	602f      	str	r7, [r5, #0]
 80039a8:	e7b1      	b.n	800390e <__sflush_r+0x1a>
 80039aa:	89a3      	ldrh	r3, [r4, #12]
 80039ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b0:	81a3      	strh	r3, [r4, #12]
 80039b2:	e7ad      	b.n	8003910 <__sflush_r+0x1c>
 80039b4:	690f      	ldr	r7, [r1, #16]
 80039b6:	2f00      	cmp	r7, #0
 80039b8:	d0a9      	beq.n	800390e <__sflush_r+0x1a>
 80039ba:	0793      	lsls	r3, r2, #30
 80039bc:	680e      	ldr	r6, [r1, #0]
 80039be:	bf08      	it	eq
 80039c0:	694b      	ldreq	r3, [r1, #20]
 80039c2:	600f      	str	r7, [r1, #0]
 80039c4:	bf18      	it	ne
 80039c6:	2300      	movne	r3, #0
 80039c8:	eba6 0807 	sub.w	r8, r6, r7
 80039cc:	608b      	str	r3, [r1, #8]
 80039ce:	f1b8 0f00 	cmp.w	r8, #0
 80039d2:	dd9c      	ble.n	800390e <__sflush_r+0x1a>
 80039d4:	6a21      	ldr	r1, [r4, #32]
 80039d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039d8:	4643      	mov	r3, r8
 80039da:	463a      	mov	r2, r7
 80039dc:	4628      	mov	r0, r5
 80039de:	47b0      	blx	r6
 80039e0:	2800      	cmp	r0, #0
 80039e2:	dc06      	bgt.n	80039f2 <__sflush_r+0xfe>
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295
 80039f0:	e78e      	b.n	8003910 <__sflush_r+0x1c>
 80039f2:	4407      	add	r7, r0
 80039f4:	eba8 0800 	sub.w	r8, r8, r0
 80039f8:	e7e9      	b.n	80039ce <__sflush_r+0xda>
 80039fa:	bf00      	nop
 80039fc:	20400001 	.word	0x20400001

08003a00 <_fflush_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	690b      	ldr	r3, [r1, #16]
 8003a04:	4605      	mov	r5, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	b913      	cbnz	r3, 8003a10 <_fflush_r+0x10>
 8003a0a:	2500      	movs	r5, #0
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
 8003a10:	b118      	cbz	r0, 8003a1a <_fflush_r+0x1a>
 8003a12:	6983      	ldr	r3, [r0, #24]
 8003a14:	b90b      	cbnz	r3, 8003a1a <_fflush_r+0x1a>
 8003a16:	f000 f887 	bl	8003b28 <__sinit>
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <_fflush_r+0x6c>)
 8003a1c:	429c      	cmp	r4, r3
 8003a1e:	d11b      	bne.n	8003a58 <_fflush_r+0x58>
 8003a20:	686c      	ldr	r4, [r5, #4]
 8003a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ef      	beq.n	8003a0a <_fflush_r+0xa>
 8003a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a2c:	07d0      	lsls	r0, r2, #31
 8003a2e:	d404      	bmi.n	8003a3a <_fflush_r+0x3a>
 8003a30:	0599      	lsls	r1, r3, #22
 8003a32:	d402      	bmi.n	8003a3a <_fflush_r+0x3a>
 8003a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a36:	f000 f915 	bl	8003c64 <__retarget_lock_acquire_recursive>
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f7ff ff59 	bl	80038f4 <__sflush_r>
 8003a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a44:	07da      	lsls	r2, r3, #31
 8003a46:	4605      	mov	r5, r0
 8003a48:	d4e0      	bmi.n	8003a0c <_fflush_r+0xc>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	059b      	lsls	r3, r3, #22
 8003a4e:	d4dd      	bmi.n	8003a0c <_fflush_r+0xc>
 8003a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a52:	f000 f908 	bl	8003c66 <__retarget_lock_release_recursive>
 8003a56:	e7d9      	b.n	8003a0c <_fflush_r+0xc>
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <_fflush_r+0x70>)
 8003a5a:	429c      	cmp	r4, r3
 8003a5c:	d101      	bne.n	8003a62 <_fflush_r+0x62>
 8003a5e:	68ac      	ldr	r4, [r5, #8]
 8003a60:	e7df      	b.n	8003a22 <_fflush_r+0x22>
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <_fflush_r+0x74>)
 8003a64:	429c      	cmp	r4, r3
 8003a66:	bf08      	it	eq
 8003a68:	68ec      	ldreq	r4, [r5, #12]
 8003a6a:	e7da      	b.n	8003a22 <_fflush_r+0x22>
 8003a6c:	08004724 	.word	0x08004724
 8003a70:	08004744 	.word	0x08004744
 8003a74:	08004704 	.word	0x08004704

08003a78 <std>:
 8003a78:	2300      	movs	r3, #0
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a86:	6083      	str	r3, [r0, #8]
 8003a88:	8181      	strh	r1, [r0, #12]
 8003a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a8c:	81c2      	strh	r2, [r0, #14]
 8003a8e:	6183      	str	r3, [r0, #24]
 8003a90:	4619      	mov	r1, r3
 8003a92:	2208      	movs	r2, #8
 8003a94:	305c      	adds	r0, #92	; 0x5c
 8003a96:	f7ff fdd7 	bl	8003648 <memset>
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <std+0x38>)
 8003a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <std+0x3c>)
 8003aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <std+0x40>)
 8003aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <std+0x44>)
 8003aa8:	6224      	str	r4, [r4, #32]
 8003aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	bf00      	nop
 8003ab0:	080044f1 	.word	0x080044f1
 8003ab4:	08004513 	.word	0x08004513
 8003ab8:	0800454b 	.word	0x0800454b
 8003abc:	0800456f 	.word	0x0800456f

08003ac0 <_cleanup_r>:
 8003ac0:	4901      	ldr	r1, [pc, #4]	; (8003ac8 <_cleanup_r+0x8>)
 8003ac2:	f000 b8af 	b.w	8003c24 <_fwalk_reent>
 8003ac6:	bf00      	nop
 8003ac8:	08003a01 	.word	0x08003a01

08003acc <__sfmoreglue>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	2268      	movs	r2, #104	; 0x68
 8003ad0:	1e4d      	subs	r5, r1, #1
 8003ad2:	4355      	muls	r5, r2
 8003ad4:	460e      	mov	r6, r1
 8003ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ada:	f000 f997 	bl	8003e0c <_malloc_r>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	b140      	cbz	r0, 8003af4 <__sfmoreglue+0x28>
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ae8:	300c      	adds	r0, #12
 8003aea:	60a0      	str	r0, [r4, #8]
 8003aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003af0:	f7ff fdaa 	bl	8003648 <memset>
 8003af4:	4620      	mov	r0, r4
 8003af6:	bd70      	pop	{r4, r5, r6, pc}

08003af8 <__sfp_lock_acquire>:
 8003af8:	4801      	ldr	r0, [pc, #4]	; (8003b00 <__sfp_lock_acquire+0x8>)
 8003afa:	f000 b8b3 	b.w	8003c64 <__retarget_lock_acquire_recursive>
 8003afe:	bf00      	nop
 8003b00:	20000175 	.word	0x20000175

08003b04 <__sfp_lock_release>:
 8003b04:	4801      	ldr	r0, [pc, #4]	; (8003b0c <__sfp_lock_release+0x8>)
 8003b06:	f000 b8ae 	b.w	8003c66 <__retarget_lock_release_recursive>
 8003b0a:	bf00      	nop
 8003b0c:	20000175 	.word	0x20000175

08003b10 <__sinit_lock_acquire>:
 8003b10:	4801      	ldr	r0, [pc, #4]	; (8003b18 <__sinit_lock_acquire+0x8>)
 8003b12:	f000 b8a7 	b.w	8003c64 <__retarget_lock_acquire_recursive>
 8003b16:	bf00      	nop
 8003b18:	20000176 	.word	0x20000176

08003b1c <__sinit_lock_release>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	; (8003b24 <__sinit_lock_release+0x8>)
 8003b1e:	f000 b8a2 	b.w	8003c66 <__retarget_lock_release_recursive>
 8003b22:	bf00      	nop
 8003b24:	20000176 	.word	0x20000176

08003b28 <__sinit>:
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	f7ff fff0 	bl	8003b10 <__sinit_lock_acquire>
 8003b30:	69a3      	ldr	r3, [r4, #24]
 8003b32:	b11b      	cbz	r3, 8003b3c <__sinit+0x14>
 8003b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b38:	f7ff bff0 	b.w	8003b1c <__sinit_lock_release>
 8003b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b40:	6523      	str	r3, [r4, #80]	; 0x50
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <__sinit+0x68>)
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <__sinit+0x6c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b4a:	42a3      	cmp	r3, r4
 8003b4c:	bf04      	itt	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	61a3      	streq	r3, [r4, #24]
 8003b52:	4620      	mov	r0, r4
 8003b54:	f000 f820 	bl	8003b98 <__sfp>
 8003b58:	6060      	str	r0, [r4, #4]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 f81c 	bl	8003b98 <__sfp>
 8003b60:	60a0      	str	r0, [r4, #8]
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 f818 	bl	8003b98 <__sfp>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	60e0      	str	r0, [r4, #12]
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	6860      	ldr	r0, [r4, #4]
 8003b70:	f7ff ff82 	bl	8003a78 <std>
 8003b74:	68a0      	ldr	r0, [r4, #8]
 8003b76:	2201      	movs	r2, #1
 8003b78:	2109      	movs	r1, #9
 8003b7a:	f7ff ff7d 	bl	8003a78 <std>
 8003b7e:	68e0      	ldr	r0, [r4, #12]
 8003b80:	2202      	movs	r2, #2
 8003b82:	2112      	movs	r1, #18
 8003b84:	f7ff ff78 	bl	8003a78 <std>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61a3      	str	r3, [r4, #24]
 8003b8c:	e7d2      	b.n	8003b34 <__sinit+0xc>
 8003b8e:	bf00      	nop
 8003b90:	08004700 	.word	0x08004700
 8003b94:	08003ac1 	.word	0x08003ac1

08003b98 <__sfp>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	4607      	mov	r7, r0
 8003b9c:	f7ff ffac 	bl	8003af8 <__sfp_lock_acquire>
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <__sfp+0x84>)
 8003ba2:	681e      	ldr	r6, [r3, #0]
 8003ba4:	69b3      	ldr	r3, [r6, #24]
 8003ba6:	b913      	cbnz	r3, 8003bae <__sfp+0x16>
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f7ff ffbd 	bl	8003b28 <__sinit>
 8003bae:	3648      	adds	r6, #72	; 0x48
 8003bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	d503      	bpl.n	8003bc0 <__sfp+0x28>
 8003bb8:	6833      	ldr	r3, [r6, #0]
 8003bba:	b30b      	cbz	r3, 8003c00 <__sfp+0x68>
 8003bbc:	6836      	ldr	r6, [r6, #0]
 8003bbe:	e7f7      	b.n	8003bb0 <__sfp+0x18>
 8003bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bc4:	b9d5      	cbnz	r5, 8003bfc <__sfp+0x64>
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <__sfp+0x88>)
 8003bc8:	60e3      	str	r3, [r4, #12]
 8003bca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bce:	6665      	str	r5, [r4, #100]	; 0x64
 8003bd0:	f000 f847 	bl	8003c62 <__retarget_lock_init_recursive>
 8003bd4:	f7ff ff96 	bl	8003b04 <__sfp_lock_release>
 8003bd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003bdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003be0:	6025      	str	r5, [r4, #0]
 8003be2:	61a5      	str	r5, [r4, #24]
 8003be4:	2208      	movs	r2, #8
 8003be6:	4629      	mov	r1, r5
 8003be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bec:	f7ff fd2c 	bl	8003648 <memset>
 8003bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfc:	3468      	adds	r4, #104	; 0x68
 8003bfe:	e7d9      	b.n	8003bb4 <__sfp+0x1c>
 8003c00:	2104      	movs	r1, #4
 8003c02:	4638      	mov	r0, r7
 8003c04:	f7ff ff62 	bl	8003acc <__sfmoreglue>
 8003c08:	4604      	mov	r4, r0
 8003c0a:	6030      	str	r0, [r6, #0]
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d1d5      	bne.n	8003bbc <__sfp+0x24>
 8003c10:	f7ff ff78 	bl	8003b04 <__sfp_lock_release>
 8003c14:	230c      	movs	r3, #12
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	e7ee      	b.n	8003bf8 <__sfp+0x60>
 8003c1a:	bf00      	nop
 8003c1c:	08004700 	.word	0x08004700
 8003c20:	ffff0001 	.word	0xffff0001

08003c24 <_fwalk_reent>:
 8003c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c28:	4606      	mov	r6, r0
 8003c2a:	4688      	mov	r8, r1
 8003c2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c30:	2700      	movs	r7, #0
 8003c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c36:	f1b9 0901 	subs.w	r9, r9, #1
 8003c3a:	d505      	bpl.n	8003c48 <_fwalk_reent+0x24>
 8003c3c:	6824      	ldr	r4, [r4, #0]
 8003c3e:	2c00      	cmp	r4, #0
 8003c40:	d1f7      	bne.n	8003c32 <_fwalk_reent+0xe>
 8003c42:	4638      	mov	r0, r7
 8003c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c48:	89ab      	ldrh	r3, [r5, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d907      	bls.n	8003c5e <_fwalk_reent+0x3a>
 8003c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c52:	3301      	adds	r3, #1
 8003c54:	d003      	beq.n	8003c5e <_fwalk_reent+0x3a>
 8003c56:	4629      	mov	r1, r5
 8003c58:	4630      	mov	r0, r6
 8003c5a:	47c0      	blx	r8
 8003c5c:	4307      	orrs	r7, r0
 8003c5e:	3568      	adds	r5, #104	; 0x68
 8003c60:	e7e9      	b.n	8003c36 <_fwalk_reent+0x12>

08003c62 <__retarget_lock_init_recursive>:
 8003c62:	4770      	bx	lr

08003c64 <__retarget_lock_acquire_recursive>:
 8003c64:	4770      	bx	lr

08003c66 <__retarget_lock_release_recursive>:
 8003c66:	4770      	bx	lr

08003c68 <__swhatbuf_r>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	460e      	mov	r6, r1
 8003c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c70:	2900      	cmp	r1, #0
 8003c72:	b096      	sub	sp, #88	; 0x58
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	da08      	bge.n	8003c8c <__swhatbuf_r+0x24>
 8003c7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	602a      	str	r2, [r5, #0]
 8003c82:	061a      	lsls	r2, r3, #24
 8003c84:	d410      	bmi.n	8003ca8 <__swhatbuf_r+0x40>
 8003c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8a:	e00e      	b.n	8003caa <__swhatbuf_r+0x42>
 8003c8c:	466a      	mov	r2, sp
 8003c8e:	f000 fc95 	bl	80045bc <_fstat_r>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	dbf1      	blt.n	8003c7a <__swhatbuf_r+0x12>
 8003c96:	9a01      	ldr	r2, [sp, #4]
 8003c98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ca0:	425a      	negs	r2, r3
 8003ca2:	415a      	adcs	r2, r3
 8003ca4:	602a      	str	r2, [r5, #0]
 8003ca6:	e7ee      	b.n	8003c86 <__swhatbuf_r+0x1e>
 8003ca8:	2340      	movs	r3, #64	; 0x40
 8003caa:	2000      	movs	r0, #0
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	b016      	add	sp, #88	; 0x58
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb4 <__smakebuf_r>:
 8003cb4:	898b      	ldrh	r3, [r1, #12]
 8003cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cb8:	079d      	lsls	r5, r3, #30
 8003cba:	4606      	mov	r6, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	d507      	bpl.n	8003cd0 <__smakebuf_r+0x1c>
 8003cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	6123      	str	r3, [r4, #16]
 8003cc8:	2301      	movs	r3, #1
 8003cca:	6163      	str	r3, [r4, #20]
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	ab01      	add	r3, sp, #4
 8003cd2:	466a      	mov	r2, sp
 8003cd4:	f7ff ffc8 	bl	8003c68 <__swhatbuf_r>
 8003cd8:	9900      	ldr	r1, [sp, #0]
 8003cda:	4605      	mov	r5, r0
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f000 f895 	bl	8003e0c <_malloc_r>
 8003ce2:	b948      	cbnz	r0, 8003cf8 <__smakebuf_r+0x44>
 8003ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce8:	059a      	lsls	r2, r3, #22
 8003cea:	d4ef      	bmi.n	8003ccc <__smakebuf_r+0x18>
 8003cec:	f023 0303 	bic.w	r3, r3, #3
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	e7e3      	b.n	8003cc0 <__smakebuf_r+0xc>
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <__smakebuf_r+0x7c>)
 8003cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	6020      	str	r0, [r4, #0]
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	9b00      	ldr	r3, [sp, #0]
 8003d08:	6163      	str	r3, [r4, #20]
 8003d0a:	9b01      	ldr	r3, [sp, #4]
 8003d0c:	6120      	str	r0, [r4, #16]
 8003d0e:	b15b      	cbz	r3, 8003d28 <__smakebuf_r+0x74>
 8003d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d14:	4630      	mov	r0, r6
 8003d16:	f000 fc63 	bl	80045e0 <_isatty_r>
 8003d1a:	b128      	cbz	r0, 8003d28 <__smakebuf_r+0x74>
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	89a0      	ldrh	r0, [r4, #12]
 8003d2a:	4305      	orrs	r5, r0
 8003d2c:	81a5      	strh	r5, [r4, #12]
 8003d2e:	e7cd      	b.n	8003ccc <__smakebuf_r+0x18>
 8003d30:	08003ac1 	.word	0x08003ac1

08003d34 <_free_r>:
 8003d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d36:	2900      	cmp	r1, #0
 8003d38:	d044      	beq.n	8003dc4 <_free_r+0x90>
 8003d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3e:	9001      	str	r0, [sp, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f1a1 0404 	sub.w	r4, r1, #4
 8003d46:	bfb8      	it	lt
 8003d48:	18e4      	addlt	r4, r4, r3
 8003d4a:	f000 fc6b 	bl	8004624 <__malloc_lock>
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <_free_r+0x94>)
 8003d50:	9801      	ldr	r0, [sp, #4]
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	b933      	cbnz	r3, 8003d64 <_free_r+0x30>
 8003d56:	6063      	str	r3, [r4, #4]
 8003d58:	6014      	str	r4, [r2, #0]
 8003d5a:	b003      	add	sp, #12
 8003d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d60:	f000 bc66 	b.w	8004630 <__malloc_unlock>
 8003d64:	42a3      	cmp	r3, r4
 8003d66:	d908      	bls.n	8003d7a <_free_r+0x46>
 8003d68:	6825      	ldr	r5, [r4, #0]
 8003d6a:	1961      	adds	r1, r4, r5
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	bf01      	itttt	eq
 8003d70:	6819      	ldreq	r1, [r3, #0]
 8003d72:	685b      	ldreq	r3, [r3, #4]
 8003d74:	1949      	addeq	r1, r1, r5
 8003d76:	6021      	streq	r1, [r4, #0]
 8003d78:	e7ed      	b.n	8003d56 <_free_r+0x22>
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	b10b      	cbz	r3, 8003d84 <_free_r+0x50>
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	d9fa      	bls.n	8003d7a <_free_r+0x46>
 8003d84:	6811      	ldr	r1, [r2, #0]
 8003d86:	1855      	adds	r5, r2, r1
 8003d88:	42a5      	cmp	r5, r4
 8003d8a:	d10b      	bne.n	8003da4 <_free_r+0x70>
 8003d8c:	6824      	ldr	r4, [r4, #0]
 8003d8e:	4421      	add	r1, r4
 8003d90:	1854      	adds	r4, r2, r1
 8003d92:	42a3      	cmp	r3, r4
 8003d94:	6011      	str	r1, [r2, #0]
 8003d96:	d1e0      	bne.n	8003d5a <_free_r+0x26>
 8003d98:	681c      	ldr	r4, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	6053      	str	r3, [r2, #4]
 8003d9e:	4421      	add	r1, r4
 8003da0:	6011      	str	r1, [r2, #0]
 8003da2:	e7da      	b.n	8003d5a <_free_r+0x26>
 8003da4:	d902      	bls.n	8003dac <_free_r+0x78>
 8003da6:	230c      	movs	r3, #12
 8003da8:	6003      	str	r3, [r0, #0]
 8003daa:	e7d6      	b.n	8003d5a <_free_r+0x26>
 8003dac:	6825      	ldr	r5, [r4, #0]
 8003dae:	1961      	adds	r1, r4, r5
 8003db0:	428b      	cmp	r3, r1
 8003db2:	bf04      	itt	eq
 8003db4:	6819      	ldreq	r1, [r3, #0]
 8003db6:	685b      	ldreq	r3, [r3, #4]
 8003db8:	6063      	str	r3, [r4, #4]
 8003dba:	bf04      	itt	eq
 8003dbc:	1949      	addeq	r1, r1, r5
 8003dbe:	6021      	streq	r1, [r4, #0]
 8003dc0:	6054      	str	r4, [r2, #4]
 8003dc2:	e7ca      	b.n	8003d5a <_free_r+0x26>
 8003dc4:	b003      	add	sp, #12
 8003dc6:	bd30      	pop	{r4, r5, pc}
 8003dc8:	20000178 	.word	0x20000178

08003dcc <sbrk_aligned>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	4e0e      	ldr	r6, [pc, #56]	; (8003e08 <sbrk_aligned+0x3c>)
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	6831      	ldr	r1, [r6, #0]
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	b911      	cbnz	r1, 8003dde <sbrk_aligned+0x12>
 8003dd8:	f000 fb7a 	bl	80044d0 <_sbrk_r>
 8003ddc:	6030      	str	r0, [r6, #0]
 8003dde:	4621      	mov	r1, r4
 8003de0:	4628      	mov	r0, r5
 8003de2:	f000 fb75 	bl	80044d0 <_sbrk_r>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	d00a      	beq.n	8003e00 <sbrk_aligned+0x34>
 8003dea:	1cc4      	adds	r4, r0, #3
 8003dec:	f024 0403 	bic.w	r4, r4, #3
 8003df0:	42a0      	cmp	r0, r4
 8003df2:	d007      	beq.n	8003e04 <sbrk_aligned+0x38>
 8003df4:	1a21      	subs	r1, r4, r0
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 fb6a 	bl	80044d0 <_sbrk_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d101      	bne.n	8003e04 <sbrk_aligned+0x38>
 8003e00:	f04f 34ff 	mov.w	r4, #4294967295
 8003e04:	4620      	mov	r0, r4
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	2000017c 	.word	0x2000017c

08003e0c <_malloc_r>:
 8003e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e10:	1ccd      	adds	r5, r1, #3
 8003e12:	f025 0503 	bic.w	r5, r5, #3
 8003e16:	3508      	adds	r5, #8
 8003e18:	2d0c      	cmp	r5, #12
 8003e1a:	bf38      	it	cc
 8003e1c:	250c      	movcc	r5, #12
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	4607      	mov	r7, r0
 8003e22:	db01      	blt.n	8003e28 <_malloc_r+0x1c>
 8003e24:	42a9      	cmp	r1, r5
 8003e26:	d905      	bls.n	8003e34 <_malloc_r+0x28>
 8003e28:	230c      	movs	r3, #12
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e34:	4e2e      	ldr	r6, [pc, #184]	; (8003ef0 <_malloc_r+0xe4>)
 8003e36:	f000 fbf5 	bl	8004624 <__malloc_lock>
 8003e3a:	6833      	ldr	r3, [r6, #0]
 8003e3c:	461c      	mov	r4, r3
 8003e3e:	bb34      	cbnz	r4, 8003e8e <_malloc_r+0x82>
 8003e40:	4629      	mov	r1, r5
 8003e42:	4638      	mov	r0, r7
 8003e44:	f7ff ffc2 	bl	8003dcc <sbrk_aligned>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	d14d      	bne.n	8003eea <_malloc_r+0xde>
 8003e4e:	6834      	ldr	r4, [r6, #0]
 8003e50:	4626      	mov	r6, r4
 8003e52:	2e00      	cmp	r6, #0
 8003e54:	d140      	bne.n	8003ed8 <_malloc_r+0xcc>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	eb04 0803 	add.w	r8, r4, r3
 8003e60:	f000 fb36 	bl	80044d0 <_sbrk_r>
 8003e64:	4580      	cmp	r8, r0
 8003e66:	d13a      	bne.n	8003ede <_malloc_r+0xd2>
 8003e68:	6821      	ldr	r1, [r4, #0]
 8003e6a:	3503      	adds	r5, #3
 8003e6c:	1a6d      	subs	r5, r5, r1
 8003e6e:	f025 0503 	bic.w	r5, r5, #3
 8003e72:	3508      	adds	r5, #8
 8003e74:	2d0c      	cmp	r5, #12
 8003e76:	bf38      	it	cc
 8003e78:	250c      	movcc	r5, #12
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f7ff ffa5 	bl	8003dcc <sbrk_aligned>
 8003e82:	3001      	adds	r0, #1
 8003e84:	d02b      	beq.n	8003ede <_malloc_r+0xd2>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	442b      	add	r3, r5
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	e00e      	b.n	8003eac <_malloc_r+0xa0>
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	1b52      	subs	r2, r2, r5
 8003e92:	d41e      	bmi.n	8003ed2 <_malloc_r+0xc6>
 8003e94:	2a0b      	cmp	r2, #11
 8003e96:	d916      	bls.n	8003ec6 <_malloc_r+0xba>
 8003e98:	1961      	adds	r1, r4, r5
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	6025      	str	r5, [r4, #0]
 8003e9e:	bf18      	it	ne
 8003ea0:	6059      	strne	r1, [r3, #4]
 8003ea2:	6863      	ldr	r3, [r4, #4]
 8003ea4:	bf08      	it	eq
 8003ea6:	6031      	streq	r1, [r6, #0]
 8003ea8:	5162      	str	r2, [r4, r5]
 8003eaa:	604b      	str	r3, [r1, #4]
 8003eac:	4638      	mov	r0, r7
 8003eae:	f104 060b 	add.w	r6, r4, #11
 8003eb2:	f000 fbbd 	bl	8004630 <__malloc_unlock>
 8003eb6:	f026 0607 	bic.w	r6, r6, #7
 8003eba:	1d23      	adds	r3, r4, #4
 8003ebc:	1af2      	subs	r2, r6, r3
 8003ebe:	d0b6      	beq.n	8003e2e <_malloc_r+0x22>
 8003ec0:	1b9b      	subs	r3, r3, r6
 8003ec2:	50a3      	str	r3, [r4, r2]
 8003ec4:	e7b3      	b.n	8003e2e <_malloc_r+0x22>
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	bf0c      	ite	eq
 8003ecc:	6032      	streq	r2, [r6, #0]
 8003ece:	605a      	strne	r2, [r3, #4]
 8003ed0:	e7ec      	b.n	8003eac <_malloc_r+0xa0>
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	6864      	ldr	r4, [r4, #4]
 8003ed6:	e7b2      	b.n	8003e3e <_malloc_r+0x32>
 8003ed8:	4634      	mov	r4, r6
 8003eda:	6876      	ldr	r6, [r6, #4]
 8003edc:	e7b9      	b.n	8003e52 <_malloc_r+0x46>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f000 fba4 	bl	8004630 <__malloc_unlock>
 8003ee8:	e7a1      	b.n	8003e2e <_malloc_r+0x22>
 8003eea:	6025      	str	r5, [r4, #0]
 8003eec:	e7de      	b.n	8003eac <_malloc_r+0xa0>
 8003eee:	bf00      	nop
 8003ef0:	20000178 	.word	0x20000178

08003ef4 <__sfputc_r>:
 8003ef4:	6893      	ldr	r3, [r2, #8]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	b410      	push	{r4}
 8003efc:	6093      	str	r3, [r2, #8]
 8003efe:	da08      	bge.n	8003f12 <__sfputc_r+0x1e>
 8003f00:	6994      	ldr	r4, [r2, #24]
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	db01      	blt.n	8003f0a <__sfputc_r+0x16>
 8003f06:	290a      	cmp	r1, #10
 8003f08:	d103      	bne.n	8003f12 <__sfputc_r+0x1e>
 8003f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f0e:	f7ff bc31 	b.w	8003774 <__swbuf_r>
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	1c58      	adds	r0, r3, #1
 8003f16:	6010      	str	r0, [r2, #0]
 8003f18:	7019      	strb	r1, [r3, #0]
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <__sfputs_r>:
 8003f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f24:	4606      	mov	r6, r0
 8003f26:	460f      	mov	r7, r1
 8003f28:	4614      	mov	r4, r2
 8003f2a:	18d5      	adds	r5, r2, r3
 8003f2c:	42ac      	cmp	r4, r5
 8003f2e:	d101      	bne.n	8003f34 <__sfputs_r+0x12>
 8003f30:	2000      	movs	r0, #0
 8003f32:	e007      	b.n	8003f44 <__sfputs_r+0x22>
 8003f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f38:	463a      	mov	r2, r7
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff ffda 	bl	8003ef4 <__sfputc_r>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d1f3      	bne.n	8003f2c <__sfputs_r+0xa>
 8003f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f48 <_vfiprintf_r>:
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	460d      	mov	r5, r1
 8003f4e:	b09d      	sub	sp, #116	; 0x74
 8003f50:	4614      	mov	r4, r2
 8003f52:	4698      	mov	r8, r3
 8003f54:	4606      	mov	r6, r0
 8003f56:	b118      	cbz	r0, 8003f60 <_vfiprintf_r+0x18>
 8003f58:	6983      	ldr	r3, [r0, #24]
 8003f5a:	b90b      	cbnz	r3, 8003f60 <_vfiprintf_r+0x18>
 8003f5c:	f7ff fde4 	bl	8003b28 <__sinit>
 8003f60:	4b89      	ldr	r3, [pc, #548]	; (8004188 <_vfiprintf_r+0x240>)
 8003f62:	429d      	cmp	r5, r3
 8003f64:	d11b      	bne.n	8003f9e <_vfiprintf_r+0x56>
 8003f66:	6875      	ldr	r5, [r6, #4]
 8003f68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f6a:	07d9      	lsls	r1, r3, #31
 8003f6c:	d405      	bmi.n	8003f7a <_vfiprintf_r+0x32>
 8003f6e:	89ab      	ldrh	r3, [r5, #12]
 8003f70:	059a      	lsls	r2, r3, #22
 8003f72:	d402      	bmi.n	8003f7a <_vfiprintf_r+0x32>
 8003f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f76:	f7ff fe75 	bl	8003c64 <__retarget_lock_acquire_recursive>
 8003f7a:	89ab      	ldrh	r3, [r5, #12]
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	d501      	bpl.n	8003f84 <_vfiprintf_r+0x3c>
 8003f80:	692b      	ldr	r3, [r5, #16]
 8003f82:	b9eb      	cbnz	r3, 8003fc0 <_vfiprintf_r+0x78>
 8003f84:	4629      	mov	r1, r5
 8003f86:	4630      	mov	r0, r6
 8003f88:	f7ff fc46 	bl	8003818 <__swsetup_r>
 8003f8c:	b1c0      	cbz	r0, 8003fc0 <_vfiprintf_r+0x78>
 8003f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f90:	07dc      	lsls	r4, r3, #31
 8003f92:	d50e      	bpl.n	8003fb2 <_vfiprintf_r+0x6a>
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	b01d      	add	sp, #116	; 0x74
 8003f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f9e:	4b7b      	ldr	r3, [pc, #492]	; (800418c <_vfiprintf_r+0x244>)
 8003fa0:	429d      	cmp	r5, r3
 8003fa2:	d101      	bne.n	8003fa8 <_vfiprintf_r+0x60>
 8003fa4:	68b5      	ldr	r5, [r6, #8]
 8003fa6:	e7df      	b.n	8003f68 <_vfiprintf_r+0x20>
 8003fa8:	4b79      	ldr	r3, [pc, #484]	; (8004190 <_vfiprintf_r+0x248>)
 8003faa:	429d      	cmp	r5, r3
 8003fac:	bf08      	it	eq
 8003fae:	68f5      	ldreq	r5, [r6, #12]
 8003fb0:	e7da      	b.n	8003f68 <_vfiprintf_r+0x20>
 8003fb2:	89ab      	ldrh	r3, [r5, #12]
 8003fb4:	0598      	lsls	r0, r3, #22
 8003fb6:	d4ed      	bmi.n	8003f94 <_vfiprintf_r+0x4c>
 8003fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fba:	f7ff fe54 	bl	8003c66 <__retarget_lock_release_recursive>
 8003fbe:	e7e9      	b.n	8003f94 <_vfiprintf_r+0x4c>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fce:	2330      	movs	r3, #48	; 0x30
 8003fd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004194 <_vfiprintf_r+0x24c>
 8003fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fd8:	f04f 0901 	mov.w	r9, #1
 8003fdc:	4623      	mov	r3, r4
 8003fde:	469a      	mov	sl, r3
 8003fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fe4:	b10a      	cbz	r2, 8003fea <_vfiprintf_r+0xa2>
 8003fe6:	2a25      	cmp	r2, #37	; 0x25
 8003fe8:	d1f9      	bne.n	8003fde <_vfiprintf_r+0x96>
 8003fea:	ebba 0b04 	subs.w	fp, sl, r4
 8003fee:	d00b      	beq.n	8004008 <_vfiprintf_r+0xc0>
 8003ff0:	465b      	mov	r3, fp
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7ff ff93 	bl	8003f22 <__sfputs_r>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	f000 80aa 	beq.w	8004156 <_vfiprintf_r+0x20e>
 8004002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004004:	445a      	add	r2, fp
 8004006:	9209      	str	r2, [sp, #36]	; 0x24
 8004008:	f89a 3000 	ldrb.w	r3, [sl]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a2 	beq.w	8004156 <_vfiprintf_r+0x20e>
 8004012:	2300      	movs	r3, #0
 8004014:	f04f 32ff 	mov.w	r2, #4294967295
 8004018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800401c:	f10a 0a01 	add.w	sl, sl, #1
 8004020:	9304      	str	r3, [sp, #16]
 8004022:	9307      	str	r3, [sp, #28]
 8004024:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004028:	931a      	str	r3, [sp, #104]	; 0x68
 800402a:	4654      	mov	r4, sl
 800402c:	2205      	movs	r2, #5
 800402e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004032:	4858      	ldr	r0, [pc, #352]	; (8004194 <_vfiprintf_r+0x24c>)
 8004034:	f7fc f8cc 	bl	80001d0 <memchr>
 8004038:	9a04      	ldr	r2, [sp, #16]
 800403a:	b9d8      	cbnz	r0, 8004074 <_vfiprintf_r+0x12c>
 800403c:	06d1      	lsls	r1, r2, #27
 800403e:	bf44      	itt	mi
 8004040:	2320      	movmi	r3, #32
 8004042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004046:	0713      	lsls	r3, r2, #28
 8004048:	bf44      	itt	mi
 800404a:	232b      	movmi	r3, #43	; 0x2b
 800404c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004050:	f89a 3000 	ldrb.w	r3, [sl]
 8004054:	2b2a      	cmp	r3, #42	; 0x2a
 8004056:	d015      	beq.n	8004084 <_vfiprintf_r+0x13c>
 8004058:	9a07      	ldr	r2, [sp, #28]
 800405a:	4654      	mov	r4, sl
 800405c:	2000      	movs	r0, #0
 800405e:	f04f 0c0a 	mov.w	ip, #10
 8004062:	4621      	mov	r1, r4
 8004064:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004068:	3b30      	subs	r3, #48	; 0x30
 800406a:	2b09      	cmp	r3, #9
 800406c:	d94e      	bls.n	800410c <_vfiprintf_r+0x1c4>
 800406e:	b1b0      	cbz	r0, 800409e <_vfiprintf_r+0x156>
 8004070:	9207      	str	r2, [sp, #28]
 8004072:	e014      	b.n	800409e <_vfiprintf_r+0x156>
 8004074:	eba0 0308 	sub.w	r3, r0, r8
 8004078:	fa09 f303 	lsl.w	r3, r9, r3
 800407c:	4313      	orrs	r3, r2
 800407e:	9304      	str	r3, [sp, #16]
 8004080:	46a2      	mov	sl, r4
 8004082:	e7d2      	b.n	800402a <_vfiprintf_r+0xe2>
 8004084:	9b03      	ldr	r3, [sp, #12]
 8004086:	1d19      	adds	r1, r3, #4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	9103      	str	r1, [sp, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	bfbb      	ittet	lt
 8004090:	425b      	neglt	r3, r3
 8004092:	f042 0202 	orrlt.w	r2, r2, #2
 8004096:	9307      	strge	r3, [sp, #28]
 8004098:	9307      	strlt	r3, [sp, #28]
 800409a:	bfb8      	it	lt
 800409c:	9204      	strlt	r2, [sp, #16]
 800409e:	7823      	ldrb	r3, [r4, #0]
 80040a0:	2b2e      	cmp	r3, #46	; 0x2e
 80040a2:	d10c      	bne.n	80040be <_vfiprintf_r+0x176>
 80040a4:	7863      	ldrb	r3, [r4, #1]
 80040a6:	2b2a      	cmp	r3, #42	; 0x2a
 80040a8:	d135      	bne.n	8004116 <_vfiprintf_r+0x1ce>
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	9203      	str	r2, [sp, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfb8      	it	lt
 80040b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ba:	3402      	adds	r4, #2
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041a4 <_vfiprintf_r+0x25c>
 80040c2:	7821      	ldrb	r1, [r4, #0]
 80040c4:	2203      	movs	r2, #3
 80040c6:	4650      	mov	r0, sl
 80040c8:	f7fc f882 	bl	80001d0 <memchr>
 80040cc:	b140      	cbz	r0, 80040e0 <_vfiprintf_r+0x198>
 80040ce:	2340      	movs	r3, #64	; 0x40
 80040d0:	eba0 000a 	sub.w	r0, r0, sl
 80040d4:	fa03 f000 	lsl.w	r0, r3, r0
 80040d8:	9b04      	ldr	r3, [sp, #16]
 80040da:	4303      	orrs	r3, r0
 80040dc:	3401      	adds	r4, #1
 80040de:	9304      	str	r3, [sp, #16]
 80040e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e4:	482c      	ldr	r0, [pc, #176]	; (8004198 <_vfiprintf_r+0x250>)
 80040e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ea:	2206      	movs	r2, #6
 80040ec:	f7fc f870 	bl	80001d0 <memchr>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d03f      	beq.n	8004174 <_vfiprintf_r+0x22c>
 80040f4:	4b29      	ldr	r3, [pc, #164]	; (800419c <_vfiprintf_r+0x254>)
 80040f6:	bb1b      	cbnz	r3, 8004140 <_vfiprintf_r+0x1f8>
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	3307      	adds	r3, #7
 80040fc:	f023 0307 	bic.w	r3, r3, #7
 8004100:	3308      	adds	r3, #8
 8004102:	9303      	str	r3, [sp, #12]
 8004104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004106:	443b      	add	r3, r7
 8004108:	9309      	str	r3, [sp, #36]	; 0x24
 800410a:	e767      	b.n	8003fdc <_vfiprintf_r+0x94>
 800410c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004110:	460c      	mov	r4, r1
 8004112:	2001      	movs	r0, #1
 8004114:	e7a5      	b.n	8004062 <_vfiprintf_r+0x11a>
 8004116:	2300      	movs	r3, #0
 8004118:	3401      	adds	r4, #1
 800411a:	9305      	str	r3, [sp, #20]
 800411c:	4619      	mov	r1, r3
 800411e:	f04f 0c0a 	mov.w	ip, #10
 8004122:	4620      	mov	r0, r4
 8004124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004128:	3a30      	subs	r2, #48	; 0x30
 800412a:	2a09      	cmp	r2, #9
 800412c:	d903      	bls.n	8004136 <_vfiprintf_r+0x1ee>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0c5      	beq.n	80040be <_vfiprintf_r+0x176>
 8004132:	9105      	str	r1, [sp, #20]
 8004134:	e7c3      	b.n	80040be <_vfiprintf_r+0x176>
 8004136:	fb0c 2101 	mla	r1, ip, r1, r2
 800413a:	4604      	mov	r4, r0
 800413c:	2301      	movs	r3, #1
 800413e:	e7f0      	b.n	8004122 <_vfiprintf_r+0x1da>
 8004140:	ab03      	add	r3, sp, #12
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	462a      	mov	r2, r5
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <_vfiprintf_r+0x258>)
 8004148:	a904      	add	r1, sp, #16
 800414a:	4630      	mov	r0, r6
 800414c:	f3af 8000 	nop.w
 8004150:	4607      	mov	r7, r0
 8004152:	1c78      	adds	r0, r7, #1
 8004154:	d1d6      	bne.n	8004104 <_vfiprintf_r+0x1bc>
 8004156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004158:	07d9      	lsls	r1, r3, #31
 800415a:	d405      	bmi.n	8004168 <_vfiprintf_r+0x220>
 800415c:	89ab      	ldrh	r3, [r5, #12]
 800415e:	059a      	lsls	r2, r3, #22
 8004160:	d402      	bmi.n	8004168 <_vfiprintf_r+0x220>
 8004162:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004164:	f7ff fd7f 	bl	8003c66 <__retarget_lock_release_recursive>
 8004168:	89ab      	ldrh	r3, [r5, #12]
 800416a:	065b      	lsls	r3, r3, #25
 800416c:	f53f af12 	bmi.w	8003f94 <_vfiprintf_r+0x4c>
 8004170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004172:	e711      	b.n	8003f98 <_vfiprintf_r+0x50>
 8004174:	ab03      	add	r3, sp, #12
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	462a      	mov	r2, r5
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <_vfiprintf_r+0x258>)
 800417c:	a904      	add	r1, sp, #16
 800417e:	4630      	mov	r0, r6
 8004180:	f000 f880 	bl	8004284 <_printf_i>
 8004184:	e7e4      	b.n	8004150 <_vfiprintf_r+0x208>
 8004186:	bf00      	nop
 8004188:	08004724 	.word	0x08004724
 800418c:	08004744 	.word	0x08004744
 8004190:	08004704 	.word	0x08004704
 8004194:	08004764 	.word	0x08004764
 8004198:	0800476e 	.word	0x0800476e
 800419c:	00000000 	.word	0x00000000
 80041a0:	08003f23 	.word	0x08003f23
 80041a4:	0800476a 	.word	0x0800476a

080041a8 <_printf_common>:
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	4616      	mov	r6, r2
 80041ae:	4699      	mov	r9, r3
 80041b0:	688a      	ldr	r2, [r1, #8]
 80041b2:	690b      	ldr	r3, [r1, #16]
 80041b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041b8:	4293      	cmp	r3, r2
 80041ba:	bfb8      	it	lt
 80041bc:	4613      	movlt	r3, r2
 80041be:	6033      	str	r3, [r6, #0]
 80041c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c4:	4607      	mov	r7, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	b10a      	cbz	r2, 80041ce <_printf_common+0x26>
 80041ca:	3301      	adds	r3, #1
 80041cc:	6033      	str	r3, [r6, #0]
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	0699      	lsls	r1, r3, #26
 80041d2:	bf42      	ittt	mi
 80041d4:	6833      	ldrmi	r3, [r6, #0]
 80041d6:	3302      	addmi	r3, #2
 80041d8:	6033      	strmi	r3, [r6, #0]
 80041da:	6825      	ldr	r5, [r4, #0]
 80041dc:	f015 0506 	ands.w	r5, r5, #6
 80041e0:	d106      	bne.n	80041f0 <_printf_common+0x48>
 80041e2:	f104 0a19 	add.w	sl, r4, #25
 80041e6:	68e3      	ldr	r3, [r4, #12]
 80041e8:	6832      	ldr	r2, [r6, #0]
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	42ab      	cmp	r3, r5
 80041ee:	dc26      	bgt.n	800423e <_printf_common+0x96>
 80041f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041f4:	1e13      	subs	r3, r2, #0
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	bf18      	it	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	0692      	lsls	r2, r2, #26
 80041fe:	d42b      	bmi.n	8004258 <_printf_common+0xb0>
 8004200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004204:	4649      	mov	r1, r9
 8004206:	4638      	mov	r0, r7
 8004208:	47c0      	blx	r8
 800420a:	3001      	adds	r0, #1
 800420c:	d01e      	beq.n	800424c <_printf_common+0xa4>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	68e5      	ldr	r5, [r4, #12]
 8004212:	6832      	ldr	r2, [r6, #0]
 8004214:	f003 0306 	and.w	r3, r3, #6
 8004218:	2b04      	cmp	r3, #4
 800421a:	bf08      	it	eq
 800421c:	1aad      	subeq	r5, r5, r2
 800421e:	68a3      	ldr	r3, [r4, #8]
 8004220:	6922      	ldr	r2, [r4, #16]
 8004222:	bf0c      	ite	eq
 8004224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004228:	2500      	movne	r5, #0
 800422a:	4293      	cmp	r3, r2
 800422c:	bfc4      	itt	gt
 800422e:	1a9b      	subgt	r3, r3, r2
 8004230:	18ed      	addgt	r5, r5, r3
 8004232:	2600      	movs	r6, #0
 8004234:	341a      	adds	r4, #26
 8004236:	42b5      	cmp	r5, r6
 8004238:	d11a      	bne.n	8004270 <_printf_common+0xc8>
 800423a:	2000      	movs	r0, #0
 800423c:	e008      	b.n	8004250 <_printf_common+0xa8>
 800423e:	2301      	movs	r3, #1
 8004240:	4652      	mov	r2, sl
 8004242:	4649      	mov	r1, r9
 8004244:	4638      	mov	r0, r7
 8004246:	47c0      	blx	r8
 8004248:	3001      	adds	r0, #1
 800424a:	d103      	bne.n	8004254 <_printf_common+0xac>
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004254:	3501      	adds	r5, #1
 8004256:	e7c6      	b.n	80041e6 <_printf_common+0x3e>
 8004258:	18e1      	adds	r1, r4, r3
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	2030      	movs	r0, #48	; 0x30
 800425e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004262:	4422      	add	r2, r4
 8004264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800426c:	3302      	adds	r3, #2
 800426e:	e7c7      	b.n	8004200 <_printf_common+0x58>
 8004270:	2301      	movs	r3, #1
 8004272:	4622      	mov	r2, r4
 8004274:	4649      	mov	r1, r9
 8004276:	4638      	mov	r0, r7
 8004278:	47c0      	blx	r8
 800427a:	3001      	adds	r0, #1
 800427c:	d0e6      	beq.n	800424c <_printf_common+0xa4>
 800427e:	3601      	adds	r6, #1
 8004280:	e7d9      	b.n	8004236 <_printf_common+0x8e>
	...

08004284 <_printf_i>:
 8004284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	7e0f      	ldrb	r7, [r1, #24]
 800428a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800428c:	2f78      	cmp	r7, #120	; 0x78
 800428e:	4691      	mov	r9, r2
 8004290:	4680      	mov	r8, r0
 8004292:	460c      	mov	r4, r1
 8004294:	469a      	mov	sl, r3
 8004296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800429a:	d807      	bhi.n	80042ac <_printf_i+0x28>
 800429c:	2f62      	cmp	r7, #98	; 0x62
 800429e:	d80a      	bhi.n	80042b6 <_printf_i+0x32>
 80042a0:	2f00      	cmp	r7, #0
 80042a2:	f000 80d8 	beq.w	8004456 <_printf_i+0x1d2>
 80042a6:	2f58      	cmp	r7, #88	; 0x58
 80042a8:	f000 80a3 	beq.w	80043f2 <_printf_i+0x16e>
 80042ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042b4:	e03a      	b.n	800432c <_printf_i+0xa8>
 80042b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ba:	2b15      	cmp	r3, #21
 80042bc:	d8f6      	bhi.n	80042ac <_printf_i+0x28>
 80042be:	a101      	add	r1, pc, #4	; (adr r1, 80042c4 <_printf_i+0x40>)
 80042c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c4:	0800431d 	.word	0x0800431d
 80042c8:	08004331 	.word	0x08004331
 80042cc:	080042ad 	.word	0x080042ad
 80042d0:	080042ad 	.word	0x080042ad
 80042d4:	080042ad 	.word	0x080042ad
 80042d8:	080042ad 	.word	0x080042ad
 80042dc:	08004331 	.word	0x08004331
 80042e0:	080042ad 	.word	0x080042ad
 80042e4:	080042ad 	.word	0x080042ad
 80042e8:	080042ad 	.word	0x080042ad
 80042ec:	080042ad 	.word	0x080042ad
 80042f0:	0800443d 	.word	0x0800443d
 80042f4:	08004361 	.word	0x08004361
 80042f8:	0800441f 	.word	0x0800441f
 80042fc:	080042ad 	.word	0x080042ad
 8004300:	080042ad 	.word	0x080042ad
 8004304:	0800445f 	.word	0x0800445f
 8004308:	080042ad 	.word	0x080042ad
 800430c:	08004361 	.word	0x08004361
 8004310:	080042ad 	.word	0x080042ad
 8004314:	080042ad 	.word	0x080042ad
 8004318:	08004427 	.word	0x08004427
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	602a      	str	r2, [r5, #0]
 8004324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800432c:	2301      	movs	r3, #1
 800432e:	e0a3      	b.n	8004478 <_printf_i+0x1f4>
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	6829      	ldr	r1, [r5, #0]
 8004334:	0606      	lsls	r6, r0, #24
 8004336:	f101 0304 	add.w	r3, r1, #4
 800433a:	d50a      	bpl.n	8004352 <_printf_i+0xce>
 800433c:	680e      	ldr	r6, [r1, #0]
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	2e00      	cmp	r6, #0
 8004342:	da03      	bge.n	800434c <_printf_i+0xc8>
 8004344:	232d      	movs	r3, #45	; 0x2d
 8004346:	4276      	negs	r6, r6
 8004348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800434c:	485e      	ldr	r0, [pc, #376]	; (80044c8 <_printf_i+0x244>)
 800434e:	230a      	movs	r3, #10
 8004350:	e019      	b.n	8004386 <_printf_i+0x102>
 8004352:	680e      	ldr	r6, [r1, #0]
 8004354:	602b      	str	r3, [r5, #0]
 8004356:	f010 0f40 	tst.w	r0, #64	; 0x40
 800435a:	bf18      	it	ne
 800435c:	b236      	sxthne	r6, r6
 800435e:	e7ef      	b.n	8004340 <_printf_i+0xbc>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	1d19      	adds	r1, r3, #4
 8004366:	6029      	str	r1, [r5, #0]
 8004368:	0601      	lsls	r1, r0, #24
 800436a:	d501      	bpl.n	8004370 <_printf_i+0xec>
 800436c:	681e      	ldr	r6, [r3, #0]
 800436e:	e002      	b.n	8004376 <_printf_i+0xf2>
 8004370:	0646      	lsls	r6, r0, #25
 8004372:	d5fb      	bpl.n	800436c <_printf_i+0xe8>
 8004374:	881e      	ldrh	r6, [r3, #0]
 8004376:	4854      	ldr	r0, [pc, #336]	; (80044c8 <_printf_i+0x244>)
 8004378:	2f6f      	cmp	r7, #111	; 0x6f
 800437a:	bf0c      	ite	eq
 800437c:	2308      	moveq	r3, #8
 800437e:	230a      	movne	r3, #10
 8004380:	2100      	movs	r1, #0
 8004382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004386:	6865      	ldr	r5, [r4, #4]
 8004388:	60a5      	str	r5, [r4, #8]
 800438a:	2d00      	cmp	r5, #0
 800438c:	bfa2      	ittt	ge
 800438e:	6821      	ldrge	r1, [r4, #0]
 8004390:	f021 0104 	bicge.w	r1, r1, #4
 8004394:	6021      	strge	r1, [r4, #0]
 8004396:	b90e      	cbnz	r6, 800439c <_printf_i+0x118>
 8004398:	2d00      	cmp	r5, #0
 800439a:	d04d      	beq.n	8004438 <_printf_i+0x1b4>
 800439c:	4615      	mov	r5, r2
 800439e:	fbb6 f1f3 	udiv	r1, r6, r3
 80043a2:	fb03 6711 	mls	r7, r3, r1, r6
 80043a6:	5dc7      	ldrb	r7, [r0, r7]
 80043a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043ac:	4637      	mov	r7, r6
 80043ae:	42bb      	cmp	r3, r7
 80043b0:	460e      	mov	r6, r1
 80043b2:	d9f4      	bls.n	800439e <_printf_i+0x11a>
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d10b      	bne.n	80043d0 <_printf_i+0x14c>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	07de      	lsls	r6, r3, #31
 80043bc:	d508      	bpl.n	80043d0 <_printf_i+0x14c>
 80043be:	6923      	ldr	r3, [r4, #16]
 80043c0:	6861      	ldr	r1, [r4, #4]
 80043c2:	4299      	cmp	r1, r3
 80043c4:	bfde      	ittt	le
 80043c6:	2330      	movle	r3, #48	; 0x30
 80043c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043d0:	1b52      	subs	r2, r2, r5
 80043d2:	6122      	str	r2, [r4, #16]
 80043d4:	f8cd a000 	str.w	sl, [sp]
 80043d8:	464b      	mov	r3, r9
 80043da:	aa03      	add	r2, sp, #12
 80043dc:	4621      	mov	r1, r4
 80043de:	4640      	mov	r0, r8
 80043e0:	f7ff fee2 	bl	80041a8 <_printf_common>
 80043e4:	3001      	adds	r0, #1
 80043e6:	d14c      	bne.n	8004482 <_printf_i+0x1fe>
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	b004      	add	sp, #16
 80043ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f2:	4835      	ldr	r0, [pc, #212]	; (80044c8 <_printf_i+0x244>)
 80043f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043f8:	6829      	ldr	r1, [r5, #0]
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004400:	6029      	str	r1, [r5, #0]
 8004402:	061d      	lsls	r5, r3, #24
 8004404:	d514      	bpl.n	8004430 <_printf_i+0x1ac>
 8004406:	07df      	lsls	r7, r3, #31
 8004408:	bf44      	itt	mi
 800440a:	f043 0320 	orrmi.w	r3, r3, #32
 800440e:	6023      	strmi	r3, [r4, #0]
 8004410:	b91e      	cbnz	r6, 800441a <_printf_i+0x196>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f023 0320 	bic.w	r3, r3, #32
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	2310      	movs	r3, #16
 800441c:	e7b0      	b.n	8004380 <_printf_i+0xfc>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	f043 0320 	orr.w	r3, r3, #32
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	2378      	movs	r3, #120	; 0x78
 8004428:	4828      	ldr	r0, [pc, #160]	; (80044cc <_printf_i+0x248>)
 800442a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800442e:	e7e3      	b.n	80043f8 <_printf_i+0x174>
 8004430:	0659      	lsls	r1, r3, #25
 8004432:	bf48      	it	mi
 8004434:	b2b6      	uxthmi	r6, r6
 8004436:	e7e6      	b.n	8004406 <_printf_i+0x182>
 8004438:	4615      	mov	r5, r2
 800443a:	e7bb      	b.n	80043b4 <_printf_i+0x130>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	6826      	ldr	r6, [r4, #0]
 8004440:	6961      	ldr	r1, [r4, #20]
 8004442:	1d18      	adds	r0, r3, #4
 8004444:	6028      	str	r0, [r5, #0]
 8004446:	0635      	lsls	r5, r6, #24
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	d501      	bpl.n	8004450 <_printf_i+0x1cc>
 800444c:	6019      	str	r1, [r3, #0]
 800444e:	e002      	b.n	8004456 <_printf_i+0x1d2>
 8004450:	0670      	lsls	r0, r6, #25
 8004452:	d5fb      	bpl.n	800444c <_printf_i+0x1c8>
 8004454:	8019      	strh	r1, [r3, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	6123      	str	r3, [r4, #16]
 800445a:	4615      	mov	r5, r2
 800445c:	e7ba      	b.n	80043d4 <_printf_i+0x150>
 800445e:	682b      	ldr	r3, [r5, #0]
 8004460:	1d1a      	adds	r2, r3, #4
 8004462:	602a      	str	r2, [r5, #0]
 8004464:	681d      	ldr	r5, [r3, #0]
 8004466:	6862      	ldr	r2, [r4, #4]
 8004468:	2100      	movs	r1, #0
 800446a:	4628      	mov	r0, r5
 800446c:	f7fb feb0 	bl	80001d0 <memchr>
 8004470:	b108      	cbz	r0, 8004476 <_printf_i+0x1f2>
 8004472:	1b40      	subs	r0, r0, r5
 8004474:	6060      	str	r0, [r4, #4]
 8004476:	6863      	ldr	r3, [r4, #4]
 8004478:	6123      	str	r3, [r4, #16]
 800447a:	2300      	movs	r3, #0
 800447c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004480:	e7a8      	b.n	80043d4 <_printf_i+0x150>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	462a      	mov	r2, r5
 8004486:	4649      	mov	r1, r9
 8004488:	4640      	mov	r0, r8
 800448a:	47d0      	blx	sl
 800448c:	3001      	adds	r0, #1
 800448e:	d0ab      	beq.n	80043e8 <_printf_i+0x164>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	079b      	lsls	r3, r3, #30
 8004494:	d413      	bmi.n	80044be <_printf_i+0x23a>
 8004496:	68e0      	ldr	r0, [r4, #12]
 8004498:	9b03      	ldr	r3, [sp, #12]
 800449a:	4298      	cmp	r0, r3
 800449c:	bfb8      	it	lt
 800449e:	4618      	movlt	r0, r3
 80044a0:	e7a4      	b.n	80043ec <_printf_i+0x168>
 80044a2:	2301      	movs	r3, #1
 80044a4:	4632      	mov	r2, r6
 80044a6:	4649      	mov	r1, r9
 80044a8:	4640      	mov	r0, r8
 80044aa:	47d0      	blx	sl
 80044ac:	3001      	adds	r0, #1
 80044ae:	d09b      	beq.n	80043e8 <_printf_i+0x164>
 80044b0:	3501      	adds	r5, #1
 80044b2:	68e3      	ldr	r3, [r4, #12]
 80044b4:	9903      	ldr	r1, [sp, #12]
 80044b6:	1a5b      	subs	r3, r3, r1
 80044b8:	42ab      	cmp	r3, r5
 80044ba:	dcf2      	bgt.n	80044a2 <_printf_i+0x21e>
 80044bc:	e7eb      	b.n	8004496 <_printf_i+0x212>
 80044be:	2500      	movs	r5, #0
 80044c0:	f104 0619 	add.w	r6, r4, #25
 80044c4:	e7f5      	b.n	80044b2 <_printf_i+0x22e>
 80044c6:	bf00      	nop
 80044c8:	08004775 	.word	0x08004775
 80044cc:	08004786 	.word	0x08004786

080044d0 <_sbrk_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d06      	ldr	r5, [pc, #24]	; (80044ec <_sbrk_r+0x1c>)
 80044d4:	2300      	movs	r3, #0
 80044d6:	4604      	mov	r4, r0
 80044d8:	4608      	mov	r0, r1
 80044da:	602b      	str	r3, [r5, #0]
 80044dc:	f7fc fcd6 	bl	8000e8c <_sbrk>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_sbrk_r+0x1a>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_sbrk_r+0x1a>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000180 	.word	0x20000180

080044f0 <__sread>:
 80044f0:	b510      	push	{r4, lr}
 80044f2:	460c      	mov	r4, r1
 80044f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f8:	f000 f8a0 	bl	800463c <_read_r>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	bfab      	itete	ge
 8004500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004502:	89a3      	ldrhlt	r3, [r4, #12]
 8004504:	181b      	addge	r3, r3, r0
 8004506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800450a:	bfac      	ite	ge
 800450c:	6563      	strge	r3, [r4, #84]	; 0x54
 800450e:	81a3      	strhlt	r3, [r4, #12]
 8004510:	bd10      	pop	{r4, pc}

08004512 <__swrite>:
 8004512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004516:	461f      	mov	r7, r3
 8004518:	898b      	ldrh	r3, [r1, #12]
 800451a:	05db      	lsls	r3, r3, #23
 800451c:	4605      	mov	r5, r0
 800451e:	460c      	mov	r4, r1
 8004520:	4616      	mov	r6, r2
 8004522:	d505      	bpl.n	8004530 <__swrite+0x1e>
 8004524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004528:	2302      	movs	r3, #2
 800452a:	2200      	movs	r2, #0
 800452c:	f000 f868 	bl	8004600 <_lseek_r>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	4632      	mov	r2, r6
 800453e:	463b      	mov	r3, r7
 8004540:	4628      	mov	r0, r5
 8004542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004546:	f000 b817 	b.w	8004578 <_write_r>

0800454a <__sseek>:
 800454a:	b510      	push	{r4, lr}
 800454c:	460c      	mov	r4, r1
 800454e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004552:	f000 f855 	bl	8004600 <_lseek_r>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	bf15      	itete	ne
 800455c:	6560      	strne	r0, [r4, #84]	; 0x54
 800455e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004566:	81a3      	strheq	r3, [r4, #12]
 8004568:	bf18      	it	ne
 800456a:	81a3      	strhne	r3, [r4, #12]
 800456c:	bd10      	pop	{r4, pc}

0800456e <__sclose>:
 800456e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004572:	f000 b813 	b.w	800459c <_close_r>
	...

08004578 <_write_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4d07      	ldr	r5, [pc, #28]	; (8004598 <_write_r+0x20>)
 800457c:	4604      	mov	r4, r0
 800457e:	4608      	mov	r0, r1
 8004580:	4611      	mov	r1, r2
 8004582:	2200      	movs	r2, #0
 8004584:	602a      	str	r2, [r5, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	f7fc fc2f 	bl	8000dea <_write>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_write_r+0x1e>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_write_r+0x1e>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20000180 	.word	0x20000180

0800459c <_close_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d06      	ldr	r5, [pc, #24]	; (80045b8 <_close_r+0x1c>)
 80045a0:	2300      	movs	r3, #0
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc fc3b 	bl	8000e22 <_close>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_close_r+0x1a>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_close_r+0x1a>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	20000180 	.word	0x20000180

080045bc <_fstat_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d07      	ldr	r5, [pc, #28]	; (80045dc <_fstat_r+0x20>)
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	f7fc fc36 	bl	8000e3a <_fstat>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d102      	bne.n	80045d8 <_fstat_r+0x1c>
 80045d2:	682b      	ldr	r3, [r5, #0]
 80045d4:	b103      	cbz	r3, 80045d8 <_fstat_r+0x1c>
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	20000180 	.word	0x20000180

080045e0 <_isatty_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d06      	ldr	r5, [pc, #24]	; (80045fc <_isatty_r+0x1c>)
 80045e4:	2300      	movs	r3, #0
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fc fc35 	bl	8000e5a <_isatty>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_isatty_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_isatty_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	20000180 	.word	0x20000180

08004600 <_lseek_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d07      	ldr	r5, [pc, #28]	; (8004620 <_lseek_r+0x20>)
 8004604:	4604      	mov	r4, r0
 8004606:	4608      	mov	r0, r1
 8004608:	4611      	mov	r1, r2
 800460a:	2200      	movs	r2, #0
 800460c:	602a      	str	r2, [r5, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	f7fc fc2e 	bl	8000e70 <_lseek>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_lseek_r+0x1e>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	b103      	cbz	r3, 800461e <_lseek_r+0x1e>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	20000180 	.word	0x20000180

08004624 <__malloc_lock>:
 8004624:	4801      	ldr	r0, [pc, #4]	; (800462c <__malloc_lock+0x8>)
 8004626:	f7ff bb1d 	b.w	8003c64 <__retarget_lock_acquire_recursive>
 800462a:	bf00      	nop
 800462c:	20000174 	.word	0x20000174

08004630 <__malloc_unlock>:
 8004630:	4801      	ldr	r0, [pc, #4]	; (8004638 <__malloc_unlock+0x8>)
 8004632:	f7ff bb18 	b.w	8003c66 <__retarget_lock_release_recursive>
 8004636:	bf00      	nop
 8004638:	20000174 	.word	0x20000174

0800463c <_read_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d07      	ldr	r5, [pc, #28]	; (800465c <_read_r+0x20>)
 8004640:	4604      	mov	r4, r0
 8004642:	4608      	mov	r0, r1
 8004644:	4611      	mov	r1, r2
 8004646:	2200      	movs	r2, #0
 8004648:	602a      	str	r2, [r5, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f7fc fbb0 	bl	8000db0 <_read>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_read_r+0x1e>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_read_r+0x1e>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20000180 	.word	0x20000180

08004660 <_init>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	bf00      	nop
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr

0800466c <_fini>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	bf00      	nop
 8004670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004672:	bc08      	pop	{r3}
 8004674:	469e      	mov	lr, r3
 8004676:	4770      	bx	lr
