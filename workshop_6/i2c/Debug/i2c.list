
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800596c  0800596c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005974  08005974  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800597c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c670  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cb3  00000000  00000000  0002c710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009d0  00000000  00000000  0002ee38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021328  00000000  00000000  0002f808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d518  00000000  00000000  00050b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c653b  00000000  00000000  0005e048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124583  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032d8  00000000  00000000  001245d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800581c 	.word	0x0800581c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800581c 	.word	0x0800581c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f003 fc66 	bl	8003e56 <HAL_UART_Transmit>
  return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000e0 	.word	0x200000e0

08000598 <main>:


int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

  HAL_Init();
 800059c:	f000 fb02 	bl	8000ba4 <HAL_Init>

  SystemClock_Config();
 80005a0:	f000 f81c 	bl	80005dc <SystemClock_Config>

  MX_GPIO_Init();
 80005a4:	f000 f8d0 	bl	8000748 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a8:	f000 f876 	bl	8000698 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005ac:	f000 f8a2 	bl	80006f4 <MX_USART3_UART_Init>

  HAL_Delay(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f000 fb69 	bl	8000c88 <HAL_Delay>
  pca9685_enable(1);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f003 ffc2 	bl	8004540 <pca9685_enable>
  pca9685_sleep(0);
 80005bc:	2000      	movs	r0, #0
 80005be:	f003 ffe3 	bl	8004588 <pca9685_sleep>
  pca9685_frequency(1500);
 80005c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005c6:	f004 f815 	bl	80045f4 <pca9685_frequency>

  pca9685_setChannelPWM(0, 80);
 80005ca:	2150      	movs	r1, #80	; 0x50
 80005cc:	2000      	movs	r0, #0
 80005ce:	f004 f855 	bl	800467c <pca9685_setChannelPWM>
  pca9685_setChannelPWM(1, 40);
 80005d2:	2128      	movs	r1, #40	; 0x28
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 f851 	bl	800467c <pca9685_setChannelPWM>


  while (1)
 80005da:	e7fe      	b.n	80005da <main+0x42>

080005dc <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 f90a 	bl	8004804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]


  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xb4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xb4>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xb4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <SystemClock_Config+0xb8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <SystemClock_Config+0xb8>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <SystemClock_Config+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f002 ff5d 	bl	800350c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000658:	f000 f8b8 	bl	80007cc <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f9c0 	bl	80039fc <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000682:	f000 f8a3 	bl	80007cc <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_I2C1_Init+0x54>)
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <MX_I2C1_Init+0x58>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x54>)
 80006a4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80006a8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_I2C1_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_I2C1_Init+0x54>)
 80006b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_I2C1_Init+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_I2C1_Init+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x54>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_I2C1_Init+0x54>)
 80006d8:	f000 fdf2 	bl	80012c0 <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80006e2:	f000 f873 	bl	80007cc <Error_Handler>
  }

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	40005400 	.word	0x40005400

080006f4 <MX_USART3_UART_Init>:


static void MX_USART3_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART3_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800072c:	f003 fb46 	bl	8003dbc <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f849 	bl	80007cc <Error_Handler>
  }


}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000e0 	.word	0x200000e0
 8000744:	40004800 	.word	0x40004800

08000748 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_GPIO_Init+0x7c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MX_GPIO_Init+0x7c>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_GPIO_Init+0x7c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_GPIO_Init+0x7c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <MX_GPIO_Init+0x7c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_GPIO_Init+0x7c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_GPIO_Init+0x80>)
 800079c:	f000 fd76 	bl	800128c <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0x80>)
 80007b8:	f000 fbcc 	bl	8000f54 <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400

080007cc <Error_Handler>:

void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <HAL_I2C_MspInit+0xa4>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d13c      	bne.n	80008c4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <HAL_I2C_MspInit+0xa8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <HAL_I2C_MspInit+0xa8>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <HAL_I2C_MspInit+0xa8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000866:	f44f 7310 	mov.w	r3, #576	; 0x240
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086c:	2312      	movs	r3, #18
 800086e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000878:	2304      	movs	r3, #4
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <HAL_I2C_MspInit+0xac>)
 8000884:	f000 fb66 	bl	8000f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_I2C_MspInit+0xa8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_I2C_MspInit+0xa8>)
 8000892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_I2C_MspInit+0xa8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	201f      	movs	r0, #31
 80008aa:	f000 faec 	bl	8000e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008ae:	201f      	movs	r0, #31
 80008b0:	f000 fb05 	bl	8000ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2020      	movs	r0, #32
 80008ba:	f000 fae4 	bl	8000e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008be:	2020      	movs	r0, #32
 80008c0:	f000 fafd 	bl	8000ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40005400 	.word	0x40005400
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020400 	.word	0x40020400

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a19      	ldr	r2, [pc, #100]	; (800095c <HAL_UART_MspInit+0x84>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d12c      	bne.n	8000954 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_UART_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000944:	2307      	movs	r3, #7
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_UART_MspInit+0x8c>)
 8000950:	f000 fb00 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40004800 	.word	0x40004800
 8000960:	40023800 	.word	0x40023800
 8000964:	40020c00 	.word	0x40020c00

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f948 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <I2C1_EV_IRQHandler+0x10>)
 80009c2:	f000 febf 	bl	8001744 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000008c 	.word	0x2000008c

080009d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <I2C1_ER_IRQHandler+0x10>)
 80009d6:	f001 f826 	bl	8001a26 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000008c 	.word	0x2000008c

080009e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e00a      	b.n	8000a0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f6:	f3af 8000 	nop.w
 80009fa:	4601      	mov	r1, r0
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	b2ca      	uxtb	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf0      	blt.n	80009f6 <_read+0x12>
  }

  return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e009      	b.n	8000a44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fd9b 	bl	8000574 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf1      	blt.n	8000a30 <_write+0x12>
  }
  return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_close>:

int _close(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_isatty>:

int _isatty(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f003 fe5e 	bl	80047b0 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20000124 	.word	0x20000124
 8000b28:	20000140 	.word	0x20000140

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f003 fe1d 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd09 	bl	8000598 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b94:	0800597c 	.word	0x0800597c
  ldr r2, =_sbss
 8000b98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b9c:	2000013c 	.word	0x2000013c

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f94f 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fdfe 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f967 	bl	8000eda <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f92f 	bl	8000e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000128 	.word	0x20000128

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000128 	.word	0x20000128

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff29 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff3e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff31 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffa2 	bl	8000e2c <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d004      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e00c      	b.n	8000f2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2205      	movs	r2, #5
 8000f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e16b      	b.n	8001248 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 815a 	bne.w	8001242 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80b4 	beq.w	8001242 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b60      	ldr	r3, [pc, #384]	; (8001260 <HAL_GPIO_Init+0x30c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a5f      	ldr	r2, [pc, #380]	; (8001260 <HAL_GPIO_Init+0x30c>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b5d      	ldr	r3, [pc, #372]	; (8001260 <HAL_GPIO_Init+0x30c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a5b      	ldr	r2, [pc, #364]	; (8001264 <HAL_GPIO_Init+0x310>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a52      	ldr	r2, [pc, #328]	; (8001268 <HAL_GPIO_Init+0x314>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02b      	beq.n	800117a <HAL_GPIO_Init+0x226>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a51      	ldr	r2, [pc, #324]	; (800126c <HAL_GPIO_Init+0x318>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d025      	beq.n	8001176 <HAL_GPIO_Init+0x222>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a50      	ldr	r2, [pc, #320]	; (8001270 <HAL_GPIO_Init+0x31c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x21e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4f      	ldr	r2, [pc, #316]	; (8001274 <HAL_GPIO_Init+0x320>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x21a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <HAL_GPIO_Init+0x324>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x216>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4d      	ldr	r2, [pc, #308]	; (800127c <HAL_GPIO_Init+0x328>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x212>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_GPIO_Init+0x32c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x20e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <HAL_GPIO_Init+0x330>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x20a>
 800115a:	2307      	movs	r3, #7
 800115c:	e00e      	b.n	800117c <HAL_GPIO_Init+0x228>
 800115e:	2308      	movs	r3, #8
 8001160:	e00c      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001162:	2306      	movs	r3, #6
 8001164:	e00a      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001166:	2305      	movs	r3, #5
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x228>
 800116a:	2304      	movs	r3, #4
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x228>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x228>
 800117a:	2300      	movs	r3, #0
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118c:	4935      	ldr	r1, [pc, #212]	; (8001264 <HAL_GPIO_Init+0x310>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <HAL_GPIO_Init+0x334>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a32      	ldr	r2, [pc, #200]	; (8001288 <HAL_GPIO_Init+0x334>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_GPIO_Init+0x334>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a27      	ldr	r2, [pc, #156]	; (8001288 <HAL_GPIO_Init+0x334>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <HAL_GPIO_Init+0x334>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_GPIO_Init+0x334>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_GPIO_Init+0x334>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <HAL_GPIO_Init+0x334>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f ae90 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40021400 	.word	0x40021400
 8001280:	40021800 	.word	0x40021800
 8001284:	40021c00 	.word	0x40021c00
 8001288:	40013c00 	.word	0x40013c00

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e12b      	b.n	800152a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fa9e 	bl	8000828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2224      	movs	r2, #36	; 0x24
 80012f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001324:	f002 fd22 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a81      	ldr	r2, [pc, #516]	; (8001534 <HAL_I2C_Init+0x274>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d807      	bhi.n	8001344 <HAL_I2C_Init+0x84>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a80      	ldr	r2, [pc, #512]	; (8001538 <HAL_I2C_Init+0x278>)
 8001338:	4293      	cmp	r3, r2
 800133a:	bf94      	ite	ls
 800133c:	2301      	movls	r3, #1
 800133e:	2300      	movhi	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	e006      	b.n	8001352 <HAL_I2C_Init+0x92>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4a7d      	ldr	r2, [pc, #500]	; (800153c <HAL_I2C_Init+0x27c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	bf94      	ite	ls
 800134c:	2301      	movls	r3, #1
 800134e:	2300      	movhi	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0e7      	b.n	800152a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a78      	ldr	r2, [pc, #480]	; (8001540 <HAL_I2C_Init+0x280>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a6a      	ldr	r2, [pc, #424]	; (8001534 <HAL_I2C_Init+0x274>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d802      	bhi.n	8001394 <HAL_I2C_Init+0xd4>
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3301      	adds	r3, #1
 8001392:	e009      	b.n	80013a8 <HAL_I2C_Init+0xe8>
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	4a69      	ldr	r2, [pc, #420]	; (8001544 <HAL_I2C_Init+0x284>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	099b      	lsrs	r3, r3, #6
 80013a6:	3301      	adds	r3, #1
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	495c      	ldr	r1, [pc, #368]	; (8001534 <HAL_I2C_Init+0x274>)
 80013c4:	428b      	cmp	r3, r1
 80013c6:	d819      	bhi.n	80013fc <HAL_I2C_Init+0x13c>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1e59      	subs	r1, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d6:	1c59      	adds	r1, r3, #1
 80013d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013dc:	400b      	ands	r3, r1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <HAL_I2C_Init+0x138>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1e59      	subs	r1, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f0:	3301      	adds	r3, #1
 80013f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f6:	e051      	b.n	800149c <HAL_I2C_Init+0x1dc>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e04f      	b.n	800149c <HAL_I2C_Init+0x1dc>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d111      	bne.n	8001428 <HAL_I2C_Init+0x168>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1e58      	subs	r0, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	440b      	add	r3, r1
 8001412:	fbb0 f3f3 	udiv	r3, r0, r3
 8001416:	3301      	adds	r3, #1
 8001418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	e012      	b.n	800144e <HAL_I2C_Init+0x18e>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e58      	subs	r0, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	0099      	lsls	r1, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_Init+0x196>
 8001452:	2301      	movs	r3, #1
 8001454:	e022      	b.n	800149c <HAL_I2C_Init+0x1dc>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10e      	bne.n	800147c <HAL_I2C_Init+0x1bc>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1e58      	subs	r0, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6859      	ldr	r1, [r3, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	440b      	add	r3, r1
 800146c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001470:	3301      	adds	r3, #1
 8001472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147a:	e00f      	b.n	800149c <HAL_I2C_Init+0x1dc>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1e58      	subs	r0, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	0099      	lsls	r1, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001492:	3301      	adds	r3, #1
 8001494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	6809      	ldr	r1, [r1, #0]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69da      	ldr	r2, [r3, #28]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6911      	ldr	r1, [r2, #16]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68d2      	ldr	r2, [r2, #12]
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	430b      	orrs	r3, r1
 80014de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2220      	movs	r2, #32
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	000186a0 	.word	0x000186a0
 8001538:	001e847f 	.word	0x001e847f
 800153c:	003d08ff 	.word	0x003d08ff
 8001540:	431bde83 	.word	0x431bde83
 8001544:	10624dd3 	.word	0x10624dd3

08001548 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	461a      	mov	r2, r3
 8001554:	460b      	mov	r3, r1
 8001556:	817b      	strh	r3, [r7, #10]
 8001558:	4613      	mov	r3, r2
 800155a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff fb88 	bl	8000c70 <HAL_GetTick>
 8001560:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b20      	cmp	r3, #32
 800156c:	f040 80e0 	bne.w	8001730 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2319      	movs	r3, #25
 8001576:	2201      	movs	r2, #1
 8001578:	4970      	ldr	r1, [pc, #448]	; (800173c <HAL_I2C_Master_Transmit+0x1f4>)
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f001 fdf2 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001586:	2302      	movs	r3, #2
 8001588:	e0d3      	b.n	8001732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_I2C_Master_Transmit+0x50>
 8001594:	2302      	movs	r3, #2
 8001596:	e0cc      	b.n	8001732 <HAL_I2C_Master_Transmit+0x1ea>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d007      	beq.n	80015be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0201 	orr.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2221      	movs	r2, #33	; 0x21
 80015d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2210      	movs	r2, #16
 80015da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	893a      	ldrh	r2, [r7, #8]
 80015ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_I2C_Master_Transmit+0x1f8>)
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001600:	8979      	ldrh	r1, [r7, #10]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f001 fc82 	bl	8002f10 <I2C_MasterRequestWrite>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e08d      	b.n	8001732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800162c:	e066      	b.n	80016fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f001 fe6c 	bl	8003310 <I2C_WaitOnTXEFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	2b04      	cmp	r3, #4
 8001644:	d107      	bne.n	8001656 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06b      	b.n	8001732 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001674:	b29b      	uxth	r3, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b04      	cmp	r3, #4
 8001696:	d11b      	bne.n	80016d0 <HAL_I2C_Master_Transmit+0x188>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169c:	2b00      	cmp	r3, #0
 800169e:	d017      	beq.n	80016d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	6a39      	ldr	r1, [r7, #32]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f001 fe5c 	bl	8003392 <I2C_WaitOnBTFFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00d      	beq.n	80016fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d107      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e01a      	b.n	8001732 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	d194      	bne.n	800162e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2220      	movs	r2, #32
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	e000      	b.n	8001732 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001730:	2302      	movs	r3, #2
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	00100002 	.word	0x00100002
 8001740:	ffff0000 	.word	0xffff0000

08001744 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001764:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	2b10      	cmp	r3, #16
 8001772:	d003      	beq.n	800177c <HAL_I2C_EV_IRQHandler+0x38>
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b40      	cmp	r3, #64	; 0x40
 8001778:	f040 80c1 	bne.w	80018fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10d      	bne.n	80017b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800179c:	d003      	beq.n	80017a6 <HAL_I2C_EV_IRQHandler+0x62>
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80017a4:	d101      	bne.n	80017aa <HAL_I2C_EV_IRQHandler+0x66>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x68>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	f000 8132 	beq.w	8001a16 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00c      	beq.n	80017d6 <HAL_I2C_EV_IRQHandler+0x92>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	0a5b      	lsrs	r3, r3, #9
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f001 fe84 	bl	80034d6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fd83 	bl	80022da <I2C_Master_SB>
 80017d4:	e092      	b.n	80018fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	0a5b      	lsrs	r3, r3, #9
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 fdf9 	bl	80023e6 <I2C_Master_ADD10>
 80017f4:	e082      	b.n	80018fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_I2C_EV_IRQHandler+0xd2>
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	0a5b      	lsrs	r3, r3, #9
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fe13 	bl	800243a <I2C_Master_ADDR>
 8001814:	e072      	b.n	80018fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d03b      	beq.n	800189a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001830:	f000 80f3 	beq.w	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	09db      	lsrs	r3, r3, #7
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00f      	beq.n	8001860 <HAL_I2C_EV_IRQHandler+0x11c>
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	0a9b      	lsrs	r3, r3, #10
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <HAL_I2C_EV_IRQHandler+0x11c>
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f9f3 	bl	8001c44 <I2C_MasterTransmit_TXE>
 800185e:	e04d      	b.n	80018fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80d6 	beq.w	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	0a5b      	lsrs	r3, r3, #9
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80cf 	beq.w	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800187c:	7bbb      	ldrb	r3, [r7, #14]
 800187e:	2b21      	cmp	r3, #33	; 0x21
 8001880:	d103      	bne.n	800188a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa7a 	bl	8001d7c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001888:	e0c7      	b.n	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	2b40      	cmp	r3, #64	; 0x40
 800188e:	f040 80c4 	bne.w	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fae8 	bl	8001e68 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001898:	e0bf      	b.n	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018a8:	f000 80b7 	beq.w	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00f      	beq.n	80018d8 <HAL_I2C_EV_IRQHandler+0x194>
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	0a9b      	lsrs	r3, r3, #10
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <HAL_I2C_EV_IRQHandler+0x194>
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fb5d 	bl	8001f90 <I2C_MasterReceive_RXNE>
 80018d6:	e011      	b.n	80018fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 809a 	beq.w	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	0a5b      	lsrs	r3, r3, #9
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8093 	beq.w	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fc06 	bl	8002106 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018fa:	e08e      	b.n	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 80018fc:	e08d      	b.n	8001a1a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e007      	b.n	8001920 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d012      	beq.n	8001952 <HAL_I2C_EV_IRQHandler+0x20e>
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	0a5b      	lsrs	r3, r3, #9
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00c      	beq.n	8001952 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001948:	69b9      	ldr	r1, [r7, #24]
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 ffc4 	bl	80028d8 <I2C_Slave_ADDR>
 8001950:	e066      	b.n	8001a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_I2C_EV_IRQHandler+0x22e>
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	0a5b      	lsrs	r3, r3, #9
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fffe 	bl	800296c <I2C_Slave_STOPF>
 8001970:	e056      	b.n	8001a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	2b21      	cmp	r3, #33	; 0x21
 8001976:	d002      	beq.n	800197e <HAL_I2C_EV_IRQHandler+0x23a>
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	2b29      	cmp	r3, #41	; 0x29
 800197c:	d125      	bne.n	80019ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	09db      	lsrs	r3, r3, #7
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00f      	beq.n	80019aa <HAL_I2C_EV_IRQHandler+0x266>
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	0a9b      	lsrs	r3, r3, #10
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_I2C_EV_IRQHandler+0x266>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 feda 	bl	800275c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019a8:	e039      	b.n	8001a1e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d033      	beq.n	8001a1e <HAL_I2C_EV_IRQHandler+0x2da>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	0a5b      	lsrs	r3, r3, #9
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d02d      	beq.n	8001a1e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 ff07 	bl	80027d6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019c8:	e029      	b.n	8001a1e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	099b      	lsrs	r3, r3, #6
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00f      	beq.n	80019f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	0a9b      	lsrs	r3, r3, #10
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d103      	bne.n	80019f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 ff12 	bl	8002818 <I2C_SlaveReceive_RXNE>
 80019f4:	e014      	b.n	8001a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00e      	beq.n	8001a20 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	0a5b      	lsrs	r3, r3, #9
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 ff40 	bl	8002894 <I2C_SlaveReceive_BTF>
 8001a14:	e004      	b.n	8001a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a16:	bf00      	nop
 8001a18:	e002      	b.n	8001a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a1a:	bf00      	nop
 8001a1c:	e000      	b.n	8001a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b08a      	sub	sp, #40	; 0x28
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a48:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00e      	beq.n	8001a74 <HAL_I2C_ER_IRQHandler+0x4e>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001a72:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	0a5b      	lsrs	r3, r3, #9
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <HAL_I2C_ER_IRQHandler+0x78>
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001a9c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	0a9b      	lsrs	r3, r3, #10
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d03f      	beq.n	8001b2a <HAL_I2C_ER_IRQHandler+0x104>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d039      	beq.n	8001b2a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001ab6:	7efb      	ldrb	r3, [r7, #27]
 8001ab8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001ad0:	7ebb      	ldrb	r3, [r7, #26]
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d112      	bne.n	8001afc <HAL_I2C_ER_IRQHandler+0xd6>
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10f      	bne.n	8001afc <HAL_I2C_ER_IRQHandler+0xd6>
 8001adc:	7cfb      	ldrb	r3, [r7, #19]
 8001ade:	2b21      	cmp	r3, #33	; 0x21
 8001ae0:	d008      	beq.n	8001af4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001ae2:	7cfb      	ldrb	r3, [r7, #19]
 8001ae4:	2b29      	cmp	r3, #41	; 0x29
 8001ae6:	d005      	beq.n	8001af4 <HAL_I2C_ER_IRQHandler+0xce>
 8001ae8:	7cfb      	ldrb	r3, [r7, #19]
 8001aea:	2b28      	cmp	r3, #40	; 0x28
 8001aec:	d106      	bne.n	8001afc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b21      	cmp	r3, #33	; 0x21
 8001af2:	d103      	bne.n	8001afc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f001 f869 	bl	8002bcc <I2C_Slave_AF>
 8001afa:	e016      	b.n	8001b2a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b04:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b0e:	7efb      	ldrb	r3, [r7, #27]
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d002      	beq.n	8001b1a <HAL_I2C_ER_IRQHandler+0xf4>
 8001b14:	7efb      	ldrb	r3, [r7, #27]
 8001b16:	2b40      	cmp	r3, #64	; 0x40
 8001b18:	d107      	bne.n	8001b2a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b28:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	0adb      	lsrs	r3, r3, #11
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00e      	beq.n	8001b54 <HAL_I2C_ER_IRQHandler+0x12e>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001b52:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f001 f8a0 	bl	8002cac <I2C_ITError>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c5a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d150      	bne.n	8001d0c <I2C_MasterTransmit_TXE+0xc8>
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b21      	cmp	r3, #33	; 0x21
 8001c6e:	d14d      	bne.n	8001d0c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d01d      	beq.n	8001cb2 <I2C_MasterTransmit_TXE+0x6e>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d01a      	beq.n	8001cb2 <I2C_MasterTransmit_TXE+0x6e>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c82:	d016      	beq.n	8001cb2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c92:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2211      	movs	r2, #17
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff62 	bl	8001b74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cb0:	e060      	b.n	8001d74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cc0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b40      	cmp	r3, #64	; 0x40
 8001cea:	d107      	bne.n	8001cfc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff7d 	bl	8001bf4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cfa:	e03b      	b.n	8001d74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff35 	bl	8001b74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d0a:	e033      	b.n	8001d74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b21      	cmp	r3, #33	; 0x21
 8001d10:	d005      	beq.n	8001d1e <I2C_MasterTransmit_TXE+0xda>
 8001d12:	7bbb      	ldrb	r3, [r7, #14]
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d12d      	bne.n	8001d74 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b22      	cmp	r3, #34	; 0x22
 8001d1c:	d12a      	bne.n	8001d74 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d108      	bne.n	8001d3a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d36:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001d38:	e01c      	b.n	8001d74 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b40      	cmp	r3, #64	; 0x40
 8001d44:	d103      	bne.n	8001d4e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f88e 	bl	8001e68 <I2C_MemoryTransmit_TXE_BTF>
}
 8001d4c:	e012      	b.n	8001d74 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d72:	e7ff      	b.n	8001d74 <I2C_MasterTransmit_TXE+0x130>
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b21      	cmp	r3, #33	; 0x21
 8001d94:	d164      	bne.n	8001e60 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001dc4:	e04c      	b.n	8001e60 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d01d      	beq.n	8001e08 <I2C_MasterTransmit_BTF+0x8c>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d01a      	beq.n	8001e08 <I2C_MasterTransmit_BTF+0x8c>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dd8:	d016      	beq.n	8001e08 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001de8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2211      	movs	r2, #17
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff feb7 	bl	8001b74 <HAL_I2C_MasterTxCpltCallback>
}
 8001e06:	e02b      	b.n	8001e60 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e16:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e26:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d107      	bne.n	8001e52 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fed2 	bl	8001bf4 <HAL_I2C_MemTxCpltCallback>
}
 8001e50:	e006      	b.n	8001e60 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fe8a 	bl	8001b74 <HAL_I2C_MasterTxCpltCallback>
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11d      	bne.n	8001ebc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10b      	bne.n	8001ea0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e98:	1c9a      	adds	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001e9e:	e073      	b.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	121b      	asrs	r3, r3, #8
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eba:	e065      	b.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10b      	bne.n	8001edc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eda:	e055      	b.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d151      	bne.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	2b22      	cmp	r3, #34	; 0x22
 8001ee8:	d10d      	bne.n	8001f06 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f04:	e040      	b.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b21      	cmp	r3, #33	; 0x21
 8001f14:	d112      	bne.n	8001f3c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f3a:	e025      	b.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d120      	bne.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b21      	cmp	r3, #33	; 0x21
 8001f4a:	d11d      	bne.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f5a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fe36 	bl	8001bf4 <HAL_I2C_MemTxCpltCallback>
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b22      	cmp	r3, #34	; 0x22
 8001fa2:	f040 80ac 	bne.w	80020fe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d921      	bls.n	8001ff8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	f040 808c 	bne.w	80020fe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001ff6:	e082      	b.n	80020fe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d075      	beq.n	80020ec <I2C_MasterReceive_RXNE+0x15c>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d002      	beq.n	800200c <I2C_MasterReceive_RXNE+0x7c>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d16f      	bne.n	80020ec <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f001 fa01 	bl	8003414 <I2C_WaitOnSTOPRequestThroughIT>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d142      	bne.n	800209e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002026:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002036:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d10a      	bne.n	8002088 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fdc1 	bl	8001c08 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002086:	e03a      	b.n	80020fe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2212      	movs	r2, #18
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fd76 	bl	8001b88 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800209c:	e02f      	b.n	80020fe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fd99 	bl	8001c1c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020ea:	e008      	b.n	80020fe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fa:	605a      	str	r2, [r3, #4]
}
 80020fc:	e7ff      	b.n	80020fe <I2C_MasterReceive_RXNE+0x16e>
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b04      	cmp	r3, #4
 800211c:	d11b      	bne.n	8002156 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002154:	e0bd      	b.n	80022d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d129      	bne.n	80021b4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b04      	cmp	r3, #4
 8002174:	d00a      	beq.n	800218c <I2C_MasterReceive_BTF+0x86>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d007      	beq.n	800218c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021b2:	e08e      	b.n	80022d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d176      	bne.n	80022ac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d002      	beq.n	80021ca <I2C_MasterReceive_BTF+0xc4>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d108      	bne.n	80021dc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e019      	b.n	8002210 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d002      	beq.n	80021e8 <I2C_MasterReceive_BTF+0xe2>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d108      	bne.n	80021fa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e00a      	b.n	8002210 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d007      	beq.n	8002210 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800226a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	d10a      	bne.n	8002296 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fcba 	bl	8001c08 <HAL_I2C_MemRxCpltCallback>
}
 8002294:	e01d      	b.n	80022d2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2212      	movs	r2, #18
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fc6f 	bl	8001b88 <HAL_I2C_MasterRxCpltCallback>
}
 80022aa:	e012      	b.n	80022d2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d117      	bne.n	800231e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002306:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002308:	e067      	b.n	80023da <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	611a      	str	r2, [r3, #16]
}
 800231c:	e05d      	b.n	80023da <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002326:	d133      	bne.n	8002390 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b21      	cmp	r3, #33	; 0x21
 8002332:	d109      	bne.n	8002348 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	e008      	b.n	800235a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <I2C_Master_SB+0x92>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d108      	bne.n	800237e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	2b00      	cmp	r3, #0
 8002372:	d032      	beq.n	80023da <I2C_Master_SB+0x100>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d02d      	beq.n	80023da <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238c:	605a      	str	r2, [r3, #4]
}
 800238e:	e024      	b.n	80023da <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10e      	bne.n	80023b6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	b29b      	uxth	r3, r3
 800239e:	11db      	asrs	r3, r3, #7
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 0306 	and.w	r3, r3, #6
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f063 030f 	orn	r3, r3, #15
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	611a      	str	r2, [r3, #16]
}
 80023b4:	e011      	b.n	80023da <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d10d      	bne.n	80023da <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	11db      	asrs	r3, r3, #7
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f003 0306 	and.w	r3, r3, #6
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f063 030e 	orn	r3, r3, #14
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	611a      	str	r2, [r3, #16]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <I2C_Master_ADD10+0x26>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d108      	bne.n	800241e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00c      	beq.n	800242e <I2C_Master_ADD10+0x48>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242c:	605a      	str	r2, [r3, #4]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800243a:	b480      	push	{r7}
 800243c:	b091      	sub	sp, #68	; 0x44
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002448:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b22      	cmp	r3, #34	; 0x22
 8002462:	f040 8169 	bne.w	8002738 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <I2C_Master_ADDR+0x54>
 800246e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d10b      	bne.n	800248e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002476:	2300      	movs	r3, #0
 8002478:	633b      	str	r3, [r7, #48]	; 0x30
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	e160      	b.n	8002750 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11d      	bne.n	80024d2 <I2C_Master_ADDR+0x98>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800249e:	d118      	bne.n	80024d2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	651a      	str	r2, [r3, #80]	; 0x50
 80024d0:	e13e      	b.n	8002750 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d113      	bne.n	8002504 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024dc:	2300      	movs	r3, #0
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e115      	b.n	8002730 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 808a 	bne.w	8002624 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002516:	d137      	bne.n	8002588 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002536:	d113      	bne.n	8002560 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002546:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	e0e7      	b.n	8002730 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	623b      	str	r3, [r7, #32]
 8002574:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e0d3      	b.n	8002730 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	2b08      	cmp	r3, #8
 800258c:	d02e      	beq.n	80025ec <I2C_Master_ADDR+0x1b2>
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	2b20      	cmp	r3, #32
 8002592:	d02b      	beq.n	80025ec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	2b12      	cmp	r3, #18
 8002598:	d102      	bne.n	80025a0 <I2C_Master_ADDR+0x166>
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	2b01      	cmp	r3, #1
 800259e:	d125      	bne.n	80025ec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d00e      	beq.n	80025c4 <I2C_Master_ADDR+0x18a>
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d00b      	beq.n	80025c4 <I2C_Master_ADDR+0x18a>
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d008      	beq.n	80025c4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e007      	b.n	80025d4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	e0a1      	b.n	8002730 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e085      	b.n	8002730 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d14d      	bne.n	80026ca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	2b04      	cmp	r3, #4
 8002632:	d016      	beq.n	8002662 <I2C_Master_ADDR+0x228>
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	2b02      	cmp	r3, #2
 8002638:	d013      	beq.n	8002662 <I2C_Master_ADDR+0x228>
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	2b10      	cmp	r3, #16
 800263e:	d010      	beq.n	8002662 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e007      	b.n	8002672 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002670:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	d117      	bne.n	80026b2 <I2C_Master_ADDR+0x278>
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002688:	d00b      	beq.n	80026a2 <I2C_Master_ADDR+0x268>
 800268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268c:	2b01      	cmp	r3, #1
 800268e:	d008      	beq.n	80026a2 <I2C_Master_ADDR+0x268>
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	2b08      	cmp	r3, #8
 8002694:	d005      	beq.n	80026a2 <I2C_Master_ADDR+0x268>
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	2b10      	cmp	r3, #16
 800269a:	d002      	beq.n	80026a2 <I2C_Master_ADDR+0x268>
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d107      	bne.n	80026b2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	e032      	b.n	8002730 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e8:	d117      	bne.n	800271a <I2C_Master_ADDR+0x2e0>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f0:	d00b      	beq.n	800270a <I2C_Master_ADDR+0x2d0>
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d008      	beq.n	800270a <I2C_Master_ADDR+0x2d0>
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d005      	beq.n	800270a <I2C_Master_ADDR+0x2d0>
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	2b10      	cmp	r3, #16
 8002702:	d002      	beq.n	800270a <I2C_Master_ADDR+0x2d0>
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	2b20      	cmp	r3, #32
 8002708:	d107      	bne.n	800271a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002718:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002736:	e00b      	b.n	8002750 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	e7ff      	b.n	8002750 <I2C_Master_ADDR+0x316>
 8002750:	bf00      	nop
 8002752:	3744      	adds	r7, #68	; 0x44
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d02b      	beq.n	80027ce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d114      	bne.n	80027ce <I2C_SlaveTransmit_TXE+0x72>
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b29      	cmp	r3, #41	; 0x29
 80027a8:	d111      	bne.n	80027ce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2221      	movs	r2, #33	; 0x21
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2228      	movs	r2, #40	; 0x28
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff f9e7 	bl	8001b9c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d011      	beq.n	800280c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02c      	beq.n	800288c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d114      	bne.n	800288c <I2C_SlaveReceive_RXNE+0x74>
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b2a      	cmp	r3, #42	; 0x2a
 8002866:	d111      	bne.n	800288c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002876:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2222      	movs	r2, #34	; 0x22
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2228      	movs	r2, #40	; 0x28
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff f992 	bl	8001bb0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028f2:	2b28      	cmp	r3, #40	; 0x28
 80028f4:	d127      	bne.n	8002946 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002904:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	09db      	lsrs	r3, r3, #7
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d103      	bne.n	800292a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	81bb      	strh	r3, [r7, #12]
 8002928:	e002      	b.n	8002930 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002938:	89ba      	ldrh	r2, [r7, #12]
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff f940 	bl	8001bc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002944:	e00e      	b.n	8002964 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800298a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c8:	d172      	bne.n	8002ab0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b22      	cmp	r3, #34	; 0x22
 80029ce:	d002      	beq.n	80029d6 <I2C_Slave_STOPF+0x6a>
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b2a      	cmp	r3, #42	; 0x2a
 80029d4:	d135      	bne.n	8002a42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fa91 	bl	8000f36 <HAL_DMA_GetState>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d049      	beq.n	8002aae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	4a69      	ldr	r2, [pc, #420]	; (8002bc4 <I2C_Slave_STOPF+0x258>)
 8002a20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fa63 	bl	8000ef2 <HAL_DMA_Abort_IT>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03d      	beq.n	8002aae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a40:	e035      	b.n	8002aae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fa5b 	bl	8000f36 <HAL_DMA_GetState>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d014      	beq.n	8002ab0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <I2C_Slave_STOPF+0x258>)
 8002a8c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fa2d 	bl	8000ef2 <HAL_DMA_Abort_IT>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4798      	blx	r3
 8002aac:	e000      	b.n	8002ab0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002aae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03e      	beq.n	8002b38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d112      	bne.n	8002aee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d112      	bne.n	8002b22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0204 	orr.w	r2, r3, #4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8b3 	bl	8002cac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b46:	e039      	b.n	8002bbc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b4c:	d109      	bne.n	8002b62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2228      	movs	r2, #40	; 0x28
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff f827 	bl	8001bb0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b28      	cmp	r3, #40	; 0x28
 8002b6c:	d111      	bne.n	8002b92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <I2C_Slave_STOPF+0x25c>)
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff f828 	bl	8001be0 <HAL_I2C_ListenCpltCallback>
}
 8002b90:	e014      	b.n	8002bbc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	2b22      	cmp	r3, #34	; 0x22
 8002b98:	d002      	beq.n	8002ba0 <I2C_Slave_STOPF+0x234>
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	2b22      	cmp	r3, #34	; 0x22
 8002b9e:	d10d      	bne.n	8002bbc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe fffa 	bl	8001bb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	08003015 	.word	0x08003015
 8002bc8:	ffff0000 	.word	0xffff0000

08002bcc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d002      	beq.n	8002bee <I2C_Slave_AF+0x22>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d129      	bne.n	8002c42 <I2C_Slave_AF+0x76>
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b28      	cmp	r3, #40	; 0x28
 8002bf2:	d126      	bne.n	8002c42 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a2c      	ldr	r2, [pc, #176]	; (8002ca8 <I2C_Slave_AF+0xdc>)
 8002bf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c08:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c12:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c22:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe ffd0 	bl	8001be0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c40:	e02e      	b.n	8002ca0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b21      	cmp	r3, #33	; 0x21
 8002c46:	d126      	bne.n	8002c96 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <I2C_Slave_AF+0xdc>)
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2221      	movs	r2, #33	; 0x21
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c72:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c7c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe ff84 	bl	8001b9c <HAL_I2C_SlaveTxCpltCallback>
}
 8002c94:	e004      	b.n	8002ca0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c9e:	615a      	str	r2, [r3, #20]
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cc4:	7bbb      	ldrb	r3, [r7, #14]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d002      	beq.n	8002cd0 <I2C_ITError+0x24>
 8002cca:	7bbb      	ldrb	r3, [r7, #14]
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d10a      	bne.n	8002ce6 <I2C_ITError+0x3a>
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b22      	cmp	r3, #34	; 0x22
 8002cd4:	d107      	bne.n	8002ce6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cec:	2b28      	cmp	r3, #40	; 0x28
 8002cee:	d107      	bne.n	8002d00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2228      	movs	r2, #40	; 0x28
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cfe:	e015      	b.n	8002d2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d0e:	d00a      	beq.n	8002d26 <I2C_ITError+0x7a>
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b60      	cmp	r3, #96	; 0x60
 8002d14:	d007      	beq.n	8002d26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d3a:	d162      	bne.n	8002e02 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d020      	beq.n	8002d9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5e:	4a6a      	ldr	r2, [pc, #424]	; (8002f08 <I2C_ITError+0x25c>)
 8002d60:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe f8c3 	bl	8000ef2 <HAL_DMA_Abort_IT>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8089 	beq.w	8002e86 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d96:	4610      	mov	r0, r2
 8002d98:	4798      	blx	r3
 8002d9a:	e074      	b.n	8002e86 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	4a59      	ldr	r2, [pc, #356]	; (8002f08 <I2C_ITError+0x25c>)
 8002da2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f8a2 	bl	8000ef2 <HAL_DMA_Abort_IT>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d068      	beq.n	8002e86 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d10b      	bne.n	8002dda <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4798      	blx	r3
 8002e00:	e041      	b.n	8002e86 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b60      	cmp	r3, #96	; 0x60
 8002e0c:	d125      	bne.n	8002e5a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d10b      	bne.n	8002e42 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe feec 	bl	8001c30 <HAL_I2C_AbortCpltCallback>
 8002e58:	e015      	b.n	8002e86 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d10b      	bne.n	8002e80 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fe fecb 	bl	8001c1c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10e      	bne.n	8002eb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ec2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d113      	bne.n	8002f00 <I2C_ITError+0x254>
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b28      	cmp	r3, #40	; 0x28
 8002edc:	d110      	bne.n	8002f00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <I2C_ITError+0x260>)
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fe70 	bl	8001be0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	08003015 	.word	0x08003015
 8002f0c:	ffff0000 	.word	0xffff0000

08002f10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d006      	beq.n	8002f3a <I2C_MasterRequestWrite+0x2a>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d003      	beq.n	8002f3a <I2C_MasterRequestWrite+0x2a>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f38:	d108      	bne.n	8002f4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e00b      	b.n	8002f64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	2b12      	cmp	r3, #18
 8002f52:	d107      	bne.n	8002f64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f8f7 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8a:	d103      	bne.n	8002f94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e035      	b.n	8003004 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa0:	d108      	bne.n	8002fb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb0:	611a      	str	r2, [r3, #16]
 8002fb2:	e01b      	b.n	8002fec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fb4:	897b      	ldrh	r3, [r7, #10]
 8002fb6:	11db      	asrs	r3, r3, #7
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f003 0306 	and.w	r3, r3, #6
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f063 030f 	orn	r3, r3, #15
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	490e      	ldr	r1, [pc, #56]	; (800300c <I2C_MasterRequestWrite+0xfc>)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f91d 	bl	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e010      	b.n	8003004 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <I2C_MasterRequestWrite+0x100>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f90d 	bl	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	00010008 	.word	0x00010008
 8003010:	00010002 	.word	0x00010002

08003014 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800302e:	4b4b      	ldr	r3, [pc, #300]	; (800315c <I2C_DMAAbort+0x148>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	08db      	lsrs	r3, r3, #3
 8003034:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <I2C_DMAAbort+0x14c>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0a1a      	lsrs	r2, r3, #8
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00da      	lsls	r2, r3, #3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800305a:	e00a      	b.n	8003072 <I2C_DMAAbort+0x5e>
    }
    count--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3b01      	subs	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003070:	d0ea      	beq.n	8003048 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	2200      	movs	r2, #0
 8003080:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	2200      	movs	r2, #0
 8003090:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b4:	2200      	movs	r2, #0
 80030b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	2200      	movs	r2, #0
 80030c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b60      	cmp	r3, #96	; 0x60
 80030e2:	d10e      	bne.n	8003102 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2200      	movs	r2, #0
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7fe fd98 	bl	8001c30 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003100:	e027      	b.n	8003152 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003108:	2b28      	cmp	r3, #40	; 0x28
 800310a:	d117      	bne.n	800313c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800312a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2228      	movs	r2, #40	; 0x28
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800313a:	e007      	b.n	800314c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f7fe fd65 	bl	8001c1c <HAL_I2C_ErrorCallback>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000000 	.word	0x20000000
 8003160:	14f8b589 	.word	0x14f8b589

08003164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003174:	e025      	b.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d021      	beq.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fd fd77 	bl	8000c70 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d116      	bne.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e023      	b.n	800320a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10d      	bne.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf0c      	ite	eq
 80031de:	2301      	moveq	r3, #1
 80031e0:	2300      	movne	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	e00c      	b.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	429a      	cmp	r2, r3
 8003206:	d0b6      	beq.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003220:	e051      	b.n	80032c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003230:	d123      	bne.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800324a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0204 	orr.w	r2, r3, #4
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e046      	b.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d021      	beq.n	80032c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7fd fcf5 	bl	8000c70 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d116      	bne.n	80032c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e020      	b.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10c      	bne.n	80032ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4013      	ands	r3, r2
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e00b      	b.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	43da      	mvns	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d18d      	bne.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800331c:	e02d      	b.n	800337a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f8aa 	bl	8003478 <I2C_IsAcknowledgeFailed>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e02d      	b.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d021      	beq.n	800337a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fd fc9b 	bl	8000c70 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d116      	bne.n	800337a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e007      	b.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003384:	2b80      	cmp	r3, #128	; 0x80
 8003386:	d1ca      	bne.n	800331e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800339e:	e02d      	b.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f869 	bl	8003478 <I2C_IsAcknowledgeFailed>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e02d      	b.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d021      	beq.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b8:	f7fd fc5a 	bl	8000c70 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d302      	bcc.n	80033ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e007      	b.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b04      	cmp	r3, #4
 8003408:	d1ca      	bne.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	08db      	lsrs	r3, r3, #3
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	0a1a      	lsrs	r2, r3, #8
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3b01      	subs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e008      	b.n	8003464 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003460:	d0e9      	beq.n	8003436 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	20000000 	.word	0x20000000
 8003474:	14f8b589 	.word	0x14f8b589

08003478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d11b      	bne.n	80034c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034e6:	d103      	bne.n	80034f0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80034ee:	e007      	b.n	8003500 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034f8:	d102      	bne.n	8003500 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2208      	movs	r2, #8
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e267      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d075      	beq.n	8003616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	4b88      	ldr	r3, [pc, #544]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00c      	beq.n	8003550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4b85      	ldr	r3, [pc, #532]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d112      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b82      	ldr	r3, [pc, #520]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354e:	d10b      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	4b7e      	ldr	r3, [pc, #504]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05b      	beq.n	8003614 <HAL_RCC_OscConfig+0x108>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d157      	bne.n	8003614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e242      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x74>
 8003572:	4b76      	ldr	r3, [pc, #472]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a75      	ldr	r2, [pc, #468]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x98>
 800358a:	4b70      	ldr	r3, [pc, #448]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6f      	ldr	r2, [pc, #444]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b6d      	ldr	r3, [pc, #436]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6c      	ldr	r2, [pc, #432]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 80035a4:	4b69      	ldr	r3, [pc, #420]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a68      	ldr	r2, [pc, #416]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a65      	ldr	r2, [pc, #404]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fb54 	bl	8000c70 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd fb50 	bl	8000c70 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e207      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b5b      	ldr	r3, [pc, #364]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xc0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fd fb40 	bl	8000c70 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fd fb3c 	bl	8000c70 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1f3      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b51      	ldr	r3, [pc, #324]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0xe8>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b44      	ldr	r3, [pc, #272]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1c7      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4937      	ldr	r1, [pc, #220]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCC_OscConfig+0x244>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd faf5 	bl	8000c70 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368a:	f7fd faf1 	bl	8000c70 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1a8      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4925      	ldr	r1, [pc, #148]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCC_OscConfig+0x244>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd fad4 	bl	8000c70 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fd fad0 	bl	8000c70 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e187      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d036      	beq.n	8003764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_RCC_OscConfig+0x248>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fab4 	bl	8000c70 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd fab0 	bl	8000c70 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e167      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x200>
 800372a:	e01b      	b.n	8003764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_OscConfig+0x248>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fd fa9d 	bl	8000c70 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	e00e      	b.n	8003758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373a:	f7fd fa99 	bl	8000c70 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d907      	bls.n	8003758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e150      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
 800374c:	40023800 	.word	0x40023800
 8003750:	42470000 	.word	0x42470000
 8003754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800375a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ea      	bne.n	800373a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8097 	beq.w	80038a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003776:	4b81      	ldr	r3, [pc, #516]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4b7d      	ldr	r3, [pc, #500]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a7c      	ldr	r2, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b7a      	ldr	r3, [pc, #488]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b77      	ldr	r3, [pc, #476]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b74      	ldr	r3, [pc, #464]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fd fa59 	bl	8000c70 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fd fa55 	bl	8000c70 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e10c      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x2ea>
 80037e8:	4b64      	ldr	r3, [pc, #400]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a63      	ldr	r2, [pc, #396]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e01c      	b.n	8003830 <HAL_RCC_OscConfig+0x324>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x30c>
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a5e      	ldr	r2, [pc, #376]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	4b5c      	ldr	r3, [pc, #368]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a5b      	ldr	r2, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0x324>
 8003818:	4b58      	ldr	r3, [pc, #352]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6713      	str	r3, [r2, #112]	; 0x70
 8003824:	4b55      	ldr	r3, [pc, #340]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 0304 	bic.w	r3, r3, #4
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d015      	beq.n	8003864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd fa1a 	bl	8000c70 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fd fa16 	bl	8000c70 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0cb      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	4b49      	ldr	r3, [pc, #292]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ee      	beq.n	8003840 <HAL_RCC_OscConfig+0x334>
 8003862:	e014      	b.n	800388e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fd fa04 	bl	8000c70 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fd fa00 	bl	8000c70 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0b5      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003882:	4b3e      	ldr	r3, [pc, #248]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ee      	bne.n	800386c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	4a38      	ldr	r2, [pc, #224]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80a1 	beq.w	80039ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d05c      	beq.n	8003970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d141      	bne.n	8003942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd f9d4 	bl	8000c70 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fd f9d0 	bl	8000c70 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e087      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	3b01      	subs	r3, #1
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	491b      	ldr	r1, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fd f9a9 	bl	8000c70 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fd f9a5 	bl	8000c70 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e05c      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x416>
 8003940:	e054      	b.n	80039ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fd f992 	bl	8000c70 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003950:	f7fd f98e 	bl	8000c70 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e045      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x444>
 800396e:	e03d      	b.n	80039ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e038      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
 800397c:	40023800 	.word	0x40023800
 8003980:	40007000 	.word	0x40007000
 8003984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x4ec>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d028      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d121      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d11a      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d111      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	3b01      	subs	r3, #1
 80039d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0cc      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d90c      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b63      	ldr	r3, [pc, #396]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	494d      	ldr	r1, [pc, #308]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d044      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d119      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e06f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e067      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4934      	ldr	r1, [pc, #208]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7fd f8c0 	bl	8000c70 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fd f8bc 	bl	8000c70 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e04f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d20c      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4916      	ldr	r1, [pc, #88]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 f821 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490a      	ldr	r1, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd f820 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023c00 	.word	0x40023c00
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	080058bc 	.word	0x080058bc
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	20000004 	.word	0x20000004

08003bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bcc:	b090      	sub	sp, #64	; 0x40
 8003bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd8:	2300      	movs	r3, #0
 8003bda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be0:	4b59      	ldr	r3, [pc, #356]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d00d      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x40>
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	f200 80a1 	bhi.w	8003d34 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x34>
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfa:	e09b      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c00:	e09b      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c02:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c06:	e098      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c08:	4b4f      	ldr	r3, [pc, #316]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c12:	4b4d      	ldr	r3, [pc, #308]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	099b      	lsrs	r3, r3, #6
 8003c24:	2200      	movs	r2, #0
 8003c26:	623b      	str	r3, [r7, #32]
 8003c28:	627a      	str	r2, [r7, #36]	; 0x24
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c30:	2100      	movs	r1, #0
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c34:	fb03 f201 	mul.w	r2, r3, r1
 8003c38:	2300      	movs	r3, #0
 8003c3a:	fb00 f303 	mul.w	r3, r0, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a43      	ldr	r2, [pc, #268]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c42:	fba0 1202 	umull	r1, r2, r0, r2
 8003c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c48:	460a      	mov	r2, r1
 8003c4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4e:	4413      	add	r3, r2
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c54:	2200      	movs	r2, #0
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	61fa      	str	r2, [r7, #28]
 8003c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c62:	f7fc fb05 	bl	8000270 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6e:	e053      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c70:	4b35      	ldr	r3, [pc, #212]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	2200      	movs	r2, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	617a      	str	r2, [r7, #20]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c82:	f04f 0b00 	mov.w	fp, #0
 8003c86:	4652      	mov	r2, sl
 8003c88:	465b      	mov	r3, fp
 8003c8a:	f04f 0000 	mov.w	r0, #0
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	0159      	lsls	r1, r3, #5
 8003c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c98:	0150      	lsls	r0, r2, #5
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003ca2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cba:	ebb2 0408 	subs.w	r4, r2, r8
 8003cbe:	eb63 0509 	sbc.w	r5, r3, r9
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	00eb      	lsls	r3, r5, #3
 8003ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cd0:	00e2      	lsls	r2, r4, #3
 8003cd2:	4614      	mov	r4, r2
 8003cd4:	461d      	mov	r5, r3
 8003cd6:	eb14 030a 	adds.w	r3, r4, sl
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	eb45 030b 	adc.w	r3, r5, fp
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cee:	4629      	mov	r1, r5
 8003cf0:	028b      	lsls	r3, r1, #10
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	028a      	lsls	r2, r1, #10
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d02:	2200      	movs	r2, #0
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	60fa      	str	r2, [r7, #12]
 8003d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d0c:	f7fc fab0 	bl	8000270 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0c1b      	lsrs	r3, r3, #16
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	3301      	adds	r3, #1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3740      	adds	r7, #64	; 0x40
 8003d40:	46bd      	mov	sp, r7
 8003d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	017d7840 	.word	0x017d7840

08003d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000000 	.word	0x20000000

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d70:	f7ff fff0 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0a9b      	lsrs	r3, r3, #10
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4903      	ldr	r1, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	080058cc 	.word	0x080058cc

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d98:	f7ff ffdc 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0b5b      	lsrs	r3, r3, #13
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	080058cc 	.word	0x080058cc

08003dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e03f      	b.n	8003e4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fc fd78 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f929 	bl	8004058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b08a      	sub	sp, #40	; 0x28
 8003e5a:	af02      	add	r7, sp, #8
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d17c      	bne.n	8003f70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_UART_Transmit+0x2c>
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e075      	b.n	8003f72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_UART_Transmit+0x3e>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e06e      	b.n	8003f72 <HAL_UART_Transmit+0x11c>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2221      	movs	r2, #33	; 0x21
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eaa:	f7fc fee1 	bl	8000c70 <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	88fa      	ldrh	r2, [r7, #6]
 8003eb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	88fa      	ldrh	r2, [r7, #6]
 8003eba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d108      	bne.n	8003ed8 <HAL_UART_Transmit+0x82>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e003      	b.n	8003ee0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ee8:	e02a      	b.n	8003f40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f840 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e036      	b.n	8003f72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e007      	b.n	8003f32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	781a      	ldrb	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1cf      	bne.n	8003eea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2200      	movs	r2, #0
 8003f52:	2140      	movs	r1, #64	; 0x40
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f810 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e006      	b.n	8003f72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b090      	sub	sp, #64	; 0x40
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8a:	e050      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d04c      	beq.n	800402e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <UART_WaitOnFlagUntilTimeout+0x30>
 8003f9a:	f7fc fe69 	bl	8000c70 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d241      	bcs.n	800402e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fca:	637a      	str	r2, [r7, #52]	; 0x34
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	613b      	str	r3, [r7, #16]
   return(result);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ffe:	623a      	str	r2, [r7, #32]
 8004000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	69f9      	ldr	r1, [r7, #28]
 8004004:	6a3a      	ldr	r2, [r7, #32]
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	61bb      	str	r3, [r7, #24]
   return(result);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e5      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e00f      	b.n	800404e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	429a      	cmp	r2, r3
 800404a:	d09f      	beq.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3740      	adds	r7, #64	; 0x40
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800405c:	b0c0      	sub	sp, #256	; 0x100
 800405e:	af00      	add	r7, sp, #0
 8004060:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	ea40 0301 	orr.w	r3, r0, r1
 8004080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	431a      	orrs	r2, r3
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040b0:	f021 010c 	bic.w	r1, r1, #12
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040be:	430b      	orrs	r3, r1
 80040c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d2:	6999      	ldr	r1, [r3, #24]
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	ea40 0301 	orr.w	r3, r0, r1
 80040de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b8f      	ldr	r3, [pc, #572]	; (8004324 <UART_SetConfig+0x2cc>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d005      	beq.n	80040f8 <UART_SetConfig+0xa0>
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b8d      	ldr	r3, [pc, #564]	; (8004328 <UART_SetConfig+0x2d0>)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d104      	bne.n	8004102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7ff fe4c 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80040fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004100:	e003      	b.n	800410a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004102:	f7ff fe33 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8004106:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004114:	f040 810c 	bne.w	8004330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800411c:	2200      	movs	r2, #0
 800411e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004122:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800412a:	4622      	mov	r2, r4
 800412c:	462b      	mov	r3, r5
 800412e:	1891      	adds	r1, r2, r2
 8004130:	65b9      	str	r1, [r7, #88]	; 0x58
 8004132:	415b      	adcs	r3, r3
 8004134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800413a:	4621      	mov	r1, r4
 800413c:	eb12 0801 	adds.w	r8, r2, r1
 8004140:	4629      	mov	r1, r5
 8004142:	eb43 0901 	adc.w	r9, r3, r1
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415a:	4690      	mov	r8, r2
 800415c:	4699      	mov	r9, r3
 800415e:	4623      	mov	r3, r4
 8004160:	eb18 0303 	adds.w	r3, r8, r3
 8004164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004168:	462b      	mov	r3, r5
 800416a:	eb49 0303 	adc.w	r3, r9, r3
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800417e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004186:	460b      	mov	r3, r1
 8004188:	18db      	adds	r3, r3, r3
 800418a:	653b      	str	r3, [r7, #80]	; 0x50
 800418c:	4613      	mov	r3, r2
 800418e:	eb42 0303 	adc.w	r3, r2, r3
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
 8004194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800419c:	f7fc f868 	bl	8000270 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4b61      	ldr	r3, [pc, #388]	; (800432c <UART_SetConfig+0x2d4>)
 80041a6:	fba3 2302 	umull	r2, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	011c      	lsls	r4, r3, #4
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041c8:	415b      	adcs	r3, r3
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041d0:	4641      	mov	r1, r8
 80041d2:	eb12 0a01 	adds.w	sl, r2, r1
 80041d6:	4649      	mov	r1, r9
 80041d8:	eb43 0b01 	adc.w	fp, r3, r1
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f0:	4692      	mov	sl, r2
 80041f2:	469b      	mov	fp, r3
 80041f4:	4643      	mov	r3, r8
 80041f6:	eb1a 0303 	adds.w	r3, sl, r3
 80041fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041fe:	464b      	mov	r3, r9
 8004200:	eb4b 0303 	adc.w	r3, fp, r3
 8004204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004214:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800421c:	460b      	mov	r3, r1
 800421e:	18db      	adds	r3, r3, r3
 8004220:	643b      	str	r3, [r7, #64]	; 0x40
 8004222:	4613      	mov	r3, r2
 8004224:	eb42 0303 	adc.w	r3, r2, r3
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
 800422a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800422e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004232:	f7fc f81d 	bl	8000270 <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4611      	mov	r1, r2
 800423c:	4b3b      	ldr	r3, [pc, #236]	; (800432c <UART_SetConfig+0x2d4>)
 800423e:	fba3 2301 	umull	r2, r3, r3, r1
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2264      	movs	r2, #100	; 0x64
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	1acb      	subs	r3, r1, r3
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <UART_SetConfig+0x2d4>)
 8004254:	fba3 2302 	umull	r2, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004260:	441c      	add	r4, r3
 8004262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800426c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004274:	4642      	mov	r2, r8
 8004276:	464b      	mov	r3, r9
 8004278:	1891      	adds	r1, r2, r2
 800427a:	63b9      	str	r1, [r7, #56]	; 0x38
 800427c:	415b      	adcs	r3, r3
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004284:	4641      	mov	r1, r8
 8004286:	1851      	adds	r1, r2, r1
 8004288:	6339      	str	r1, [r7, #48]	; 0x30
 800428a:	4649      	mov	r1, r9
 800428c:	414b      	adcs	r3, r1
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800429c:	4659      	mov	r1, fp
 800429e:	00cb      	lsls	r3, r1, #3
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a6:	4651      	mov	r1, sl
 80042a8:	00ca      	lsls	r2, r1, #3
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	4642      	mov	r2, r8
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042b8:	464b      	mov	r3, r9
 80042ba:	460a      	mov	r2, r1
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042d8:	460b      	mov	r3, r1
 80042da:	18db      	adds	r3, r3, r3
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	4613      	mov	r3, r2
 80042e0:	eb42 0303 	adc.w	r3, r2, r3
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ee:	f7fb ffbf 	bl	8000270 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <UART_SetConfig+0x2d4>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	; 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	3332      	adds	r3, #50	; 0x32
 800430a:	4a08      	ldr	r2, [pc, #32]	; (800432c <UART_SetConfig+0x2d4>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 0207 	and.w	r2, r3, #7
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4422      	add	r2, r4
 800431e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004320:	e105      	b.n	800452e <UART_SetConfig+0x4d6>
 8004322:	bf00      	nop
 8004324:	40011000 	.word	0x40011000
 8004328:	40011400 	.word	0x40011400
 800432c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004334:	2200      	movs	r2, #0
 8004336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800433a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800433e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004342:	4642      	mov	r2, r8
 8004344:	464b      	mov	r3, r9
 8004346:	1891      	adds	r1, r2, r2
 8004348:	6239      	str	r1, [r7, #32]
 800434a:	415b      	adcs	r3, r3
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004352:	4641      	mov	r1, r8
 8004354:	1854      	adds	r4, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb43 0501 	adc.w	r5, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	00eb      	lsls	r3, r5, #3
 8004366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436a:	00e2      	lsls	r2, r4, #3
 800436c:	4614      	mov	r4, r2
 800436e:	461d      	mov	r5, r3
 8004370:	4643      	mov	r3, r8
 8004372:	18e3      	adds	r3, r4, r3
 8004374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004378:	464b      	mov	r3, r9
 800437a:	eb45 0303 	adc.w	r3, r5, r3
 800437e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800438e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800439e:	4629      	mov	r1, r5
 80043a0:	008b      	lsls	r3, r1, #2
 80043a2:	4621      	mov	r1, r4
 80043a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a8:	4621      	mov	r1, r4
 80043aa:	008a      	lsls	r2, r1, #2
 80043ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043b0:	f7fb ff5e 	bl	8000270 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4b60      	ldr	r3, [pc, #384]	; (800453c <UART_SetConfig+0x4e4>)
 80043ba:	fba3 2302 	umull	r2, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	011c      	lsls	r4, r3, #4
 80043c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	1891      	adds	r1, r2, r2
 80043da:	61b9      	str	r1, [r7, #24]
 80043dc:	415b      	adcs	r3, r3
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e4:	4641      	mov	r1, r8
 80043e6:	1851      	adds	r1, r2, r1
 80043e8:	6139      	str	r1, [r7, #16]
 80043ea:	4649      	mov	r1, r9
 80043ec:	414b      	adcs	r3, r1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043fc:	4659      	mov	r1, fp
 80043fe:	00cb      	lsls	r3, r1, #3
 8004400:	4651      	mov	r1, sl
 8004402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004406:	4651      	mov	r1, sl
 8004408:	00ca      	lsls	r2, r1, #3
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	4603      	mov	r3, r0
 8004410:	4642      	mov	r2, r8
 8004412:	189b      	adds	r3, r3, r2
 8004414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004418:	464b      	mov	r3, r9
 800441a:	460a      	mov	r2, r1
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	67bb      	str	r3, [r7, #120]	; 0x78
 800442e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800443c:	4649      	mov	r1, r9
 800443e:	008b      	lsls	r3, r1, #2
 8004440:	4641      	mov	r1, r8
 8004442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004446:	4641      	mov	r1, r8
 8004448:	008a      	lsls	r2, r1, #2
 800444a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800444e:	f7fb ff0f 	bl	8000270 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <UART_SetConfig+0x4e4>)
 8004458:	fba3 1302 	umull	r1, r3, r3, r2
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	2164      	movs	r1, #100	; 0x64
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	3332      	adds	r3, #50	; 0x32
 800446a:	4a34      	ldr	r2, [pc, #208]	; (800453c <UART_SetConfig+0x4e4>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004476:	441c      	add	r4, r3
 8004478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800447c:	2200      	movs	r2, #0
 800447e:	673b      	str	r3, [r7, #112]	; 0x70
 8004480:	677a      	str	r2, [r7, #116]	; 0x74
 8004482:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004486:	4642      	mov	r2, r8
 8004488:	464b      	mov	r3, r9
 800448a:	1891      	adds	r1, r2, r2
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	415b      	adcs	r3, r3
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004496:	4641      	mov	r1, r8
 8004498:	1851      	adds	r1, r2, r1
 800449a:	6039      	str	r1, [r7, #0]
 800449c:	4649      	mov	r1, r9
 800449e:	414b      	adcs	r3, r1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ae:	4659      	mov	r1, fp
 80044b0:	00cb      	lsls	r3, r1, #3
 80044b2:	4651      	mov	r1, sl
 80044b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b8:	4651      	mov	r1, sl
 80044ba:	00ca      	lsls	r2, r1, #3
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	4603      	mov	r3, r0
 80044c2:	4642      	mov	r2, r8
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c8:	464b      	mov	r3, r9
 80044ca:	460a      	mov	r2, r1
 80044cc:	eb42 0303 	adc.w	r3, r2, r3
 80044d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	663b      	str	r3, [r7, #96]	; 0x60
 80044dc:	667a      	str	r2, [r7, #100]	; 0x64
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044ea:	4649      	mov	r1, r9
 80044ec:	008b      	lsls	r3, r1, #2
 80044ee:	4641      	mov	r1, r8
 80044f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f4:	4641      	mov	r1, r8
 80044f6:	008a      	lsls	r2, r1, #2
 80044f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044fc:	f7fb feb8 	bl	8000270 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4b0d      	ldr	r3, [pc, #52]	; (800453c <UART_SetConfig+0x4e4>)
 8004506:	fba3 1302 	umull	r1, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2164      	movs	r1, #100	; 0x64
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	3332      	adds	r3, #50	; 0x32
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <UART_SetConfig+0x4e4>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4422      	add	r2, r4
 800452c:	609a      	str	r2, [r3, #8]
}
 800452e:	bf00      	nop
 8004530:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004534:	46bd      	mov	sp, r7
 8004536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453a:	bf00      	nop
 800453c:	51eb851f 	.word	0x51eb851f

08004540 <pca9685_enable>:
uint8_t devId = 0x80;
uint8_t TxBuffer[0];



void pca9685_enable(int8_t state){
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
	if(state){
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <pca9685_enable+0x24>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004552:	2200      	movs	r2, #0
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	4809      	ldr	r0, [pc, #36]	; (800457c <pca9685_enable+0x3c>)
 8004558:	f7fc fe98 	bl	800128c <HAL_GPIO_WritePin>
		printf("pca9685 was turned on\r\n");
 800455c:	4808      	ldr	r0, [pc, #32]	; (8004580 <pca9685_enable+0x40>)
 800455e:	f000 f9df 	bl	8004920 <puts>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		printf("pca9685 was turned off\r\n");
	}
}
 8004562:	e007      	b.n	8004574 <pca9685_enable+0x34>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004564:	2201      	movs	r2, #1
 8004566:	2180      	movs	r1, #128	; 0x80
 8004568:	4804      	ldr	r0, [pc, #16]	; (800457c <pca9685_enable+0x3c>)
 800456a:	f7fc fe8f 	bl	800128c <HAL_GPIO_WritePin>
		printf("pca9685 was turned off\r\n");
 800456e:	4805      	ldr	r0, [pc, #20]	; (8004584 <pca9685_enable+0x44>)
 8004570:	f000 f9d6 	bl	8004920 <puts>
}
 8004574:	bf00      	nop
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40020400 	.word	0x40020400
 8004580:	08005834 	.word	0x08005834
 8004584:	0800584c 	.word	0x0800584c

08004588 <pca9685_sleep>:

void pca9685_sleep(int8_t state){
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af02      	add	r7, sp, #8
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
	if(state){
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d011      	beq.n	80045be <pca9685_sleep+0x36>
	  TxBuffer[0] = 0x00;
 800459a:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <pca9685_sleep+0x60>)
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
	  TxBuffer[1] = 0x11;
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <pca9685_sleep+0x60>)
 80045a2:	2211      	movs	r2, #17
 80045a4:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <pca9685_sleep+0x64>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	b299      	uxth	r1, r3
 80045ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2302      	movs	r3, #2
 80045b4:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <pca9685_sleep+0x60>)
 80045b6:	480e      	ldr	r0, [pc, #56]	; (80045f0 <pca9685_sleep+0x68>)
 80045b8:	f7fc ffc6 	bl	8001548 <HAL_I2C_Master_Transmit>
	else{
	  TxBuffer[0] = 0x00;
	  TxBuffer[1] = 0x01;
	  HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
	}
}
 80045bc:	e010      	b.n	80045e0 <pca9685_sleep+0x58>
	  TxBuffer[0] = 0x00;
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <pca9685_sleep+0x60>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
	  TxBuffer[1] = 0x01;
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <pca9685_sleep+0x60>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <pca9685_sleep+0x64>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b299      	uxth	r1, r3
 80045d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2302      	movs	r3, #2
 80045d8:	4a03      	ldr	r2, [pc, #12]	; (80045e8 <pca9685_sleep+0x60>)
 80045da:	4805      	ldr	r0, [pc, #20]	; (80045f0 <pca9685_sleep+0x68>)
 80045dc:	f7fc ffb4 	bl	8001548 <HAL_I2C_Master_Transmit>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	2000012c 	.word	0x2000012c
 80045ec:	20000009 	.word	0x20000009
 80045f0:	2000008c 	.word	0x2000008c

080045f4 <pca9685_frequency>:

void pca9685_frequency(uint16_t freq){ // 24...1526
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
	if(freq > 1526){
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8004604:	4293      	cmp	r3, r2
 8004606:	d903      	bls.n	8004610 <pca9685_frequency+0x1c>
		freq = 1526;
 8004608:	f240 53f6 	movw	r3, #1526	; 0x5f6
 800460c:	80fb      	strh	r3, [r7, #6]
 800460e:	e004      	b.n	800461a <pca9685_frequency+0x26>
	}
	else if (freq < 24){
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	2b17      	cmp	r3, #23
 8004614:	d801      	bhi.n	800461a <pca9685_frequency+0x26>
		freq = 24;
 8004616:	2318      	movs	r3, #24
 8004618:	80fb      	strh	r3, [r7, #6]
	}
	uint8_t PRE_SCALE = ((25000000 / 4096) / freq) - 1;
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	f241 72d7 	movw	r2, #6103	; 0x17d7
 8004620:	fb92 f3f3 	sdiv	r3, r2, r3
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
	pca9685_sleep(1);
 800462a:	2001      	movs	r0, #1
 800462c:	f7ff ffac 	bl	8004588 <pca9685_sleep>
	TxBuffer[0] = PRE_SCALE_ADDRESS;
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <pca9685_frequency+0x78>)
 8004632:	22fe      	movs	r2, #254	; 0xfe
 8004634:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] = PRE_SCALE;
 8004636:	4a0d      	ldr	r2, [pc, #52]	; (800466c <pca9685_frequency+0x78>)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <pca9685_frequency+0x7c>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b299      	uxth	r1, r3
 8004642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2302      	movs	r3, #2
 800464a:	4a08      	ldr	r2, [pc, #32]	; (800466c <pca9685_frequency+0x78>)
 800464c:	4809      	ldr	r0, [pc, #36]	; (8004674 <pca9685_frequency+0x80>)
 800464e:	f7fc ff7b 	bl	8001548 <HAL_I2C_Master_Transmit>
	pca9685_sleep(0);
 8004652:	2000      	movs	r0, #0
 8004654:	f7ff ff98 	bl	8004588 <pca9685_sleep>
	printf("Frequency was set: %d Hz\r\n", freq);
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	4619      	mov	r1, r3
 800465c:	4806      	ldr	r0, [pc, #24]	; (8004678 <pca9685_frequency+0x84>)
 800465e:	f000 f8d9 	bl	8004814 <iprintf>

}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	2000012c 	.word	0x2000012c
 8004670:	20000009 	.word	0x20000009
 8004674:	2000008c 	.word	0x2000008c
 8004678:	08005864 	.word	0x08005864

0800467c <pca9685_setChannelPWM>:

void pca9685_setChannelPWM(uint8_t channelNum, int8_t duty){ //channelNum = 0...15, duty = 0...100
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af02      	add	r7, sp, #8
 8004682:	4603      	mov	r3, r0
 8004684:	460a      	mov	r2, r1
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	4613      	mov	r3, r2
 800468a:	71bb      	strb	r3, [r7, #6]

	if(duty > 100){
 800468c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004690:	2b64      	cmp	r3, #100	; 0x64
 8004692:	dd02      	ble.n	800469a <pca9685_setChannelPWM+0x1e>
		duty = 100;
 8004694:	2364      	movs	r3, #100	; 0x64
 8004696:	71bb      	strb	r3, [r7, #6]
 8004698:	e005      	b.n	80046a6 <pca9685_setChannelPWM+0x2a>
	}
	else if (duty < 0){
 800469a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da01      	bge.n	80046a6 <pca9685_setChannelPWM+0x2a>
		duty = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	71bb      	strb	r3, [r7, #6]
	}

	if(channelNum > 15){
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	2b0f      	cmp	r3, #15
 80046aa:	d901      	bls.n	80046b0 <pca9685_setChannelPWM+0x34>
		channelNum = 15;
 80046ac:	230f      	movs	r3, #15
 80046ae:	71fb      	strb	r3, [r7, #7]
	}
	else if (channelNum < 0){
		channelNum = 0;
	}

	uint8_t LEDn_ON_L = LED0_ON_L + (channelNum * 4);
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	3306      	adds	r3, #6
 80046b8:	73fb      	strb	r3, [r7, #15]
	uint8_t LEDn_ON_H = LED0_ON_H + (channelNum * 4);
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	3307      	adds	r3, #7
 80046c2:	73bb      	strb	r3, [r7, #14]
	uint8_t LEDn_OFF_L = LED0_OFF_L + (channelNum * 4);
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	3302      	adds	r3, #2
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	737b      	strb	r3, [r7, #13]
	uint8_t LEDn_OFF_H = LED0_OFF_H + (channelNum * 4);
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3309      	adds	r3, #9
 80046d6:	733b      	strb	r3, [r7, #12]

	uint16_t valueOFF = (duty * 4095) / 100;
 80046d8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80046dc:	4613      	mov	r3, r2
 80046de:	031b      	lsls	r3, r3, #12
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	4a2e      	ldr	r2, [pc, #184]	; (800479c <pca9685_setChannelPWM+0x120>)
 80046e4:	fb82 1203 	smull	r1, r2, r2, r3
 80046e8:	1152      	asrs	r2, r2, #5
 80046ea:	17db      	asrs	r3, r3, #31
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	817b      	strh	r3, [r7, #10]
	uint8_t highByteOFF = (valueOFF >> 8) & 0xFF;
 80046f0:	897b      	ldrh	r3, [r7, #10]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	727b      	strb	r3, [r7, #9]
	uint8_t lowByteOFF = valueOFF & 0xFF;
 80046f8:	897b      	ldrh	r3, [r7, #10]
 80046fa:	723b      	strb	r3, [r7, #8]

	TxBuffer[0] = LEDn_ON_L;
 80046fc:	4a28      	ldr	r2, [pc, #160]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	7013      	strb	r3, [r2, #0]
	TxBuffer[1] = 0x00;
 8004702:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 8004704:	2200      	movs	r2, #0
 8004706:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 8004708:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <pca9685_setChannelPWM+0x128>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b299      	uxth	r1, r3
 800470e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2302      	movs	r3, #2
 8004716:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 8004718:	4823      	ldr	r0, [pc, #140]	; (80047a8 <pca9685_setChannelPWM+0x12c>)
 800471a:	f7fc ff15 	bl	8001548 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = LEDn_ON_H;
 800471e:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 8004720:	7bbb      	ldrb	r3, [r7, #14]
 8004722:	7013      	strb	r3, [r2, #0]
	TxBuffer[1] = 0x00;
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 8004726:	2200      	movs	r2, #0
 8004728:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 800472a:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <pca9685_setChannelPWM+0x128>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	b299      	uxth	r1, r3
 8004730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	2302      	movs	r3, #2
 8004738:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 800473a:	481b      	ldr	r0, [pc, #108]	; (80047a8 <pca9685_setChannelPWM+0x12c>)
 800473c:	f7fc ff04 	bl	8001548 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = LEDn_OFF_L;
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 8004742:	7b7b      	ldrb	r3, [r7, #13]
 8004744:	7013      	strb	r3, [r2, #0]
	TxBuffer[1] = lowByteOFF;
 8004746:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 8004748:	7a3b      	ldrb	r3, [r7, #8]
 800474a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 800474c:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <pca9685_setChannelPWM+0x128>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b299      	uxth	r1, r3
 8004752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2302      	movs	r3, #2
 800475a:	4a11      	ldr	r2, [pc, #68]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 800475c:	4812      	ldr	r0, [pc, #72]	; (80047a8 <pca9685_setChannelPWM+0x12c>)
 800475e:	f7fc fef3 	bl	8001548 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = LEDn_OFF_H;
 8004762:	4a0f      	ldr	r2, [pc, #60]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 8004764:	7b3b      	ldrb	r3, [r7, #12]
 8004766:	7013      	strb	r3, [r2, #0]
	TxBuffer[1] = highByteOFF;
 8004768:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 800476a:	7a7b      	ldrb	r3, [r7, #9]
 800476c:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <pca9685_setChannelPWM+0x128>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b299      	uxth	r1, r3
 8004774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2302      	movs	r3, #2
 800477c:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <pca9685_setChannelPWM+0x124>)
 800477e:	480a      	ldr	r0, [pc, #40]	; (80047a8 <pca9685_setChannelPWM+0x12c>)
 8004780:	f7fc fee2 	bl	8001548 <HAL_I2C_Master_Transmit>

	printf("PWM was set on channel %d with duty %d %\r\n", channelNum, duty);
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800478a:	4619      	mov	r1, r3
 800478c:	4807      	ldr	r0, [pc, #28]	; (80047ac <pca9685_setChannelPWM+0x130>)
 800478e:	f000 f841 	bl	8004814 <iprintf>
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	51eb851f 	.word	0x51eb851f
 80047a0:	2000012c 	.word	0x2000012c
 80047a4:	20000009 	.word	0x20000009
 80047a8:	2000008c 	.word	0x2000008c
 80047ac:	08005880 	.word	0x08005880

080047b0 <__errno>:
 80047b0:	4b01      	ldr	r3, [pc, #4]	; (80047b8 <__errno+0x8>)
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	2000000c 	.word	0x2000000c

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4d0d      	ldr	r5, [pc, #52]	; (80047f4 <__libc_init_array+0x38>)
 80047c0:	4c0d      	ldr	r4, [pc, #52]	; (80047f8 <__libc_init_array+0x3c>)
 80047c2:	1b64      	subs	r4, r4, r5
 80047c4:	10a4      	asrs	r4, r4, #2
 80047c6:	2600      	movs	r6, #0
 80047c8:	42a6      	cmp	r6, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	4d0b      	ldr	r5, [pc, #44]	; (80047fc <__libc_init_array+0x40>)
 80047ce:	4c0c      	ldr	r4, [pc, #48]	; (8004800 <__libc_init_array+0x44>)
 80047d0:	f001 f824 	bl	800581c <_init>
 80047d4:	1b64      	subs	r4, r4, r5
 80047d6:	10a4      	asrs	r4, r4, #2
 80047d8:	2600      	movs	r6, #0
 80047da:	42a6      	cmp	r6, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e4:	4798      	blx	r3
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ee:	4798      	blx	r3
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	08005974 	.word	0x08005974
 80047f8:	08005974 	.word	0x08005974
 80047fc:	08005974 	.word	0x08005974
 8004800:	08005978 	.word	0x08005978

08004804 <memset>:
 8004804:	4402      	add	r2, r0
 8004806:	4603      	mov	r3, r0
 8004808:	4293      	cmp	r3, r2
 800480a:	d100      	bne.n	800480e <memset+0xa>
 800480c:	4770      	bx	lr
 800480e:	f803 1b01 	strb.w	r1, [r3], #1
 8004812:	e7f9      	b.n	8004808 <memset+0x4>

08004814 <iprintf>:
 8004814:	b40f      	push	{r0, r1, r2, r3}
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <iprintf+0x2c>)
 8004818:	b513      	push	{r0, r1, r4, lr}
 800481a:	681c      	ldr	r4, [r3, #0]
 800481c:	b124      	cbz	r4, 8004828 <iprintf+0x14>
 800481e:	69a3      	ldr	r3, [r4, #24]
 8004820:	b913      	cbnz	r3, 8004828 <iprintf+0x14>
 8004822:	4620      	mov	r0, r4
 8004824:	f000 fa5e 	bl	8004ce4 <__sinit>
 8004828:	ab05      	add	r3, sp, #20
 800482a:	9a04      	ldr	r2, [sp, #16]
 800482c:	68a1      	ldr	r1, [r4, #8]
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fc67 	bl	8005104 <_vfiprintf_r>
 8004836:	b002      	add	sp, #8
 8004838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr
 8004840:	2000000c 	.word	0x2000000c

08004844 <_puts_r>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	460e      	mov	r6, r1
 8004848:	4605      	mov	r5, r0
 800484a:	b118      	cbz	r0, 8004854 <_puts_r+0x10>
 800484c:	6983      	ldr	r3, [r0, #24]
 800484e:	b90b      	cbnz	r3, 8004854 <_puts_r+0x10>
 8004850:	f000 fa48 	bl	8004ce4 <__sinit>
 8004854:	69ab      	ldr	r3, [r5, #24]
 8004856:	68ac      	ldr	r4, [r5, #8]
 8004858:	b913      	cbnz	r3, 8004860 <_puts_r+0x1c>
 800485a:	4628      	mov	r0, r5
 800485c:	f000 fa42 	bl	8004ce4 <__sinit>
 8004860:	4b2c      	ldr	r3, [pc, #176]	; (8004914 <_puts_r+0xd0>)
 8004862:	429c      	cmp	r4, r3
 8004864:	d120      	bne.n	80048a8 <_puts_r+0x64>
 8004866:	686c      	ldr	r4, [r5, #4]
 8004868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800486a:	07db      	lsls	r3, r3, #31
 800486c:	d405      	bmi.n	800487a <_puts_r+0x36>
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	0598      	lsls	r0, r3, #22
 8004872:	d402      	bmi.n	800487a <_puts_r+0x36>
 8004874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004876:	f000 fad3 	bl	8004e20 <__retarget_lock_acquire_recursive>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	0719      	lsls	r1, r3, #28
 800487e:	d51d      	bpl.n	80048bc <_puts_r+0x78>
 8004880:	6923      	ldr	r3, [r4, #16]
 8004882:	b1db      	cbz	r3, 80048bc <_puts_r+0x78>
 8004884:	3e01      	subs	r6, #1
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800488c:	3b01      	subs	r3, #1
 800488e:	60a3      	str	r3, [r4, #8]
 8004890:	bb39      	cbnz	r1, 80048e2 <_puts_r+0x9e>
 8004892:	2b00      	cmp	r3, #0
 8004894:	da38      	bge.n	8004908 <_puts_r+0xc4>
 8004896:	4622      	mov	r2, r4
 8004898:	210a      	movs	r1, #10
 800489a:	4628      	mov	r0, r5
 800489c:	f000 f848 	bl	8004930 <__swbuf_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d011      	beq.n	80048c8 <_puts_r+0x84>
 80048a4:	250a      	movs	r5, #10
 80048a6:	e011      	b.n	80048cc <_puts_r+0x88>
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <_puts_r+0xd4>)
 80048aa:	429c      	cmp	r4, r3
 80048ac:	d101      	bne.n	80048b2 <_puts_r+0x6e>
 80048ae:	68ac      	ldr	r4, [r5, #8]
 80048b0:	e7da      	b.n	8004868 <_puts_r+0x24>
 80048b2:	4b1a      	ldr	r3, [pc, #104]	; (800491c <_puts_r+0xd8>)
 80048b4:	429c      	cmp	r4, r3
 80048b6:	bf08      	it	eq
 80048b8:	68ec      	ldreq	r4, [r5, #12]
 80048ba:	e7d5      	b.n	8004868 <_puts_r+0x24>
 80048bc:	4621      	mov	r1, r4
 80048be:	4628      	mov	r0, r5
 80048c0:	f000 f888 	bl	80049d4 <__swsetup_r>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d0dd      	beq.n	8004884 <_puts_r+0x40>
 80048c8:	f04f 35ff 	mov.w	r5, #4294967295
 80048cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048ce:	07da      	lsls	r2, r3, #31
 80048d0:	d405      	bmi.n	80048de <_puts_r+0x9a>
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	059b      	lsls	r3, r3, #22
 80048d6:	d402      	bmi.n	80048de <_puts_r+0x9a>
 80048d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048da:	f000 faa2 	bl	8004e22 <__retarget_lock_release_recursive>
 80048de:	4628      	mov	r0, r5
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da04      	bge.n	80048f0 <_puts_r+0xac>
 80048e6:	69a2      	ldr	r2, [r4, #24]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	dc06      	bgt.n	80048fa <_puts_r+0xb6>
 80048ec:	290a      	cmp	r1, #10
 80048ee:	d004      	beq.n	80048fa <_puts_r+0xb6>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	6022      	str	r2, [r4, #0]
 80048f6:	7019      	strb	r1, [r3, #0]
 80048f8:	e7c5      	b.n	8004886 <_puts_r+0x42>
 80048fa:	4622      	mov	r2, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 f817 	bl	8004930 <__swbuf_r>
 8004902:	3001      	adds	r0, #1
 8004904:	d1bf      	bne.n	8004886 <_puts_r+0x42>
 8004906:	e7df      	b.n	80048c8 <_puts_r+0x84>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	250a      	movs	r5, #10
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	6022      	str	r2, [r4, #0]
 8004910:	701d      	strb	r5, [r3, #0]
 8004912:	e7db      	b.n	80048cc <_puts_r+0x88>
 8004914:	080058f8 	.word	0x080058f8
 8004918:	08005918 	.word	0x08005918
 800491c:	080058d8 	.word	0x080058d8

08004920 <puts>:
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <puts+0xc>)
 8004922:	4601      	mov	r1, r0
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	f7ff bf8d 	b.w	8004844 <_puts_r>
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c

08004930 <__swbuf_r>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	460e      	mov	r6, r1
 8004934:	4614      	mov	r4, r2
 8004936:	4605      	mov	r5, r0
 8004938:	b118      	cbz	r0, 8004942 <__swbuf_r+0x12>
 800493a:	6983      	ldr	r3, [r0, #24]
 800493c:	b90b      	cbnz	r3, 8004942 <__swbuf_r+0x12>
 800493e:	f000 f9d1 	bl	8004ce4 <__sinit>
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <__swbuf_r+0x98>)
 8004944:	429c      	cmp	r4, r3
 8004946:	d12b      	bne.n	80049a0 <__swbuf_r+0x70>
 8004948:	686c      	ldr	r4, [r5, #4]
 800494a:	69a3      	ldr	r3, [r4, #24]
 800494c:	60a3      	str	r3, [r4, #8]
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	071a      	lsls	r2, r3, #28
 8004952:	d52f      	bpl.n	80049b4 <__swbuf_r+0x84>
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	b36b      	cbz	r3, 80049b4 <__swbuf_r+0x84>
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	6820      	ldr	r0, [r4, #0]
 800495c:	1ac0      	subs	r0, r0, r3
 800495e:	6963      	ldr	r3, [r4, #20]
 8004960:	b2f6      	uxtb	r6, r6
 8004962:	4283      	cmp	r3, r0
 8004964:	4637      	mov	r7, r6
 8004966:	dc04      	bgt.n	8004972 <__swbuf_r+0x42>
 8004968:	4621      	mov	r1, r4
 800496a:	4628      	mov	r0, r5
 800496c:	f000 f926 	bl	8004bbc <_fflush_r>
 8004970:	bb30      	cbnz	r0, 80049c0 <__swbuf_r+0x90>
 8004972:	68a3      	ldr	r3, [r4, #8]
 8004974:	3b01      	subs	r3, #1
 8004976:	60a3      	str	r3, [r4, #8]
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	6022      	str	r2, [r4, #0]
 800497e:	701e      	strb	r6, [r3, #0]
 8004980:	6963      	ldr	r3, [r4, #20]
 8004982:	3001      	adds	r0, #1
 8004984:	4283      	cmp	r3, r0
 8004986:	d004      	beq.n	8004992 <__swbuf_r+0x62>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	07db      	lsls	r3, r3, #31
 800498c:	d506      	bpl.n	800499c <__swbuf_r+0x6c>
 800498e:	2e0a      	cmp	r6, #10
 8004990:	d104      	bne.n	800499c <__swbuf_r+0x6c>
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f911 	bl	8004bbc <_fflush_r>
 800499a:	b988      	cbnz	r0, 80049c0 <__swbuf_r+0x90>
 800499c:	4638      	mov	r0, r7
 800499e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <__swbuf_r+0x9c>)
 80049a2:	429c      	cmp	r4, r3
 80049a4:	d101      	bne.n	80049aa <__swbuf_r+0x7a>
 80049a6:	68ac      	ldr	r4, [r5, #8]
 80049a8:	e7cf      	b.n	800494a <__swbuf_r+0x1a>
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <__swbuf_r+0xa0>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	bf08      	it	eq
 80049b0:	68ec      	ldreq	r4, [r5, #12]
 80049b2:	e7ca      	b.n	800494a <__swbuf_r+0x1a>
 80049b4:	4621      	mov	r1, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 f80c 	bl	80049d4 <__swsetup_r>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d0cb      	beq.n	8004958 <__swbuf_r+0x28>
 80049c0:	f04f 37ff 	mov.w	r7, #4294967295
 80049c4:	e7ea      	b.n	800499c <__swbuf_r+0x6c>
 80049c6:	bf00      	nop
 80049c8:	080058f8 	.word	0x080058f8
 80049cc:	08005918 	.word	0x08005918
 80049d0:	080058d8 	.word	0x080058d8

080049d4 <__swsetup_r>:
 80049d4:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <__swsetup_r+0xcc>)
 80049d6:	b570      	push	{r4, r5, r6, lr}
 80049d8:	681d      	ldr	r5, [r3, #0]
 80049da:	4606      	mov	r6, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	b125      	cbz	r5, 80049ea <__swsetup_r+0x16>
 80049e0:	69ab      	ldr	r3, [r5, #24]
 80049e2:	b913      	cbnz	r3, 80049ea <__swsetup_r+0x16>
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 f97d 	bl	8004ce4 <__sinit>
 80049ea:	4b2e      	ldr	r3, [pc, #184]	; (8004aa4 <__swsetup_r+0xd0>)
 80049ec:	429c      	cmp	r4, r3
 80049ee:	d10f      	bne.n	8004a10 <__swsetup_r+0x3c>
 80049f0:	686c      	ldr	r4, [r5, #4]
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049f8:	0719      	lsls	r1, r3, #28
 80049fa:	d42c      	bmi.n	8004a56 <__swsetup_r+0x82>
 80049fc:	06dd      	lsls	r5, r3, #27
 80049fe:	d411      	bmi.n	8004a24 <__swsetup_r+0x50>
 8004a00:	2309      	movs	r3, #9
 8004a02:	6033      	str	r3, [r6, #0]
 8004a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a08:	81a3      	strh	r3, [r4, #12]
 8004a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0e:	e03e      	b.n	8004a8e <__swsetup_r+0xba>
 8004a10:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <__swsetup_r+0xd4>)
 8004a12:	429c      	cmp	r4, r3
 8004a14:	d101      	bne.n	8004a1a <__swsetup_r+0x46>
 8004a16:	68ac      	ldr	r4, [r5, #8]
 8004a18:	e7eb      	b.n	80049f2 <__swsetup_r+0x1e>
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <__swsetup_r+0xd8>)
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	bf08      	it	eq
 8004a20:	68ec      	ldreq	r4, [r5, #12]
 8004a22:	e7e6      	b.n	80049f2 <__swsetup_r+0x1e>
 8004a24:	0758      	lsls	r0, r3, #29
 8004a26:	d512      	bpl.n	8004a4e <__swsetup_r+0x7a>
 8004a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a2a:	b141      	cbz	r1, 8004a3e <__swsetup_r+0x6a>
 8004a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a30:	4299      	cmp	r1, r3
 8004a32:	d002      	beq.n	8004a3a <__swsetup_r+0x66>
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 fa5b 	bl	8004ef0 <_free_r>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	2300      	movs	r3, #0
 8004a48:	6063      	str	r3, [r4, #4]
 8004a4a:	6923      	ldr	r3, [r4, #16]
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f043 0308 	orr.w	r3, r3, #8
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	b94b      	cbnz	r3, 8004a6e <__swsetup_r+0x9a>
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a64:	d003      	beq.n	8004a6e <__swsetup_r+0x9a>
 8004a66:	4621      	mov	r1, r4
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f000 fa01 	bl	8004e70 <__smakebuf_r>
 8004a6e:	89a0      	ldrh	r0, [r4, #12]
 8004a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a74:	f010 0301 	ands.w	r3, r0, #1
 8004a78:	d00a      	beq.n	8004a90 <__swsetup_r+0xbc>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60a3      	str	r3, [r4, #8]
 8004a7e:	6963      	ldr	r3, [r4, #20]
 8004a80:	425b      	negs	r3, r3
 8004a82:	61a3      	str	r3, [r4, #24]
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	b943      	cbnz	r3, 8004a9a <__swsetup_r+0xc6>
 8004a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a8c:	d1ba      	bne.n	8004a04 <__swsetup_r+0x30>
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	0781      	lsls	r1, r0, #30
 8004a92:	bf58      	it	pl
 8004a94:	6963      	ldrpl	r3, [r4, #20]
 8004a96:	60a3      	str	r3, [r4, #8]
 8004a98:	e7f4      	b.n	8004a84 <__swsetup_r+0xb0>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e7f7      	b.n	8004a8e <__swsetup_r+0xba>
 8004a9e:	bf00      	nop
 8004aa0:	2000000c 	.word	0x2000000c
 8004aa4:	080058f8 	.word	0x080058f8
 8004aa8:	08005918 	.word	0x08005918
 8004aac:	080058d8 	.word	0x080058d8

08004ab0 <__sflush_r>:
 8004ab0:	898a      	ldrh	r2, [r1, #12]
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	0710      	lsls	r0, r2, #28
 8004aba:	460c      	mov	r4, r1
 8004abc:	d458      	bmi.n	8004b70 <__sflush_r+0xc0>
 8004abe:	684b      	ldr	r3, [r1, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	dc05      	bgt.n	8004ad0 <__sflush_r+0x20>
 8004ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dc02      	bgt.n	8004ad0 <__sflush_r+0x20>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad2:	2e00      	cmp	r6, #0
 8004ad4:	d0f9      	beq.n	8004aca <__sflush_r+0x1a>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004adc:	682f      	ldr	r7, [r5, #0]
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	d032      	beq.n	8004b48 <__sflush_r+0x98>
 8004ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	075a      	lsls	r2, r3, #29
 8004ae8:	d505      	bpl.n	8004af6 <__sflush_r+0x46>
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	1ac0      	subs	r0, r0, r3
 8004aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af0:	b10b      	cbz	r3, 8004af6 <__sflush_r+0x46>
 8004af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af4:	1ac0      	subs	r0, r0, r3
 8004af6:	2300      	movs	r3, #0
 8004af8:	4602      	mov	r2, r0
 8004afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004afc:	6a21      	ldr	r1, [r4, #32]
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b0      	blx	r6
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	d106      	bne.n	8004b16 <__sflush_r+0x66>
 8004b08:	6829      	ldr	r1, [r5, #0]
 8004b0a:	291d      	cmp	r1, #29
 8004b0c:	d82c      	bhi.n	8004b68 <__sflush_r+0xb8>
 8004b0e:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <__sflush_r+0x108>)
 8004b10:	40ca      	lsrs	r2, r1
 8004b12:	07d6      	lsls	r6, r2, #31
 8004b14:	d528      	bpl.n	8004b68 <__sflush_r+0xb8>
 8004b16:	2200      	movs	r2, #0
 8004b18:	6062      	str	r2, [r4, #4]
 8004b1a:	04d9      	lsls	r1, r3, #19
 8004b1c:	6922      	ldr	r2, [r4, #16]
 8004b1e:	6022      	str	r2, [r4, #0]
 8004b20:	d504      	bpl.n	8004b2c <__sflush_r+0x7c>
 8004b22:	1c42      	adds	r2, r0, #1
 8004b24:	d101      	bne.n	8004b2a <__sflush_r+0x7a>
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	b903      	cbnz	r3, 8004b2c <__sflush_r+0x7c>
 8004b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8004b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b2e:	602f      	str	r7, [r5, #0]
 8004b30:	2900      	cmp	r1, #0
 8004b32:	d0ca      	beq.n	8004aca <__sflush_r+0x1a>
 8004b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <__sflush_r+0x92>
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f9d7 	bl	8004ef0 <_free_r>
 8004b42:	2000      	movs	r0, #0
 8004b44:	6360      	str	r0, [r4, #52]	; 0x34
 8004b46:	e7c1      	b.n	8004acc <__sflush_r+0x1c>
 8004b48:	6a21      	ldr	r1, [r4, #32]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b0      	blx	r6
 8004b50:	1c41      	adds	r1, r0, #1
 8004b52:	d1c7      	bne.n	8004ae4 <__sflush_r+0x34>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0c4      	beq.n	8004ae4 <__sflush_r+0x34>
 8004b5a:	2b1d      	cmp	r3, #29
 8004b5c:	d001      	beq.n	8004b62 <__sflush_r+0xb2>
 8004b5e:	2b16      	cmp	r3, #22
 8004b60:	d101      	bne.n	8004b66 <__sflush_r+0xb6>
 8004b62:	602f      	str	r7, [r5, #0]
 8004b64:	e7b1      	b.n	8004aca <__sflush_r+0x1a>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	e7ad      	b.n	8004acc <__sflush_r+0x1c>
 8004b70:	690f      	ldr	r7, [r1, #16]
 8004b72:	2f00      	cmp	r7, #0
 8004b74:	d0a9      	beq.n	8004aca <__sflush_r+0x1a>
 8004b76:	0793      	lsls	r3, r2, #30
 8004b78:	680e      	ldr	r6, [r1, #0]
 8004b7a:	bf08      	it	eq
 8004b7c:	694b      	ldreq	r3, [r1, #20]
 8004b7e:	600f      	str	r7, [r1, #0]
 8004b80:	bf18      	it	ne
 8004b82:	2300      	movne	r3, #0
 8004b84:	eba6 0807 	sub.w	r8, r6, r7
 8004b88:	608b      	str	r3, [r1, #8]
 8004b8a:	f1b8 0f00 	cmp.w	r8, #0
 8004b8e:	dd9c      	ble.n	8004aca <__sflush_r+0x1a>
 8004b90:	6a21      	ldr	r1, [r4, #32]
 8004b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b94:	4643      	mov	r3, r8
 8004b96:	463a      	mov	r2, r7
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b0      	blx	r6
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	dc06      	bgt.n	8004bae <__sflush_r+0xfe>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	e78e      	b.n	8004acc <__sflush_r+0x1c>
 8004bae:	4407      	add	r7, r0
 8004bb0:	eba8 0800 	sub.w	r8, r8, r0
 8004bb4:	e7e9      	b.n	8004b8a <__sflush_r+0xda>
 8004bb6:	bf00      	nop
 8004bb8:	20400001 	.word	0x20400001

08004bbc <_fflush_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	690b      	ldr	r3, [r1, #16]
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	b913      	cbnz	r3, 8004bcc <_fflush_r+0x10>
 8004bc6:	2500      	movs	r5, #0
 8004bc8:	4628      	mov	r0, r5
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	b118      	cbz	r0, 8004bd6 <_fflush_r+0x1a>
 8004bce:	6983      	ldr	r3, [r0, #24]
 8004bd0:	b90b      	cbnz	r3, 8004bd6 <_fflush_r+0x1a>
 8004bd2:	f000 f887 	bl	8004ce4 <__sinit>
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <_fflush_r+0x6c>)
 8004bd8:	429c      	cmp	r4, r3
 8004bda:	d11b      	bne.n	8004c14 <_fflush_r+0x58>
 8004bdc:	686c      	ldr	r4, [r5, #4]
 8004bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0ef      	beq.n	8004bc6 <_fflush_r+0xa>
 8004be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004be8:	07d0      	lsls	r0, r2, #31
 8004bea:	d404      	bmi.n	8004bf6 <_fflush_r+0x3a>
 8004bec:	0599      	lsls	r1, r3, #22
 8004bee:	d402      	bmi.n	8004bf6 <_fflush_r+0x3a>
 8004bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf2:	f000 f915 	bl	8004e20 <__retarget_lock_acquire_recursive>
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	f7ff ff59 	bl	8004ab0 <__sflush_r>
 8004bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c00:	07da      	lsls	r2, r3, #31
 8004c02:	4605      	mov	r5, r0
 8004c04:	d4e0      	bmi.n	8004bc8 <_fflush_r+0xc>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	059b      	lsls	r3, r3, #22
 8004c0a:	d4dd      	bmi.n	8004bc8 <_fflush_r+0xc>
 8004c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c0e:	f000 f908 	bl	8004e22 <__retarget_lock_release_recursive>
 8004c12:	e7d9      	b.n	8004bc8 <_fflush_r+0xc>
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <_fflush_r+0x70>)
 8004c16:	429c      	cmp	r4, r3
 8004c18:	d101      	bne.n	8004c1e <_fflush_r+0x62>
 8004c1a:	68ac      	ldr	r4, [r5, #8]
 8004c1c:	e7df      	b.n	8004bde <_fflush_r+0x22>
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <_fflush_r+0x74>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	bf08      	it	eq
 8004c24:	68ec      	ldreq	r4, [r5, #12]
 8004c26:	e7da      	b.n	8004bde <_fflush_r+0x22>
 8004c28:	080058f8 	.word	0x080058f8
 8004c2c:	08005918 	.word	0x08005918
 8004c30:	080058d8 	.word	0x080058d8

08004c34 <std>:
 8004c34:	2300      	movs	r3, #0
 8004c36:	b510      	push	{r4, lr}
 8004c38:	4604      	mov	r4, r0
 8004c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c42:	6083      	str	r3, [r0, #8]
 8004c44:	8181      	strh	r1, [r0, #12]
 8004c46:	6643      	str	r3, [r0, #100]	; 0x64
 8004c48:	81c2      	strh	r2, [r0, #14]
 8004c4a:	6183      	str	r3, [r0, #24]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	2208      	movs	r2, #8
 8004c50:	305c      	adds	r0, #92	; 0x5c
 8004c52:	f7ff fdd7 	bl	8004804 <memset>
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <std+0x38>)
 8004c58:	6263      	str	r3, [r4, #36]	; 0x24
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <std+0x3c>)
 8004c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <std+0x40>)
 8004c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <std+0x44>)
 8004c64:	6224      	str	r4, [r4, #32]
 8004c66:	6323      	str	r3, [r4, #48]	; 0x30
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	080056ad 	.word	0x080056ad
 8004c70:	080056cf 	.word	0x080056cf
 8004c74:	08005707 	.word	0x08005707
 8004c78:	0800572b 	.word	0x0800572b

08004c7c <_cleanup_r>:
 8004c7c:	4901      	ldr	r1, [pc, #4]	; (8004c84 <_cleanup_r+0x8>)
 8004c7e:	f000 b8af 	b.w	8004de0 <_fwalk_reent>
 8004c82:	bf00      	nop
 8004c84:	08004bbd 	.word	0x08004bbd

08004c88 <__sfmoreglue>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	2268      	movs	r2, #104	; 0x68
 8004c8c:	1e4d      	subs	r5, r1, #1
 8004c8e:	4355      	muls	r5, r2
 8004c90:	460e      	mov	r6, r1
 8004c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c96:	f000 f997 	bl	8004fc8 <_malloc_r>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	b140      	cbz	r0, 8004cb0 <__sfmoreglue+0x28>
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ca4:	300c      	adds	r0, #12
 8004ca6:	60a0      	str	r0, [r4, #8]
 8004ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cac:	f7ff fdaa 	bl	8004804 <memset>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}

08004cb4 <__sfp_lock_acquire>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__sfp_lock_acquire+0x8>)
 8004cb6:	f000 b8b3 	b.w	8004e20 <__retarget_lock_acquire_recursive>
 8004cba:	bf00      	nop
 8004cbc:	2000012d 	.word	0x2000012d

08004cc0 <__sfp_lock_release>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__sfp_lock_release+0x8>)
 8004cc2:	f000 b8ae 	b.w	8004e22 <__retarget_lock_release_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	2000012d 	.word	0x2000012d

08004ccc <__sinit_lock_acquire>:
 8004ccc:	4801      	ldr	r0, [pc, #4]	; (8004cd4 <__sinit_lock_acquire+0x8>)
 8004cce:	f000 b8a7 	b.w	8004e20 <__retarget_lock_acquire_recursive>
 8004cd2:	bf00      	nop
 8004cd4:	2000012e 	.word	0x2000012e

08004cd8 <__sinit_lock_release>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	; (8004ce0 <__sinit_lock_release+0x8>)
 8004cda:	f000 b8a2 	b.w	8004e22 <__retarget_lock_release_recursive>
 8004cde:	bf00      	nop
 8004ce0:	2000012e 	.word	0x2000012e

08004ce4 <__sinit>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	f7ff fff0 	bl	8004ccc <__sinit_lock_acquire>
 8004cec:	69a3      	ldr	r3, [r4, #24]
 8004cee:	b11b      	cbz	r3, 8004cf8 <__sinit+0x14>
 8004cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf4:	f7ff bff0 	b.w	8004cd8 <__sinit_lock_release>
 8004cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8004cfe:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <__sinit+0x68>)
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <__sinit+0x6c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	bf04      	itt	eq
 8004d0a:	2301      	moveq	r3, #1
 8004d0c:	61a3      	streq	r3, [r4, #24]
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f000 f820 	bl	8004d54 <__sfp>
 8004d14:	6060      	str	r0, [r4, #4]
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 f81c 	bl	8004d54 <__sfp>
 8004d1c:	60a0      	str	r0, [r4, #8]
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f000 f818 	bl	8004d54 <__sfp>
 8004d24:	2200      	movs	r2, #0
 8004d26:	60e0      	str	r0, [r4, #12]
 8004d28:	2104      	movs	r1, #4
 8004d2a:	6860      	ldr	r0, [r4, #4]
 8004d2c:	f7ff ff82 	bl	8004c34 <std>
 8004d30:	68a0      	ldr	r0, [r4, #8]
 8004d32:	2201      	movs	r2, #1
 8004d34:	2109      	movs	r1, #9
 8004d36:	f7ff ff7d 	bl	8004c34 <std>
 8004d3a:	68e0      	ldr	r0, [r4, #12]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	2112      	movs	r1, #18
 8004d40:	f7ff ff78 	bl	8004c34 <std>
 8004d44:	2301      	movs	r3, #1
 8004d46:	61a3      	str	r3, [r4, #24]
 8004d48:	e7d2      	b.n	8004cf0 <__sinit+0xc>
 8004d4a:	bf00      	nop
 8004d4c:	080058d4 	.word	0x080058d4
 8004d50:	08004c7d 	.word	0x08004c7d

08004d54 <__sfp>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	4607      	mov	r7, r0
 8004d58:	f7ff ffac 	bl	8004cb4 <__sfp_lock_acquire>
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <__sfp+0x84>)
 8004d5e:	681e      	ldr	r6, [r3, #0]
 8004d60:	69b3      	ldr	r3, [r6, #24]
 8004d62:	b913      	cbnz	r3, 8004d6a <__sfp+0x16>
 8004d64:	4630      	mov	r0, r6
 8004d66:	f7ff ffbd 	bl	8004ce4 <__sinit>
 8004d6a:	3648      	adds	r6, #72	; 0x48
 8004d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	d503      	bpl.n	8004d7c <__sfp+0x28>
 8004d74:	6833      	ldr	r3, [r6, #0]
 8004d76:	b30b      	cbz	r3, 8004dbc <__sfp+0x68>
 8004d78:	6836      	ldr	r6, [r6, #0]
 8004d7a:	e7f7      	b.n	8004d6c <__sfp+0x18>
 8004d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d80:	b9d5      	cbnz	r5, 8004db8 <__sfp+0x64>
 8004d82:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <__sfp+0x88>)
 8004d84:	60e3      	str	r3, [r4, #12]
 8004d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8004d8c:	f000 f847 	bl	8004e1e <__retarget_lock_init_recursive>
 8004d90:	f7ff ff96 	bl	8004cc0 <__sfp_lock_release>
 8004d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d9c:	6025      	str	r5, [r4, #0]
 8004d9e:	61a5      	str	r5, [r4, #24]
 8004da0:	2208      	movs	r2, #8
 8004da2:	4629      	mov	r1, r5
 8004da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004da8:	f7ff fd2c 	bl	8004804 <memset>
 8004dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004db4:	4620      	mov	r0, r4
 8004db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db8:	3468      	adds	r4, #104	; 0x68
 8004dba:	e7d9      	b.n	8004d70 <__sfp+0x1c>
 8004dbc:	2104      	movs	r1, #4
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	f7ff ff62 	bl	8004c88 <__sfmoreglue>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	6030      	str	r0, [r6, #0]
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d1d5      	bne.n	8004d78 <__sfp+0x24>
 8004dcc:	f7ff ff78 	bl	8004cc0 <__sfp_lock_release>
 8004dd0:	230c      	movs	r3, #12
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	e7ee      	b.n	8004db4 <__sfp+0x60>
 8004dd6:	bf00      	nop
 8004dd8:	080058d4 	.word	0x080058d4
 8004ddc:	ffff0001 	.word	0xffff0001

08004de0 <_fwalk_reent>:
 8004de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de4:	4606      	mov	r6, r0
 8004de6:	4688      	mov	r8, r1
 8004de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004dec:	2700      	movs	r7, #0
 8004dee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004df2:	f1b9 0901 	subs.w	r9, r9, #1
 8004df6:	d505      	bpl.n	8004e04 <_fwalk_reent+0x24>
 8004df8:	6824      	ldr	r4, [r4, #0]
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	d1f7      	bne.n	8004dee <_fwalk_reent+0xe>
 8004dfe:	4638      	mov	r0, r7
 8004e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e04:	89ab      	ldrh	r3, [r5, #12]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d907      	bls.n	8004e1a <_fwalk_reent+0x3a>
 8004e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	d003      	beq.n	8004e1a <_fwalk_reent+0x3a>
 8004e12:	4629      	mov	r1, r5
 8004e14:	4630      	mov	r0, r6
 8004e16:	47c0      	blx	r8
 8004e18:	4307      	orrs	r7, r0
 8004e1a:	3568      	adds	r5, #104	; 0x68
 8004e1c:	e7e9      	b.n	8004df2 <_fwalk_reent+0x12>

08004e1e <__retarget_lock_init_recursive>:
 8004e1e:	4770      	bx	lr

08004e20 <__retarget_lock_acquire_recursive>:
 8004e20:	4770      	bx	lr

08004e22 <__retarget_lock_release_recursive>:
 8004e22:	4770      	bx	lr

08004e24 <__swhatbuf_r>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	460e      	mov	r6, r1
 8004e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	b096      	sub	sp, #88	; 0x58
 8004e30:	4614      	mov	r4, r2
 8004e32:	461d      	mov	r5, r3
 8004e34:	da08      	bge.n	8004e48 <__swhatbuf_r+0x24>
 8004e36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	602a      	str	r2, [r5, #0]
 8004e3e:	061a      	lsls	r2, r3, #24
 8004e40:	d410      	bmi.n	8004e64 <__swhatbuf_r+0x40>
 8004e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e46:	e00e      	b.n	8004e66 <__swhatbuf_r+0x42>
 8004e48:	466a      	mov	r2, sp
 8004e4a:	f000 fc95 	bl	8005778 <_fstat_r>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	dbf1      	blt.n	8004e36 <__swhatbuf_r+0x12>
 8004e52:	9a01      	ldr	r2, [sp, #4]
 8004e54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e5c:	425a      	negs	r2, r3
 8004e5e:	415a      	adcs	r2, r3
 8004e60:	602a      	str	r2, [r5, #0]
 8004e62:	e7ee      	b.n	8004e42 <__swhatbuf_r+0x1e>
 8004e64:	2340      	movs	r3, #64	; 0x40
 8004e66:	2000      	movs	r0, #0
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	b016      	add	sp, #88	; 0x58
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e70 <__smakebuf_r>:
 8004e70:	898b      	ldrh	r3, [r1, #12]
 8004e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e74:	079d      	lsls	r5, r3, #30
 8004e76:	4606      	mov	r6, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	d507      	bpl.n	8004e8c <__smakebuf_r+0x1c>
 8004e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	2301      	movs	r3, #1
 8004e86:	6163      	str	r3, [r4, #20]
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	ab01      	add	r3, sp, #4
 8004e8e:	466a      	mov	r2, sp
 8004e90:	f7ff ffc8 	bl	8004e24 <__swhatbuf_r>
 8004e94:	9900      	ldr	r1, [sp, #0]
 8004e96:	4605      	mov	r5, r0
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f895 	bl	8004fc8 <_malloc_r>
 8004e9e:	b948      	cbnz	r0, 8004eb4 <__smakebuf_r+0x44>
 8004ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ea4:	059a      	lsls	r2, r3, #22
 8004ea6:	d4ef      	bmi.n	8004e88 <__smakebuf_r+0x18>
 8004ea8:	f023 0303 	bic.w	r3, r3, #3
 8004eac:	f043 0302 	orr.w	r3, r3, #2
 8004eb0:	81a3      	strh	r3, [r4, #12]
 8004eb2:	e7e3      	b.n	8004e7c <__smakebuf_r+0xc>
 8004eb4:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <__smakebuf_r+0x7c>)
 8004eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	6020      	str	r0, [r4, #0]
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec0:	81a3      	strh	r3, [r4, #12]
 8004ec2:	9b00      	ldr	r3, [sp, #0]
 8004ec4:	6163      	str	r3, [r4, #20]
 8004ec6:	9b01      	ldr	r3, [sp, #4]
 8004ec8:	6120      	str	r0, [r4, #16]
 8004eca:	b15b      	cbz	r3, 8004ee4 <__smakebuf_r+0x74>
 8004ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 fc63 	bl	800579c <_isatty_r>
 8004ed6:	b128      	cbz	r0, 8004ee4 <__smakebuf_r+0x74>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	89a0      	ldrh	r0, [r4, #12]
 8004ee6:	4305      	orrs	r5, r0
 8004ee8:	81a5      	strh	r5, [r4, #12]
 8004eea:	e7cd      	b.n	8004e88 <__smakebuf_r+0x18>
 8004eec:	08004c7d 	.word	0x08004c7d

08004ef0 <_free_r>:
 8004ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d044      	beq.n	8004f80 <_free_r+0x90>
 8004ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efa:	9001      	str	r0, [sp, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f1a1 0404 	sub.w	r4, r1, #4
 8004f02:	bfb8      	it	lt
 8004f04:	18e4      	addlt	r4, r4, r3
 8004f06:	f000 fc6b 	bl	80057e0 <__malloc_lock>
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <_free_r+0x94>)
 8004f0c:	9801      	ldr	r0, [sp, #4]
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	b933      	cbnz	r3, 8004f20 <_free_r+0x30>
 8004f12:	6063      	str	r3, [r4, #4]
 8004f14:	6014      	str	r4, [r2, #0]
 8004f16:	b003      	add	sp, #12
 8004f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f1c:	f000 bc66 	b.w	80057ec <__malloc_unlock>
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	d908      	bls.n	8004f36 <_free_r+0x46>
 8004f24:	6825      	ldr	r5, [r4, #0]
 8004f26:	1961      	adds	r1, r4, r5
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf01      	itttt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	1949      	addeq	r1, r1, r5
 8004f32:	6021      	streq	r1, [r4, #0]
 8004f34:	e7ed      	b.n	8004f12 <_free_r+0x22>
 8004f36:	461a      	mov	r2, r3
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b10b      	cbz	r3, 8004f40 <_free_r+0x50>
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	d9fa      	bls.n	8004f36 <_free_r+0x46>
 8004f40:	6811      	ldr	r1, [r2, #0]
 8004f42:	1855      	adds	r5, r2, r1
 8004f44:	42a5      	cmp	r5, r4
 8004f46:	d10b      	bne.n	8004f60 <_free_r+0x70>
 8004f48:	6824      	ldr	r4, [r4, #0]
 8004f4a:	4421      	add	r1, r4
 8004f4c:	1854      	adds	r4, r2, r1
 8004f4e:	42a3      	cmp	r3, r4
 8004f50:	6011      	str	r1, [r2, #0]
 8004f52:	d1e0      	bne.n	8004f16 <_free_r+0x26>
 8004f54:	681c      	ldr	r4, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	6053      	str	r3, [r2, #4]
 8004f5a:	4421      	add	r1, r4
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	e7da      	b.n	8004f16 <_free_r+0x26>
 8004f60:	d902      	bls.n	8004f68 <_free_r+0x78>
 8004f62:	230c      	movs	r3, #12
 8004f64:	6003      	str	r3, [r0, #0]
 8004f66:	e7d6      	b.n	8004f16 <_free_r+0x26>
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	1961      	adds	r1, r4, r5
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	bf04      	itt	eq
 8004f70:	6819      	ldreq	r1, [r3, #0]
 8004f72:	685b      	ldreq	r3, [r3, #4]
 8004f74:	6063      	str	r3, [r4, #4]
 8004f76:	bf04      	itt	eq
 8004f78:	1949      	addeq	r1, r1, r5
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	6054      	str	r4, [r2, #4]
 8004f7e:	e7ca      	b.n	8004f16 <_free_r+0x26>
 8004f80:	b003      	add	sp, #12
 8004f82:	bd30      	pop	{r4, r5, pc}
 8004f84:	20000130 	.word	0x20000130

08004f88 <sbrk_aligned>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4e0e      	ldr	r6, [pc, #56]	; (8004fc4 <sbrk_aligned+0x3c>)
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	6831      	ldr	r1, [r6, #0]
 8004f90:	4605      	mov	r5, r0
 8004f92:	b911      	cbnz	r1, 8004f9a <sbrk_aligned+0x12>
 8004f94:	f000 fb7a 	bl	800568c <_sbrk_r>
 8004f98:	6030      	str	r0, [r6, #0]
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 fb75 	bl	800568c <_sbrk_r>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	d00a      	beq.n	8004fbc <sbrk_aligned+0x34>
 8004fa6:	1cc4      	adds	r4, r0, #3
 8004fa8:	f024 0403 	bic.w	r4, r4, #3
 8004fac:	42a0      	cmp	r0, r4
 8004fae:	d007      	beq.n	8004fc0 <sbrk_aligned+0x38>
 8004fb0:	1a21      	subs	r1, r4, r0
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 fb6a 	bl	800568c <_sbrk_r>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d101      	bne.n	8004fc0 <sbrk_aligned+0x38>
 8004fbc:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	20000134 	.word	0x20000134

08004fc8 <_malloc_r>:
 8004fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fcc:	1ccd      	adds	r5, r1, #3
 8004fce:	f025 0503 	bic.w	r5, r5, #3
 8004fd2:	3508      	adds	r5, #8
 8004fd4:	2d0c      	cmp	r5, #12
 8004fd6:	bf38      	it	cc
 8004fd8:	250c      	movcc	r5, #12
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	4607      	mov	r7, r0
 8004fde:	db01      	blt.n	8004fe4 <_malloc_r+0x1c>
 8004fe0:	42a9      	cmp	r1, r5
 8004fe2:	d905      	bls.n	8004ff0 <_malloc_r+0x28>
 8004fe4:	230c      	movs	r3, #12
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	2600      	movs	r6, #0
 8004fea:	4630      	mov	r0, r6
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	4e2e      	ldr	r6, [pc, #184]	; (80050ac <_malloc_r+0xe4>)
 8004ff2:	f000 fbf5 	bl	80057e0 <__malloc_lock>
 8004ff6:	6833      	ldr	r3, [r6, #0]
 8004ff8:	461c      	mov	r4, r3
 8004ffa:	bb34      	cbnz	r4, 800504a <_malloc_r+0x82>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4638      	mov	r0, r7
 8005000:	f7ff ffc2 	bl	8004f88 <sbrk_aligned>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	4604      	mov	r4, r0
 8005008:	d14d      	bne.n	80050a6 <_malloc_r+0xde>
 800500a:	6834      	ldr	r4, [r6, #0]
 800500c:	4626      	mov	r6, r4
 800500e:	2e00      	cmp	r6, #0
 8005010:	d140      	bne.n	8005094 <_malloc_r+0xcc>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	4631      	mov	r1, r6
 8005016:	4638      	mov	r0, r7
 8005018:	eb04 0803 	add.w	r8, r4, r3
 800501c:	f000 fb36 	bl	800568c <_sbrk_r>
 8005020:	4580      	cmp	r8, r0
 8005022:	d13a      	bne.n	800509a <_malloc_r+0xd2>
 8005024:	6821      	ldr	r1, [r4, #0]
 8005026:	3503      	adds	r5, #3
 8005028:	1a6d      	subs	r5, r5, r1
 800502a:	f025 0503 	bic.w	r5, r5, #3
 800502e:	3508      	adds	r5, #8
 8005030:	2d0c      	cmp	r5, #12
 8005032:	bf38      	it	cc
 8005034:	250c      	movcc	r5, #12
 8005036:	4629      	mov	r1, r5
 8005038:	4638      	mov	r0, r7
 800503a:	f7ff ffa5 	bl	8004f88 <sbrk_aligned>
 800503e:	3001      	adds	r0, #1
 8005040:	d02b      	beq.n	800509a <_malloc_r+0xd2>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	442b      	add	r3, r5
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	e00e      	b.n	8005068 <_malloc_r+0xa0>
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	1b52      	subs	r2, r2, r5
 800504e:	d41e      	bmi.n	800508e <_malloc_r+0xc6>
 8005050:	2a0b      	cmp	r2, #11
 8005052:	d916      	bls.n	8005082 <_malloc_r+0xba>
 8005054:	1961      	adds	r1, r4, r5
 8005056:	42a3      	cmp	r3, r4
 8005058:	6025      	str	r5, [r4, #0]
 800505a:	bf18      	it	ne
 800505c:	6059      	strne	r1, [r3, #4]
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	bf08      	it	eq
 8005062:	6031      	streq	r1, [r6, #0]
 8005064:	5162      	str	r2, [r4, r5]
 8005066:	604b      	str	r3, [r1, #4]
 8005068:	4638      	mov	r0, r7
 800506a:	f104 060b 	add.w	r6, r4, #11
 800506e:	f000 fbbd 	bl	80057ec <__malloc_unlock>
 8005072:	f026 0607 	bic.w	r6, r6, #7
 8005076:	1d23      	adds	r3, r4, #4
 8005078:	1af2      	subs	r2, r6, r3
 800507a:	d0b6      	beq.n	8004fea <_malloc_r+0x22>
 800507c:	1b9b      	subs	r3, r3, r6
 800507e:	50a3      	str	r3, [r4, r2]
 8005080:	e7b3      	b.n	8004fea <_malloc_r+0x22>
 8005082:	6862      	ldr	r2, [r4, #4]
 8005084:	42a3      	cmp	r3, r4
 8005086:	bf0c      	ite	eq
 8005088:	6032      	streq	r2, [r6, #0]
 800508a:	605a      	strne	r2, [r3, #4]
 800508c:	e7ec      	b.n	8005068 <_malloc_r+0xa0>
 800508e:	4623      	mov	r3, r4
 8005090:	6864      	ldr	r4, [r4, #4]
 8005092:	e7b2      	b.n	8004ffa <_malloc_r+0x32>
 8005094:	4634      	mov	r4, r6
 8005096:	6876      	ldr	r6, [r6, #4]
 8005098:	e7b9      	b.n	800500e <_malloc_r+0x46>
 800509a:	230c      	movs	r3, #12
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	4638      	mov	r0, r7
 80050a0:	f000 fba4 	bl	80057ec <__malloc_unlock>
 80050a4:	e7a1      	b.n	8004fea <_malloc_r+0x22>
 80050a6:	6025      	str	r5, [r4, #0]
 80050a8:	e7de      	b.n	8005068 <_malloc_r+0xa0>
 80050aa:	bf00      	nop
 80050ac:	20000130 	.word	0x20000130

080050b0 <__sfputc_r>:
 80050b0:	6893      	ldr	r3, [r2, #8]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	b410      	push	{r4}
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	da08      	bge.n	80050ce <__sfputc_r+0x1e>
 80050bc:	6994      	ldr	r4, [r2, #24]
 80050be:	42a3      	cmp	r3, r4
 80050c0:	db01      	blt.n	80050c6 <__sfputc_r+0x16>
 80050c2:	290a      	cmp	r1, #10
 80050c4:	d103      	bne.n	80050ce <__sfputc_r+0x1e>
 80050c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ca:	f7ff bc31 	b.w	8004930 <__swbuf_r>
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	1c58      	adds	r0, r3, #1
 80050d2:	6010      	str	r0, [r2, #0]
 80050d4:	7019      	strb	r1, [r3, #0]
 80050d6:	4608      	mov	r0, r1
 80050d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050dc:	4770      	bx	lr

080050de <__sfputs_r>:
 80050de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e0:	4606      	mov	r6, r0
 80050e2:	460f      	mov	r7, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	18d5      	adds	r5, r2, r3
 80050e8:	42ac      	cmp	r4, r5
 80050ea:	d101      	bne.n	80050f0 <__sfputs_r+0x12>
 80050ec:	2000      	movs	r0, #0
 80050ee:	e007      	b.n	8005100 <__sfputs_r+0x22>
 80050f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f4:	463a      	mov	r2, r7
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff ffda 	bl	80050b0 <__sfputc_r>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d1f3      	bne.n	80050e8 <__sfputs_r+0xa>
 8005100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005104 <_vfiprintf_r>:
 8005104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005108:	460d      	mov	r5, r1
 800510a:	b09d      	sub	sp, #116	; 0x74
 800510c:	4614      	mov	r4, r2
 800510e:	4698      	mov	r8, r3
 8005110:	4606      	mov	r6, r0
 8005112:	b118      	cbz	r0, 800511c <_vfiprintf_r+0x18>
 8005114:	6983      	ldr	r3, [r0, #24]
 8005116:	b90b      	cbnz	r3, 800511c <_vfiprintf_r+0x18>
 8005118:	f7ff fde4 	bl	8004ce4 <__sinit>
 800511c:	4b89      	ldr	r3, [pc, #548]	; (8005344 <_vfiprintf_r+0x240>)
 800511e:	429d      	cmp	r5, r3
 8005120:	d11b      	bne.n	800515a <_vfiprintf_r+0x56>
 8005122:	6875      	ldr	r5, [r6, #4]
 8005124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005126:	07d9      	lsls	r1, r3, #31
 8005128:	d405      	bmi.n	8005136 <_vfiprintf_r+0x32>
 800512a:	89ab      	ldrh	r3, [r5, #12]
 800512c:	059a      	lsls	r2, r3, #22
 800512e:	d402      	bmi.n	8005136 <_vfiprintf_r+0x32>
 8005130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005132:	f7ff fe75 	bl	8004e20 <__retarget_lock_acquire_recursive>
 8005136:	89ab      	ldrh	r3, [r5, #12]
 8005138:	071b      	lsls	r3, r3, #28
 800513a:	d501      	bpl.n	8005140 <_vfiprintf_r+0x3c>
 800513c:	692b      	ldr	r3, [r5, #16]
 800513e:	b9eb      	cbnz	r3, 800517c <_vfiprintf_r+0x78>
 8005140:	4629      	mov	r1, r5
 8005142:	4630      	mov	r0, r6
 8005144:	f7ff fc46 	bl	80049d4 <__swsetup_r>
 8005148:	b1c0      	cbz	r0, 800517c <_vfiprintf_r+0x78>
 800514a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800514c:	07dc      	lsls	r4, r3, #31
 800514e:	d50e      	bpl.n	800516e <_vfiprintf_r+0x6a>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	b01d      	add	sp, #116	; 0x74
 8005156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515a:	4b7b      	ldr	r3, [pc, #492]	; (8005348 <_vfiprintf_r+0x244>)
 800515c:	429d      	cmp	r5, r3
 800515e:	d101      	bne.n	8005164 <_vfiprintf_r+0x60>
 8005160:	68b5      	ldr	r5, [r6, #8]
 8005162:	e7df      	b.n	8005124 <_vfiprintf_r+0x20>
 8005164:	4b79      	ldr	r3, [pc, #484]	; (800534c <_vfiprintf_r+0x248>)
 8005166:	429d      	cmp	r5, r3
 8005168:	bf08      	it	eq
 800516a:	68f5      	ldreq	r5, [r6, #12]
 800516c:	e7da      	b.n	8005124 <_vfiprintf_r+0x20>
 800516e:	89ab      	ldrh	r3, [r5, #12]
 8005170:	0598      	lsls	r0, r3, #22
 8005172:	d4ed      	bmi.n	8005150 <_vfiprintf_r+0x4c>
 8005174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005176:	f7ff fe54 	bl	8004e22 <__retarget_lock_release_recursive>
 800517a:	e7e9      	b.n	8005150 <_vfiprintf_r+0x4c>
 800517c:	2300      	movs	r3, #0
 800517e:	9309      	str	r3, [sp, #36]	; 0x24
 8005180:	2320      	movs	r3, #32
 8005182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005186:	f8cd 800c 	str.w	r8, [sp, #12]
 800518a:	2330      	movs	r3, #48	; 0x30
 800518c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005350 <_vfiprintf_r+0x24c>
 8005190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005194:	f04f 0901 	mov.w	r9, #1
 8005198:	4623      	mov	r3, r4
 800519a:	469a      	mov	sl, r3
 800519c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a0:	b10a      	cbz	r2, 80051a6 <_vfiprintf_r+0xa2>
 80051a2:	2a25      	cmp	r2, #37	; 0x25
 80051a4:	d1f9      	bne.n	800519a <_vfiprintf_r+0x96>
 80051a6:	ebba 0b04 	subs.w	fp, sl, r4
 80051aa:	d00b      	beq.n	80051c4 <_vfiprintf_r+0xc0>
 80051ac:	465b      	mov	r3, fp
 80051ae:	4622      	mov	r2, r4
 80051b0:	4629      	mov	r1, r5
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7ff ff93 	bl	80050de <__sfputs_r>
 80051b8:	3001      	adds	r0, #1
 80051ba:	f000 80aa 	beq.w	8005312 <_vfiprintf_r+0x20e>
 80051be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c0:	445a      	add	r2, fp
 80051c2:	9209      	str	r2, [sp, #36]	; 0x24
 80051c4:	f89a 3000 	ldrb.w	r3, [sl]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a2 	beq.w	8005312 <_vfiprintf_r+0x20e>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f04f 32ff 	mov.w	r2, #4294967295
 80051d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051d8:	f10a 0a01 	add.w	sl, sl, #1
 80051dc:	9304      	str	r3, [sp, #16]
 80051de:	9307      	str	r3, [sp, #28]
 80051e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051e4:	931a      	str	r3, [sp, #104]	; 0x68
 80051e6:	4654      	mov	r4, sl
 80051e8:	2205      	movs	r2, #5
 80051ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ee:	4858      	ldr	r0, [pc, #352]	; (8005350 <_vfiprintf_r+0x24c>)
 80051f0:	f7fa ffee 	bl	80001d0 <memchr>
 80051f4:	9a04      	ldr	r2, [sp, #16]
 80051f6:	b9d8      	cbnz	r0, 8005230 <_vfiprintf_r+0x12c>
 80051f8:	06d1      	lsls	r1, r2, #27
 80051fa:	bf44      	itt	mi
 80051fc:	2320      	movmi	r3, #32
 80051fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005202:	0713      	lsls	r3, r2, #28
 8005204:	bf44      	itt	mi
 8005206:	232b      	movmi	r3, #43	; 0x2b
 8005208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800520c:	f89a 3000 	ldrb.w	r3, [sl]
 8005210:	2b2a      	cmp	r3, #42	; 0x2a
 8005212:	d015      	beq.n	8005240 <_vfiprintf_r+0x13c>
 8005214:	9a07      	ldr	r2, [sp, #28]
 8005216:	4654      	mov	r4, sl
 8005218:	2000      	movs	r0, #0
 800521a:	f04f 0c0a 	mov.w	ip, #10
 800521e:	4621      	mov	r1, r4
 8005220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005224:	3b30      	subs	r3, #48	; 0x30
 8005226:	2b09      	cmp	r3, #9
 8005228:	d94e      	bls.n	80052c8 <_vfiprintf_r+0x1c4>
 800522a:	b1b0      	cbz	r0, 800525a <_vfiprintf_r+0x156>
 800522c:	9207      	str	r2, [sp, #28]
 800522e:	e014      	b.n	800525a <_vfiprintf_r+0x156>
 8005230:	eba0 0308 	sub.w	r3, r0, r8
 8005234:	fa09 f303 	lsl.w	r3, r9, r3
 8005238:	4313      	orrs	r3, r2
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	46a2      	mov	sl, r4
 800523e:	e7d2      	b.n	80051e6 <_vfiprintf_r+0xe2>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	1d19      	adds	r1, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	9103      	str	r1, [sp, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	bfbb      	ittet	lt
 800524c:	425b      	neglt	r3, r3
 800524e:	f042 0202 	orrlt.w	r2, r2, #2
 8005252:	9307      	strge	r3, [sp, #28]
 8005254:	9307      	strlt	r3, [sp, #28]
 8005256:	bfb8      	it	lt
 8005258:	9204      	strlt	r2, [sp, #16]
 800525a:	7823      	ldrb	r3, [r4, #0]
 800525c:	2b2e      	cmp	r3, #46	; 0x2e
 800525e:	d10c      	bne.n	800527a <_vfiprintf_r+0x176>
 8005260:	7863      	ldrb	r3, [r4, #1]
 8005262:	2b2a      	cmp	r3, #42	; 0x2a
 8005264:	d135      	bne.n	80052d2 <_vfiprintf_r+0x1ce>
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	1d1a      	adds	r2, r3, #4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	9203      	str	r2, [sp, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfb8      	it	lt
 8005272:	f04f 33ff 	movlt.w	r3, #4294967295
 8005276:	3402      	adds	r4, #2
 8005278:	9305      	str	r3, [sp, #20]
 800527a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005360 <_vfiprintf_r+0x25c>
 800527e:	7821      	ldrb	r1, [r4, #0]
 8005280:	2203      	movs	r2, #3
 8005282:	4650      	mov	r0, sl
 8005284:	f7fa ffa4 	bl	80001d0 <memchr>
 8005288:	b140      	cbz	r0, 800529c <_vfiprintf_r+0x198>
 800528a:	2340      	movs	r3, #64	; 0x40
 800528c:	eba0 000a 	sub.w	r0, r0, sl
 8005290:	fa03 f000 	lsl.w	r0, r3, r0
 8005294:	9b04      	ldr	r3, [sp, #16]
 8005296:	4303      	orrs	r3, r0
 8005298:	3401      	adds	r4, #1
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a0:	482c      	ldr	r0, [pc, #176]	; (8005354 <_vfiprintf_r+0x250>)
 80052a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052a6:	2206      	movs	r2, #6
 80052a8:	f7fa ff92 	bl	80001d0 <memchr>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d03f      	beq.n	8005330 <_vfiprintf_r+0x22c>
 80052b0:	4b29      	ldr	r3, [pc, #164]	; (8005358 <_vfiprintf_r+0x254>)
 80052b2:	bb1b      	cbnz	r3, 80052fc <_vfiprintf_r+0x1f8>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	3307      	adds	r3, #7
 80052b8:	f023 0307 	bic.w	r3, r3, #7
 80052bc:	3308      	adds	r3, #8
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	443b      	add	r3, r7
 80052c4:	9309      	str	r3, [sp, #36]	; 0x24
 80052c6:	e767      	b.n	8005198 <_vfiprintf_r+0x94>
 80052c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80052cc:	460c      	mov	r4, r1
 80052ce:	2001      	movs	r0, #1
 80052d0:	e7a5      	b.n	800521e <_vfiprintf_r+0x11a>
 80052d2:	2300      	movs	r3, #0
 80052d4:	3401      	adds	r4, #1
 80052d6:	9305      	str	r3, [sp, #20]
 80052d8:	4619      	mov	r1, r3
 80052da:	f04f 0c0a 	mov.w	ip, #10
 80052de:	4620      	mov	r0, r4
 80052e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e4:	3a30      	subs	r2, #48	; 0x30
 80052e6:	2a09      	cmp	r2, #9
 80052e8:	d903      	bls.n	80052f2 <_vfiprintf_r+0x1ee>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0c5      	beq.n	800527a <_vfiprintf_r+0x176>
 80052ee:	9105      	str	r1, [sp, #20]
 80052f0:	e7c3      	b.n	800527a <_vfiprintf_r+0x176>
 80052f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80052f6:	4604      	mov	r4, r0
 80052f8:	2301      	movs	r3, #1
 80052fa:	e7f0      	b.n	80052de <_vfiprintf_r+0x1da>
 80052fc:	ab03      	add	r3, sp, #12
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	462a      	mov	r2, r5
 8005302:	4b16      	ldr	r3, [pc, #88]	; (800535c <_vfiprintf_r+0x258>)
 8005304:	a904      	add	r1, sp, #16
 8005306:	4630      	mov	r0, r6
 8005308:	f3af 8000 	nop.w
 800530c:	4607      	mov	r7, r0
 800530e:	1c78      	adds	r0, r7, #1
 8005310:	d1d6      	bne.n	80052c0 <_vfiprintf_r+0x1bc>
 8005312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005314:	07d9      	lsls	r1, r3, #31
 8005316:	d405      	bmi.n	8005324 <_vfiprintf_r+0x220>
 8005318:	89ab      	ldrh	r3, [r5, #12]
 800531a:	059a      	lsls	r2, r3, #22
 800531c:	d402      	bmi.n	8005324 <_vfiprintf_r+0x220>
 800531e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005320:	f7ff fd7f 	bl	8004e22 <__retarget_lock_release_recursive>
 8005324:	89ab      	ldrh	r3, [r5, #12]
 8005326:	065b      	lsls	r3, r3, #25
 8005328:	f53f af12 	bmi.w	8005150 <_vfiprintf_r+0x4c>
 800532c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800532e:	e711      	b.n	8005154 <_vfiprintf_r+0x50>
 8005330:	ab03      	add	r3, sp, #12
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	462a      	mov	r2, r5
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <_vfiprintf_r+0x258>)
 8005338:	a904      	add	r1, sp, #16
 800533a:	4630      	mov	r0, r6
 800533c:	f000 f880 	bl	8005440 <_printf_i>
 8005340:	e7e4      	b.n	800530c <_vfiprintf_r+0x208>
 8005342:	bf00      	nop
 8005344:	080058f8 	.word	0x080058f8
 8005348:	08005918 	.word	0x08005918
 800534c:	080058d8 	.word	0x080058d8
 8005350:	08005938 	.word	0x08005938
 8005354:	08005942 	.word	0x08005942
 8005358:	00000000 	.word	0x00000000
 800535c:	080050df 	.word	0x080050df
 8005360:	0800593e 	.word	0x0800593e

08005364 <_printf_common>:
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	4616      	mov	r6, r2
 800536a:	4699      	mov	r9, r3
 800536c:	688a      	ldr	r2, [r1, #8]
 800536e:	690b      	ldr	r3, [r1, #16]
 8005370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005374:	4293      	cmp	r3, r2
 8005376:	bfb8      	it	lt
 8005378:	4613      	movlt	r3, r2
 800537a:	6033      	str	r3, [r6, #0]
 800537c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005380:	4607      	mov	r7, r0
 8005382:	460c      	mov	r4, r1
 8005384:	b10a      	cbz	r2, 800538a <_printf_common+0x26>
 8005386:	3301      	adds	r3, #1
 8005388:	6033      	str	r3, [r6, #0]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	0699      	lsls	r1, r3, #26
 800538e:	bf42      	ittt	mi
 8005390:	6833      	ldrmi	r3, [r6, #0]
 8005392:	3302      	addmi	r3, #2
 8005394:	6033      	strmi	r3, [r6, #0]
 8005396:	6825      	ldr	r5, [r4, #0]
 8005398:	f015 0506 	ands.w	r5, r5, #6
 800539c:	d106      	bne.n	80053ac <_printf_common+0x48>
 800539e:	f104 0a19 	add.w	sl, r4, #25
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	6832      	ldr	r2, [r6, #0]
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	dc26      	bgt.n	80053fa <_printf_common+0x96>
 80053ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b0:	1e13      	subs	r3, r2, #0
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	bf18      	it	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	0692      	lsls	r2, r2, #26
 80053ba:	d42b      	bmi.n	8005414 <_printf_common+0xb0>
 80053bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c0:	4649      	mov	r1, r9
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	3001      	adds	r0, #1
 80053c8:	d01e      	beq.n	8005408 <_printf_common+0xa4>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	68e5      	ldr	r5, [r4, #12]
 80053ce:	6832      	ldr	r2, [r6, #0]
 80053d0:	f003 0306 	and.w	r3, r3, #6
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	bf08      	it	eq
 80053d8:	1aad      	subeq	r5, r5, r2
 80053da:	68a3      	ldr	r3, [r4, #8]
 80053dc:	6922      	ldr	r2, [r4, #16]
 80053de:	bf0c      	ite	eq
 80053e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e4:	2500      	movne	r5, #0
 80053e6:	4293      	cmp	r3, r2
 80053e8:	bfc4      	itt	gt
 80053ea:	1a9b      	subgt	r3, r3, r2
 80053ec:	18ed      	addgt	r5, r5, r3
 80053ee:	2600      	movs	r6, #0
 80053f0:	341a      	adds	r4, #26
 80053f2:	42b5      	cmp	r5, r6
 80053f4:	d11a      	bne.n	800542c <_printf_common+0xc8>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e008      	b.n	800540c <_printf_common+0xa8>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4649      	mov	r1, r9
 8005400:	4638      	mov	r0, r7
 8005402:	47c0      	blx	r8
 8005404:	3001      	adds	r0, #1
 8005406:	d103      	bne.n	8005410 <_printf_common+0xac>
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005410:	3501      	adds	r5, #1
 8005412:	e7c6      	b.n	80053a2 <_printf_common+0x3e>
 8005414:	18e1      	adds	r1, r4, r3
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	2030      	movs	r0, #48	; 0x30
 800541a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800541e:	4422      	add	r2, r4
 8005420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005428:	3302      	adds	r3, #2
 800542a:	e7c7      	b.n	80053bc <_printf_common+0x58>
 800542c:	2301      	movs	r3, #1
 800542e:	4622      	mov	r2, r4
 8005430:	4649      	mov	r1, r9
 8005432:	4638      	mov	r0, r7
 8005434:	47c0      	blx	r8
 8005436:	3001      	adds	r0, #1
 8005438:	d0e6      	beq.n	8005408 <_printf_common+0xa4>
 800543a:	3601      	adds	r6, #1
 800543c:	e7d9      	b.n	80053f2 <_printf_common+0x8e>
	...

08005440 <_printf_i>:
 8005440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	7e0f      	ldrb	r7, [r1, #24]
 8005446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005448:	2f78      	cmp	r7, #120	; 0x78
 800544a:	4691      	mov	r9, r2
 800544c:	4680      	mov	r8, r0
 800544e:	460c      	mov	r4, r1
 8005450:	469a      	mov	sl, r3
 8005452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005456:	d807      	bhi.n	8005468 <_printf_i+0x28>
 8005458:	2f62      	cmp	r7, #98	; 0x62
 800545a:	d80a      	bhi.n	8005472 <_printf_i+0x32>
 800545c:	2f00      	cmp	r7, #0
 800545e:	f000 80d8 	beq.w	8005612 <_printf_i+0x1d2>
 8005462:	2f58      	cmp	r7, #88	; 0x58
 8005464:	f000 80a3 	beq.w	80055ae <_printf_i+0x16e>
 8005468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800546c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005470:	e03a      	b.n	80054e8 <_printf_i+0xa8>
 8005472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005476:	2b15      	cmp	r3, #21
 8005478:	d8f6      	bhi.n	8005468 <_printf_i+0x28>
 800547a:	a101      	add	r1, pc, #4	; (adr r1, 8005480 <_printf_i+0x40>)
 800547c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054ed 	.word	0x080054ed
 8005488:	08005469 	.word	0x08005469
 800548c:	08005469 	.word	0x08005469
 8005490:	08005469 	.word	0x08005469
 8005494:	08005469 	.word	0x08005469
 8005498:	080054ed 	.word	0x080054ed
 800549c:	08005469 	.word	0x08005469
 80054a0:	08005469 	.word	0x08005469
 80054a4:	08005469 	.word	0x08005469
 80054a8:	08005469 	.word	0x08005469
 80054ac:	080055f9 	.word	0x080055f9
 80054b0:	0800551d 	.word	0x0800551d
 80054b4:	080055db 	.word	0x080055db
 80054b8:	08005469 	.word	0x08005469
 80054bc:	08005469 	.word	0x08005469
 80054c0:	0800561b 	.word	0x0800561b
 80054c4:	08005469 	.word	0x08005469
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005469 	.word	0x08005469
 80054d0:	08005469 	.word	0x08005469
 80054d4:	080055e3 	.word	0x080055e3
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	1d1a      	adds	r2, r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	602a      	str	r2, [r5, #0]
 80054e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0a3      	b.n	8005634 <_printf_i+0x1f4>
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	6829      	ldr	r1, [r5, #0]
 80054f0:	0606      	lsls	r6, r0, #24
 80054f2:	f101 0304 	add.w	r3, r1, #4
 80054f6:	d50a      	bpl.n	800550e <_printf_i+0xce>
 80054f8:	680e      	ldr	r6, [r1, #0]
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	2e00      	cmp	r6, #0
 80054fe:	da03      	bge.n	8005508 <_printf_i+0xc8>
 8005500:	232d      	movs	r3, #45	; 0x2d
 8005502:	4276      	negs	r6, r6
 8005504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005508:	485e      	ldr	r0, [pc, #376]	; (8005684 <_printf_i+0x244>)
 800550a:	230a      	movs	r3, #10
 800550c:	e019      	b.n	8005542 <_printf_i+0x102>
 800550e:	680e      	ldr	r6, [r1, #0]
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005516:	bf18      	it	ne
 8005518:	b236      	sxthne	r6, r6
 800551a:	e7ef      	b.n	80054fc <_printf_i+0xbc>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	6820      	ldr	r0, [r4, #0]
 8005520:	1d19      	adds	r1, r3, #4
 8005522:	6029      	str	r1, [r5, #0]
 8005524:	0601      	lsls	r1, r0, #24
 8005526:	d501      	bpl.n	800552c <_printf_i+0xec>
 8005528:	681e      	ldr	r6, [r3, #0]
 800552a:	e002      	b.n	8005532 <_printf_i+0xf2>
 800552c:	0646      	lsls	r6, r0, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0xe8>
 8005530:	881e      	ldrh	r6, [r3, #0]
 8005532:	4854      	ldr	r0, [pc, #336]	; (8005684 <_printf_i+0x244>)
 8005534:	2f6f      	cmp	r7, #111	; 0x6f
 8005536:	bf0c      	ite	eq
 8005538:	2308      	moveq	r3, #8
 800553a:	230a      	movne	r3, #10
 800553c:	2100      	movs	r1, #0
 800553e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005542:	6865      	ldr	r5, [r4, #4]
 8005544:	60a5      	str	r5, [r4, #8]
 8005546:	2d00      	cmp	r5, #0
 8005548:	bfa2      	ittt	ge
 800554a:	6821      	ldrge	r1, [r4, #0]
 800554c:	f021 0104 	bicge.w	r1, r1, #4
 8005550:	6021      	strge	r1, [r4, #0]
 8005552:	b90e      	cbnz	r6, 8005558 <_printf_i+0x118>
 8005554:	2d00      	cmp	r5, #0
 8005556:	d04d      	beq.n	80055f4 <_printf_i+0x1b4>
 8005558:	4615      	mov	r5, r2
 800555a:	fbb6 f1f3 	udiv	r1, r6, r3
 800555e:	fb03 6711 	mls	r7, r3, r1, r6
 8005562:	5dc7      	ldrb	r7, [r0, r7]
 8005564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005568:	4637      	mov	r7, r6
 800556a:	42bb      	cmp	r3, r7
 800556c:	460e      	mov	r6, r1
 800556e:	d9f4      	bls.n	800555a <_printf_i+0x11a>
 8005570:	2b08      	cmp	r3, #8
 8005572:	d10b      	bne.n	800558c <_printf_i+0x14c>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07de      	lsls	r6, r3, #31
 8005578:	d508      	bpl.n	800558c <_printf_i+0x14c>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	6861      	ldr	r1, [r4, #4]
 800557e:	4299      	cmp	r1, r3
 8005580:	bfde      	ittt	le
 8005582:	2330      	movle	r3, #48	; 0x30
 8005584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005588:	f105 35ff 	addle.w	r5, r5, #4294967295
 800558c:	1b52      	subs	r2, r2, r5
 800558e:	6122      	str	r2, [r4, #16]
 8005590:	f8cd a000 	str.w	sl, [sp]
 8005594:	464b      	mov	r3, r9
 8005596:	aa03      	add	r2, sp, #12
 8005598:	4621      	mov	r1, r4
 800559a:	4640      	mov	r0, r8
 800559c:	f7ff fee2 	bl	8005364 <_printf_common>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d14c      	bne.n	800563e <_printf_i+0x1fe>
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	b004      	add	sp, #16
 80055aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ae:	4835      	ldr	r0, [pc, #212]	; (8005684 <_printf_i+0x244>)
 80055b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055b4:	6829      	ldr	r1, [r5, #0]
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80055bc:	6029      	str	r1, [r5, #0]
 80055be:	061d      	lsls	r5, r3, #24
 80055c0:	d514      	bpl.n	80055ec <_printf_i+0x1ac>
 80055c2:	07df      	lsls	r7, r3, #31
 80055c4:	bf44      	itt	mi
 80055c6:	f043 0320 	orrmi.w	r3, r3, #32
 80055ca:	6023      	strmi	r3, [r4, #0]
 80055cc:	b91e      	cbnz	r6, 80055d6 <_printf_i+0x196>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	f023 0320 	bic.w	r3, r3, #32
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	2310      	movs	r3, #16
 80055d8:	e7b0      	b.n	800553c <_printf_i+0xfc>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	f043 0320 	orr.w	r3, r3, #32
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	2378      	movs	r3, #120	; 0x78
 80055e4:	4828      	ldr	r0, [pc, #160]	; (8005688 <_printf_i+0x248>)
 80055e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055ea:	e7e3      	b.n	80055b4 <_printf_i+0x174>
 80055ec:	0659      	lsls	r1, r3, #25
 80055ee:	bf48      	it	mi
 80055f0:	b2b6      	uxthmi	r6, r6
 80055f2:	e7e6      	b.n	80055c2 <_printf_i+0x182>
 80055f4:	4615      	mov	r5, r2
 80055f6:	e7bb      	b.n	8005570 <_printf_i+0x130>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	6826      	ldr	r6, [r4, #0]
 80055fc:	6961      	ldr	r1, [r4, #20]
 80055fe:	1d18      	adds	r0, r3, #4
 8005600:	6028      	str	r0, [r5, #0]
 8005602:	0635      	lsls	r5, r6, #24
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	d501      	bpl.n	800560c <_printf_i+0x1cc>
 8005608:	6019      	str	r1, [r3, #0]
 800560a:	e002      	b.n	8005612 <_printf_i+0x1d2>
 800560c:	0670      	lsls	r0, r6, #25
 800560e:	d5fb      	bpl.n	8005608 <_printf_i+0x1c8>
 8005610:	8019      	strh	r1, [r3, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	4615      	mov	r5, r2
 8005618:	e7ba      	b.n	8005590 <_printf_i+0x150>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	602a      	str	r2, [r5, #0]
 8005620:	681d      	ldr	r5, [r3, #0]
 8005622:	6862      	ldr	r2, [r4, #4]
 8005624:	2100      	movs	r1, #0
 8005626:	4628      	mov	r0, r5
 8005628:	f7fa fdd2 	bl	80001d0 <memchr>
 800562c:	b108      	cbz	r0, 8005632 <_printf_i+0x1f2>
 800562e:	1b40      	subs	r0, r0, r5
 8005630:	6060      	str	r0, [r4, #4]
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	2300      	movs	r3, #0
 8005638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563c:	e7a8      	b.n	8005590 <_printf_i+0x150>
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	462a      	mov	r2, r5
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	47d0      	blx	sl
 8005648:	3001      	adds	r0, #1
 800564a:	d0ab      	beq.n	80055a4 <_printf_i+0x164>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	079b      	lsls	r3, r3, #30
 8005650:	d413      	bmi.n	800567a <_printf_i+0x23a>
 8005652:	68e0      	ldr	r0, [r4, #12]
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	4298      	cmp	r0, r3
 8005658:	bfb8      	it	lt
 800565a:	4618      	movlt	r0, r3
 800565c:	e7a4      	b.n	80055a8 <_printf_i+0x168>
 800565e:	2301      	movs	r3, #1
 8005660:	4632      	mov	r2, r6
 8005662:	4649      	mov	r1, r9
 8005664:	4640      	mov	r0, r8
 8005666:	47d0      	blx	sl
 8005668:	3001      	adds	r0, #1
 800566a:	d09b      	beq.n	80055a4 <_printf_i+0x164>
 800566c:	3501      	adds	r5, #1
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	9903      	ldr	r1, [sp, #12]
 8005672:	1a5b      	subs	r3, r3, r1
 8005674:	42ab      	cmp	r3, r5
 8005676:	dcf2      	bgt.n	800565e <_printf_i+0x21e>
 8005678:	e7eb      	b.n	8005652 <_printf_i+0x212>
 800567a:	2500      	movs	r5, #0
 800567c:	f104 0619 	add.w	r6, r4, #25
 8005680:	e7f5      	b.n	800566e <_printf_i+0x22e>
 8005682:	bf00      	nop
 8005684:	08005949 	.word	0x08005949
 8005688:	0800595a 	.word	0x0800595a

0800568c <_sbrk_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d06      	ldr	r5, [pc, #24]	; (80056a8 <_sbrk_r+0x1c>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f7fb fa12 	bl	8000ac0 <_sbrk>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_sbrk_r+0x1a>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_sbrk_r+0x1a>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	20000138 	.word	0x20000138

080056ac <__sread>:
 80056ac:	b510      	push	{r4, lr}
 80056ae:	460c      	mov	r4, r1
 80056b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b4:	f000 f8a0 	bl	80057f8 <_read_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	bfab      	itete	ge
 80056bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056be:	89a3      	ldrhlt	r3, [r4, #12]
 80056c0:	181b      	addge	r3, r3, r0
 80056c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056c6:	bfac      	ite	ge
 80056c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ca:	81a3      	strhlt	r3, [r4, #12]
 80056cc:	bd10      	pop	{r4, pc}

080056ce <__swrite>:
 80056ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d2:	461f      	mov	r7, r3
 80056d4:	898b      	ldrh	r3, [r1, #12]
 80056d6:	05db      	lsls	r3, r3, #23
 80056d8:	4605      	mov	r5, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	4616      	mov	r6, r2
 80056de:	d505      	bpl.n	80056ec <__swrite+0x1e>
 80056e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e4:	2302      	movs	r3, #2
 80056e6:	2200      	movs	r2, #0
 80056e8:	f000 f868 	bl	80057bc <_lseek_r>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f6:	81a3      	strh	r3, [r4, #12]
 80056f8:	4632      	mov	r2, r6
 80056fa:	463b      	mov	r3, r7
 80056fc:	4628      	mov	r0, r5
 80056fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005702:	f000 b817 	b.w	8005734 <_write_r>

08005706 <__sseek>:
 8005706:	b510      	push	{r4, lr}
 8005708:	460c      	mov	r4, r1
 800570a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570e:	f000 f855 	bl	80057bc <_lseek_r>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	bf15      	itete	ne
 8005718:	6560      	strne	r0, [r4, #84]	; 0x54
 800571a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800571e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005722:	81a3      	strheq	r3, [r4, #12]
 8005724:	bf18      	it	ne
 8005726:	81a3      	strhne	r3, [r4, #12]
 8005728:	bd10      	pop	{r4, pc}

0800572a <__sclose>:
 800572a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572e:	f000 b813 	b.w	8005758 <_close_r>
	...

08005734 <_write_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d07      	ldr	r5, [pc, #28]	; (8005754 <_write_r+0x20>)
 8005738:	4604      	mov	r4, r0
 800573a:	4608      	mov	r0, r1
 800573c:	4611      	mov	r1, r2
 800573e:	2200      	movs	r2, #0
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f7fb f96b 	bl	8000a1e <_write>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_write_r+0x1e>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_write_r+0x1e>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	20000138 	.word	0x20000138

08005758 <_close_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d06      	ldr	r5, [pc, #24]	; (8005774 <_close_r+0x1c>)
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fb f977 	bl	8000a56 <_close>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_close_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_close_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20000138 	.word	0x20000138

08005778 <_fstat_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d07      	ldr	r5, [pc, #28]	; (8005798 <_fstat_r+0x20>)
 800577c:	2300      	movs	r3, #0
 800577e:	4604      	mov	r4, r0
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	602b      	str	r3, [r5, #0]
 8005786:	f7fb f972 	bl	8000a6e <_fstat>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	d102      	bne.n	8005794 <_fstat_r+0x1c>
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	b103      	cbz	r3, 8005794 <_fstat_r+0x1c>
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	bd38      	pop	{r3, r4, r5, pc}
 8005796:	bf00      	nop
 8005798:	20000138 	.word	0x20000138

0800579c <_isatty_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d06      	ldr	r5, [pc, #24]	; (80057b8 <_isatty_r+0x1c>)
 80057a0:	2300      	movs	r3, #0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	f7fb f971 	bl	8000a8e <_isatty>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_isatty_r+0x1a>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_isatty_r+0x1a>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	20000138 	.word	0x20000138

080057bc <_lseek_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d07      	ldr	r5, [pc, #28]	; (80057dc <_lseek_r+0x20>)
 80057c0:	4604      	mov	r4, r0
 80057c2:	4608      	mov	r0, r1
 80057c4:	4611      	mov	r1, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	602a      	str	r2, [r5, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f7fb f96a 	bl	8000aa4 <_lseek>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_lseek_r+0x1e>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_lseek_r+0x1e>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	20000138 	.word	0x20000138

080057e0 <__malloc_lock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	; (80057e8 <__malloc_lock+0x8>)
 80057e2:	f7ff bb1d 	b.w	8004e20 <__retarget_lock_acquire_recursive>
 80057e6:	bf00      	nop
 80057e8:	2000012c 	.word	0x2000012c

080057ec <__malloc_unlock>:
 80057ec:	4801      	ldr	r0, [pc, #4]	; (80057f4 <__malloc_unlock+0x8>)
 80057ee:	f7ff bb18 	b.w	8004e22 <__retarget_lock_release_recursive>
 80057f2:	bf00      	nop
 80057f4:	2000012c 	.word	0x2000012c

080057f8 <_read_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4d07      	ldr	r5, [pc, #28]	; (8005818 <_read_r+0x20>)
 80057fc:	4604      	mov	r4, r0
 80057fe:	4608      	mov	r0, r1
 8005800:	4611      	mov	r1, r2
 8005802:	2200      	movs	r2, #0
 8005804:	602a      	str	r2, [r5, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f7fb f8ec 	bl	80009e4 <_read>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d102      	bne.n	8005816 <_read_r+0x1e>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	b103      	cbz	r3, 8005816 <_read_r+0x1e>
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	20000138 	.word	0x20000138

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
